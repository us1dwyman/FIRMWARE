

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Sep 17 07:13:39 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F15386
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	clrtext,global,class=CODE,delta=2
    20                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    21                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    22                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    23                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    26                           	psect	text1,local,class=CODE,merge=1,delta=2
    27                           	psect	text2,local,class=CODE,merge=1,delta=2
    28                           	psect	text3,local,class=CODE,merge=1,delta=2
    29                           	psect	text4,local,class=CODE,merge=1,delta=2
    30                           	psect	text5,local,class=CODE,merge=1,delta=2
    31                           	psect	text6,local,class=CODE,merge=1,delta=2
    32                           	psect	text7,local,class=CODE,merge=1,delta=2
    33                           	psect	text8,local,class=CODE,merge=1,delta=2
    34                           	psect	text9,local,class=CODE,merge=1,delta=2
    35                           	psect	text10,local,class=CODE,merge=1,delta=2
    36                           	psect	text11,local,class=CODE,merge=1,delta=2
    37                           	psect	text12,local,class=CODE,merge=1,delta=2
    38                           	psect	text13,local,class=CODE,merge=1,delta=2
    39                           	psect	text14,local,class=CODE,merge=1,delta=2
    40                           	psect	text15,local,class=CODE,merge=1,delta=2
    41                           	psect	text16,local,class=CODE,merge=1,delta=2
    42                           	psect	text17,local,class=CODE,merge=1,delta=2
    43                           	psect	text18,local,class=CODE,merge=1,delta=2
    44                           	psect	text19,local,class=CODE,merge=1,delta=2
    45                           	psect	text20,local,class=CODE,merge=1,delta=2
    46                           	psect	text21,local,class=CODE,merge=1,delta=2
    47                           	psect	text22,local,class=CODE,merge=1,delta=2
    48                           	psect	text23,local,class=CODE,merge=1,delta=2
    49                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text25,local,class=CODE,merge=1,delta=2
    51                           	psect	text26,local,class=CODE,merge=1,delta=2
    52                           	psect	text27,local,class=CODE,merge=1,delta=2
    53                           	psect	text28,local,class=CODE,merge=1,delta=2
    54                           	psect	text29,local,class=CODE,merge=1,delta=2
    55                           	psect	text30,local,class=CODE,merge=1,delta=2
    56                           	psect	text31,local,class=CODE,merge=1,delta=2
    57                           	psect	text32,local,class=CODE,merge=1,delta=2
    58                           	psect	text33,local,class=CODE,merge=1,delta=2
    59                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text35,local,class=CODE,merge=1,delta=2
    61                           	psect	text36,local,class=CODE,merge=1,delta=2
    62                           	psect	text37,local,class=CODE,merge=1,delta=2
    63                           	psect	text38,local,class=CODE,merge=1,delta=2
    64                           	psect	text39,local,class=CODE,merge=1,delta=2
    65                           	psect	text40,local,class=CODE,merge=1,delta=2
    66                           	psect	text41,local,class=CODE,merge=1,delta=2
    67                           	psect	text42,local,class=CODE,merge=1,delta=2
    68                           	psect	text43,local,class=CODE,merge=1,delta=2
    69                           	psect	text44,local,class=CODE,merge=1,delta=2
    70                           	psect	intentry,global,class=CODE,delta=2
    71                           	psect	text46,local,class=CODE,merge=1,delta=2
    72                           	psect	text47,local,class=CODE,merge=1,delta=2
    73                           	psect	text48,local,class=CODE,merge=1,delta=2
    74                           	psect	text49,local,class=CODE,merge=1,delta=2
    75                           	psect	text50,local,class=CODE,merge=1,delta=2
    76                           	psect	text51,local,class=CODE,merge=1,delta=2
    77                           	psect	text52,local,class=CODE,merge=1,delta=2
    78                           	psect	text53,local,class=CODE,merge=1,delta=2
    79                           	psect	text54,local,class=CODE,merge=1,delta=2
    80                           	psect	text55,local,class=CODE,merge=1,delta=2
    81                           	psect	text56,local,class=CODE,merge=1,delta=2
    82                           	psect	text57,local,class=CODE,merge=1,delta=2
    83                           	psect	text58,local,class=CODE,merge=1,delta=2
    84                           	dabs	1,0xCA0,32
    85                           	dabs	1,0xC20,80
    86                           	dabs	1,0xBA0,80
    87                           	dabs	1,0xB5E,18
    88                           	dabs	1,0xB20,62
    89                           	dabs	1,0xAA0,80
    90                           	dabs	1,0xA2C,68
    91                           	dabs	1,0x264C,0,_CAN_rxMessageQ
    92                           	dabs	1,0x271E,0,_CAN_txMessageQ
    93                           	dabs	1,0x7E,2
    94  0000                     
    95                           ; Version 1.45
    96                           ; Generated 16/11/2017 GMT
    97                           ; 
    98                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    99                           ; All rights reserved.
   100                           ; 
   101                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   102                           ; 
   103                           ; Redistribution and use in source and binary forms, with or without modification, are
   104                           ; permitted provided that the following conditions are met:
   105                           ; 
   106                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   107                           ;        conditions and the following disclaimer.
   108                           ; 
   109                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   110                           ;        of conditions and the following disclaimer in the documentation and/or other
   111                           ;        materials provided with the distribution.
   112                           ; 
   113                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   114                           ;        software without specific prior written permission.
   115                           ; 
   116                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   117                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   118                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   119                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   120                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   121                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   122                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   123                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   124                           ; 
   125                           ; 
   126                           ; Code-generator required, PIC16F15386 Definitions
   127                           ; 
   128                           ; SFR Addresses
   129  0000                     	;# 
   130  0001                     	;# 
   131  0002                     	;# 
   132  0003                     	;# 
   133  0004                     	;# 
   134  0005                     	;# 
   135  0006                     	;# 
   136  0007                     	;# 
   137  0008                     	;# 
   138  0009                     	;# 
   139  000A                     	;# 
   140  000B                     	;# 
   141  000C                     	;# 
   142  000D                     	;# 
   143  000E                     	;# 
   144  000F                     	;# 
   145  0010                     	;# 
   146  0011                     	;# 
   147  0012                     	;# 
   148  0013                     	;# 
   149  0014                     	;# 
   150  0015                     	;# 
   151  0016                     	;# 
   152  0017                     	;# 
   153  0018                     	;# 
   154  0019                     	;# 
   155  001A                     	;# 
   156  001B                     	;# 
   157  001C                     	;# 
   158  001D                     	;# 
   159  009B                     	;# 
   160  009B                     	;# 
   161  009C                     	;# 
   162  009D                     	;# 
   163  009E                     	;# 
   164  009F                     	;# 
   165  0119                     	;# 
   166  0119                     	;# 
   167  0119                     	;# 
   168  011A                     	;# 
   169  011A                     	;# 
   170  011A                     	;# 
   171  011B                     	;# 
   172  011B                     	;# 
   173  011B                     	;# 
   174  011B                     	;# 
   175  011B                     	;# 
   176  011C                     	;# 
   177  011C                     	;# 
   178  011C                     	;# 
   179  011D                     	;# 
   180  011D                     	;# 
   181  011D                     	;# 
   182  011E                     	;# 
   183  011E                     	;# 
   184  011E                     	;# 
   185  011F                     	;# 
   186  011F                     	;# 
   187  011F                     	;# 
   188  011F                     	;# 
   189  011F                     	;# 
   190  018C                     	;# 
   191  018D                     	;# 
   192  018E                     	;# 
   193  018F                     	;# 
   194  0190                     	;# 
   195  0191                     	;# 
   196  0192                     	;# 
   197  0196                     	;# 
   198  0197                     	;# 
   199  0198                     	;# 
   200  0199                     	;# 
   201  019A                     	;# 
   202  019B                     	;# 
   203  019C                     	;# 
   204  020C                     	;# 
   205  020C                     	;# 
   206  020D                     	;# 
   207  020E                     	;# 
   208  020F                     	;# 
   209  020F                     	;# 
   210  0210                     	;# 
   211  0210                     	;# 
   212  0211                     	;# 
   213  0211                     	;# 
   214  028C                     	;# 
   215  028C                     	;# 
   216  028D                     	;# 
   217  028D                     	;# 
   218  028E                     	;# 
   219  028F                     	;# 
   220  0290                     	;# 
   221  0291                     	;# 
   222  030C                     	;# 
   223  030C                     	;# 
   224  030D                     	;# 
   225  030E                     	;# 
   226  030F                     	;# 
   227  0310                     	;# 
   228  0310                     	;# 
   229  0311                     	;# 
   230  0312                     	;# 
   231  0313                     	;# 
   232  0314                     	;# 
   233  0315                     	;# 
   234  0316                     	;# 
   235  0318                     	;# 
   236  0319                     	;# 
   237  031A                     	;# 
   238  031C                     	;# 
   239  031D                     	;# 
   240  031E                     	;# 
   241  038C                     	;# 
   242  038D                     	;# 
   243  038E                     	;# 
   244  058C                     	;# 
   245  058C                     	;# 
   246  058D                     	;# 
   247  058E                     	;# 
   248  058F                     	;# 
   249  058F                     	;# 
   250  0590                     	;# 
   251  0591                     	;# 
   252  0592                     	;# 
   253  0593                     	;# 
   254  059C                     	;# 
   255  059C                     	;# 
   256  059D                     	;# 
   257  059D                     	;# 
   258  059E                     	;# 
   259  059F                     	;# 
   260  060C                     	;# 
   261  060D                     	;# 
   262  060E                     	;# 
   263  060F                     	;# 
   264  0610                     	;# 
   265  0611                     	;# 
   266  0612                     	;# 
   267  0613                     	;# 
   268  0614                     	;# 
   269  070C                     	;# 
   270  070D                     	;# 
   271  070E                     	;# 
   272  070F                     	;# 
   273  0710                     	;# 
   274  0711                     	;# 
   275  0712                     	;# 
   276  0713                     	;# 
   277  0716                     	;# 
   278  0717                     	;# 
   279  0718                     	;# 
   280  0719                     	;# 
   281  071A                     	;# 
   282  071B                     	;# 
   283  071C                     	;# 
   284  071D                     	;# 
   285  0796                     	;# 
   286  0797                     	;# 
   287  0798                     	;# 
   288  0799                     	;# 
   289  079A                     	;# 
   290  079B                     	;# 
   291  080C                     	;# 
   292  080D                     	;# 
   293  080E                     	;# 
   294  080F                     	;# 
   295  0810                     	;# 
   296  0811                     	;# 
   297  0812                     	;# 
   298  0813                     	;# 
   299  0814                     	;# 
   300  081A                     	;# 
   301  081A                     	;# 
   302  081B                     	;# 
   303  081C                     	;# 
   304  081C                     	;# 
   305  081D                     	;# 
   306  081E                     	;# 
   307  081F                     	;# 
   308  088C                     	;# 
   309  088D                     	;# 
   310  088E                     	;# 
   311  088F                     	;# 
   312  0890                     	;# 
   313  0891                     	;# 
   314  0892                     	;# 
   315  0893                     	;# 
   316  0895                     	;# 
   317  0896                     	;# 
   318  090C                     	;# 
   319  090E                     	;# 
   320  090F                     	;# 
   321  091F                     	;# 
   322  098F                     	;# 
   323  098F                     	;# 
   324  0990                     	;# 
   325  0991                     	;# 
   326  0992                     	;# 
   327  0993                     	;# 
   328  0994                     	;# 
   329  0995                     	;# 
   330  0996                     	;# 
   331  0997                     	;# 
   332  0A19                     	;# 
   333  0A19                     	;# 
   334  0A1A                     	;# 
   335  0A1A                     	;# 
   336  0A1B                     	;# 
   337  0A1B                     	;# 
   338  0A1B                     	;# 
   339  0A1C                     	;# 
   340  0A1C                     	;# 
   341  0A1D                     	;# 
   342  0A1D                     	;# 
   343  0A1E                     	;# 
   344  0A1E                     	;# 
   345  0A1F                     	;# 
   346  0A1F                     	;# 
   347  0A1F                     	;# 
   348  1E0F                     	;# 
   349  1E10                     	;# 
   350  1E11                     	;# 
   351  1E12                     	;# 
   352  1E13                     	;# 
   353  1E14                     	;# 
   354  1E15                     	;# 
   355  1E16                     	;# 
   356  1E17                     	;# 
   357  1E18                     	;# 
   358  1E19                     	;# 
   359  1E1A                     	;# 
   360  1E1B                     	;# 
   361  1E1C                     	;# 
   362  1E1D                     	;# 
   363  1E1E                     	;# 
   364  1E1F                     	;# 
   365  1E20                     	;# 
   366  1E21                     	;# 
   367  1E22                     	;# 
   368  1E23                     	;# 
   369  1E24                     	;# 
   370  1E25                     	;# 
   371  1E26                     	;# 
   372  1E27                     	;# 
   373  1E28                     	;# 
   374  1E29                     	;# 
   375  1E2A                     	;# 
   376  1E2B                     	;# 
   377  1E2C                     	;# 
   378  1E2D                     	;# 
   379  1E2E                     	;# 
   380  1E2F                     	;# 
   381  1E30                     	;# 
   382  1E31                     	;# 
   383  1E32                     	;# 
   384  1E33                     	;# 
   385  1E34                     	;# 
   386  1E35                     	;# 
   387  1E36                     	;# 
   388  1E37                     	;# 
   389  1E38                     	;# 
   390  1E39                     	;# 
   391  1E3A                     	;# 
   392  1E3B                     	;# 
   393  1E3C                     	;# 
   394  1E3D                     	;# 
   395  1E3E                     	;# 
   396  1E3F                     	;# 
   397  1E50                     	;# 
   398  1E51                     	;# 
   399  1E52                     	;# 
   400  1E53                     	;# 
   401  1E54                     	;# 
   402  1E8F                     	;# 
   403  1E90                     	;# 
   404  1E91                     	;# 
   405  1E92                     	;# 
   406  1E93                     	;# 
   407  1E9C                     	;# 
   408  1EA1                     	;# 
   409  1EA2                     	;# 
   410  1EB1                     	;# 
   411  1EBB                     	;# 
   412  1EBC                     	;# 
   413  1EBD                     	;# 
   414  1EBE                     	;# 
   415  1EC3                     	;# 
   416  1EC5                     	;# 
   417  1EC6                     	;# 
   418  1EC7                     	;# 
   419  1EC8                     	;# 
   420  1EC9                     	;# 
   421  1ECA                     	;# 
   422  1ECB                     	;# 
   423  1ECC                     	;# 
   424  1ECD                     	;# 
   425  1ECE                     	;# 
   426  1F10                     	;# 
   427  1F11                     	;# 
   428  1F12                     	;# 
   429  1F13                     	;# 
   430  1F14                     	;# 
   431  1F15                     	;# 
   432  1F16                     	;# 
   433  1F17                     	;# 
   434  1F18                     	;# 
   435  1F19                     	;# 
   436  1F1A                     	;# 
   437  1F1B                     	;# 
   438  1F1C                     	;# 
   439  1F1D                     	;# 
   440  1F1E                     	;# 
   441  1F1F                     	;# 
   442  1F20                     	;# 
   443  1F21                     	;# 
   444  1F22                     	;# 
   445  1F23                     	;# 
   446  1F24                     	;# 
   447  1F25                     	;# 
   448  1F26                     	;# 
   449  1F27                     	;# 
   450  1F28                     	;# 
   451  1F29                     	;# 
   452  1F2A                     	;# 
   453  1F2B                     	;# 
   454  1F2C                     	;# 
   455  1F2D                     	;# 
   456  1F2E                     	;# 
   457  1F2F                     	;# 
   458  1F30                     	;# 
   459  1F31                     	;# 
   460  1F32                     	;# 
   461  1F38                     	;# 
   462  1F39                     	;# 
   463  1F3A                     	;# 
   464  1F3B                     	;# 
   465  1F3C                     	;# 
   466  1F3D                     	;# 
   467  1F3E                     	;# 
   468  1F3F                     	;# 
   469  1F43                     	;# 
   470  1F44                     	;# 
   471  1F45                     	;# 
   472  1F46                     	;# 
   473  1F47                     	;# 
   474  1F48                     	;# 
   475  1F49                     	;# 
   476  1F4A                     	;# 
   477  1F4E                     	;# 
   478  1F4F                     	;# 
   479  1F50                     	;# 
   480  1F51                     	;# 
   481  1F52                     	;# 
   482  1F53                     	;# 
   483  1F54                     	;# 
   484  1F55                     	;# 
   485  1F59                     	;# 
   486  1F5A                     	;# 
   487  1F5B                     	;# 
   488  1F5C                     	;# 
   489  1F5D                     	;# 
   490  1F64                     	;# 
   491  1F65                     	;# 
   492  1F66                     	;# 
   493  1F67                     	;# 
   494  1F68                     	;# 
   495  1F69                     	;# 
   496  1F6A                     	;# 
   497  1F6B                     	;# 
   498  1FE4                     	;# 
   499  1FE5                     	;# 
   500  1FE6                     	;# 
   501  1FE7                     	;# 
   502  1FE8                     	;# 
   503  1FE8                     	;# 
   504  1FE9                     	;# 
   505  1FEA                     	;# 
   506  1FEB                     	;# 
   507  1FED                     	;# 
   508  1FEE                     	;# 
   509  1FEF                     	;# 
   510  0000                     	;# 
   511  0001                     	;# 
   512  0002                     	;# 
   513  0003                     	;# 
   514  0004                     	;# 
   515  0005                     	;# 
   516  0006                     	;# 
   517  0007                     	;# 
   518  0008                     	;# 
   519  0009                     	;# 
   520  000A                     	;# 
   521  000B                     	;# 
   522  000C                     	;# 
   523  000D                     	;# 
   524  000E                     	;# 
   525  000F                     	;# 
   526  0010                     	;# 
   527  0011                     	;# 
   528  0012                     	;# 
   529  0013                     	;# 
   530  0014                     	;# 
   531  0015                     	;# 
   532  0016                     	;# 
   533  0017                     	;# 
   534  0018                     	;# 
   535  0019                     	;# 
   536  001A                     	;# 
   537  001B                     	;# 
   538  001C                     	;# 
   539  001D                     	;# 
   540  009B                     	;# 
   541  009B                     	;# 
   542  009C                     	;# 
   543  009D                     	;# 
   544  009E                     	;# 
   545  009F                     	;# 
   546  0119                     	;# 
   547  0119                     	;# 
   548  0119                     	;# 
   549  011A                     	;# 
   550  011A                     	;# 
   551  011A                     	;# 
   552  011B                     	;# 
   553  011B                     	;# 
   554  011B                     	;# 
   555  011B                     	;# 
   556  011B                     	;# 
   557  011C                     	;# 
   558  011C                     	;# 
   559  011C                     	;# 
   560  011D                     	;# 
   561  011D                     	;# 
   562  011D                     	;# 
   563  011E                     	;# 
   564  011E                     	;# 
   565  011E                     	;# 
   566  011F                     	;# 
   567  011F                     	;# 
   568  011F                     	;# 
   569  011F                     	;# 
   570  011F                     	;# 
   571  018C                     	;# 
   572  018D                     	;# 
   573  018E                     	;# 
   574  018F                     	;# 
   575  0190                     	;# 
   576  0191                     	;# 
   577  0192                     	;# 
   578  0196                     	;# 
   579  0197                     	;# 
   580  0198                     	;# 
   581  0199                     	;# 
   582  019A                     	;# 
   583  019B                     	;# 
   584  019C                     	;# 
   585  020C                     	;# 
   586  020C                     	;# 
   587  020D                     	;# 
   588  020E                     	;# 
   589  020F                     	;# 
   590  020F                     	;# 
   591  0210                     	;# 
   592  0210                     	;# 
   593  0211                     	;# 
   594  0211                     	;# 
   595  028C                     	;# 
   596  028C                     	;# 
   597  028D                     	;# 
   598  028D                     	;# 
   599  028E                     	;# 
   600  028F                     	;# 
   601  0290                     	;# 
   602  0291                     	;# 
   603  030C                     	;# 
   604  030C                     	;# 
   605  030D                     	;# 
   606  030E                     	;# 
   607  030F                     	;# 
   608  0310                     	;# 
   609  0310                     	;# 
   610  0311                     	;# 
   611  0312                     	;# 
   612  0313                     	;# 
   613  0314                     	;# 
   614  0315                     	;# 
   615  0316                     	;# 
   616  0318                     	;# 
   617  0319                     	;# 
   618  031A                     	;# 
   619  031C                     	;# 
   620  031D                     	;# 
   621  031E                     	;# 
   622  038C                     	;# 
   623  038D                     	;# 
   624  038E                     	;# 
   625  058C                     	;# 
   626  058C                     	;# 
   627  058D                     	;# 
   628  058E                     	;# 
   629  058F                     	;# 
   630  058F                     	;# 
   631  0590                     	;# 
   632  0591                     	;# 
   633  0592                     	;# 
   634  0593                     	;# 
   635  059C                     	;# 
   636  059C                     	;# 
   637  059D                     	;# 
   638  059D                     	;# 
   639  059E                     	;# 
   640  059F                     	;# 
   641  060C                     	;# 
   642  060D                     	;# 
   643  060E                     	;# 
   644  060F                     	;# 
   645  0610                     	;# 
   646  0611                     	;# 
   647  0612                     	;# 
   648  0613                     	;# 
   649  0614                     	;# 
   650  070C                     	;# 
   651  070D                     	;# 
   652  070E                     	;# 
   653  070F                     	;# 
   654  0710                     	;# 
   655  0711                     	;# 
   656  0712                     	;# 
   657  0713                     	;# 
   658  0716                     	;# 
   659  0717                     	;# 
   660  0718                     	;# 
   661  0719                     	;# 
   662  071A                     	;# 
   663  071B                     	;# 
   664  071C                     	;# 
   665  071D                     	;# 
   666  0796                     	;# 
   667  0797                     	;# 
   668  0798                     	;# 
   669  0799                     	;# 
   670  079A                     	;# 
   671  079B                     	;# 
   672  080C                     	;# 
   673  080D                     	;# 
   674  080E                     	;# 
   675  080F                     	;# 
   676  0810                     	;# 
   677  0811                     	;# 
   678  0812                     	;# 
   679  0813                     	;# 
   680  0814                     	;# 
   681  081A                     	;# 
   682  081A                     	;# 
   683  081B                     	;# 
   684  081C                     	;# 
   685  081C                     	;# 
   686  081D                     	;# 
   687  081E                     	;# 
   688  081F                     	;# 
   689  088C                     	;# 
   690  088D                     	;# 
   691  088E                     	;# 
   692  088F                     	;# 
   693  0890                     	;# 
   694  0891                     	;# 
   695  0892                     	;# 
   696  0893                     	;# 
   697  0895                     	;# 
   698  0896                     	;# 
   699  090C                     	;# 
   700  090E                     	;# 
   701  090F                     	;# 
   702  091F                     	;# 
   703  098F                     	;# 
   704  098F                     	;# 
   705  0990                     	;# 
   706  0991                     	;# 
   707  0992                     	;# 
   708  0993                     	;# 
   709  0994                     	;# 
   710  0995                     	;# 
   711  0996                     	;# 
   712  0997                     	;# 
   713  0A19                     	;# 
   714  0A19                     	;# 
   715  0A1A                     	;# 
   716  0A1A                     	;# 
   717  0A1B                     	;# 
   718  0A1B                     	;# 
   719  0A1B                     	;# 
   720  0A1C                     	;# 
   721  0A1C                     	;# 
   722  0A1D                     	;# 
   723  0A1D                     	;# 
   724  0A1E                     	;# 
   725  0A1E                     	;# 
   726  0A1F                     	;# 
   727  0A1F                     	;# 
   728  0A1F                     	;# 
   729  1E0F                     	;# 
   730  1E10                     	;# 
   731  1E11                     	;# 
   732  1E12                     	;# 
   733  1E13                     	;# 
   734  1E14                     	;# 
   735  1E15                     	;# 
   736  1E16                     	;# 
   737  1E17                     	;# 
   738  1E18                     	;# 
   739  1E19                     	;# 
   740  1E1A                     	;# 
   741  1E1B                     	;# 
   742  1E1C                     	;# 
   743  1E1D                     	;# 
   744  1E1E                     	;# 
   745  1E1F                     	;# 
   746  1E20                     	;# 
   747  1E21                     	;# 
   748  1E22                     	;# 
   749  1E23                     	;# 
   750  1E24                     	;# 
   751  1E25                     	;# 
   752  1E26                     	;# 
   753  1E27                     	;# 
   754  1E28                     	;# 
   755  1E29                     	;# 
   756  1E2A                     	;# 
   757  1E2B                     	;# 
   758  1E2C                     	;# 
   759  1E2D                     	;# 
   760  1E2E                     	;# 
   761  1E2F                     	;# 
   762  1E30                     	;# 
   763  1E31                     	;# 
   764  1E32                     	;# 
   765  1E33                     	;# 
   766  1E34                     	;# 
   767  1E35                     	;# 
   768  1E36                     	;# 
   769  1E37                     	;# 
   770  1E38                     	;# 
   771  1E39                     	;# 
   772  1E3A                     	;# 
   773  1E3B                     	;# 
   774  1E3C                     	;# 
   775  1E3D                     	;# 
   776  1E3E                     	;# 
   777  1E3F                     	;# 
   778  1E50                     	;# 
   779  1E51                     	;# 
   780  1E52                     	;# 
   781  1E53                     	;# 
   782  1E54                     	;# 
   783  1E8F                     	;# 
   784  1E90                     	;# 
   785  1E91                     	;# 
   786  1E92                     	;# 
   787  1E93                     	;# 
   788  1E9C                     	;# 
   789  1EA1                     	;# 
   790  1EA2                     	;# 
   791  1EB1                     	;# 
   792  1EBB                     	;# 
   793  1EBC                     	;# 
   794  1EBD                     	;# 
   795  1EBE                     	;# 
   796  1EC3                     	;# 
   797  1EC5                     	;# 
   798  1EC6                     	;# 
   799  1EC7                     	;# 
   800  1EC8                     	;# 
   801  1EC9                     	;# 
   802  1ECA                     	;# 
   803  1ECB                     	;# 
   804  1ECC                     	;# 
   805  1ECD                     	;# 
   806  1ECE                     	;# 
   807  1F10                     	;# 
   808  1F11                     	;# 
   809  1F12                     	;# 
   810  1F13                     	;# 
   811  1F14                     	;# 
   812  1F15                     	;# 
   813  1F16                     	;# 
   814  1F17                     	;# 
   815  1F18                     	;# 
   816  1F19                     	;# 
   817  1F1A                     	;# 
   818  1F1B                     	;# 
   819  1F1C                     	;# 
   820  1F1D                     	;# 
   821  1F1E                     	;# 
   822  1F1F                     	;# 
   823  1F20                     	;# 
   824  1F21                     	;# 
   825  1F22                     	;# 
   826  1F23                     	;# 
   827  1F24                     	;# 
   828  1F25                     	;# 
   829  1F26                     	;# 
   830  1F27                     	;# 
   831  1F28                     	;# 
   832  1F29                     	;# 
   833  1F2A                     	;# 
   834  1F2B                     	;# 
   835  1F2C                     	;# 
   836  1F2D                     	;# 
   837  1F2E                     	;# 
   838  1F2F                     	;# 
   839  1F30                     	;# 
   840  1F31                     	;# 
   841  1F32                     	;# 
   842  1F38                     	;# 
   843  1F39                     	;# 
   844  1F3A                     	;# 
   845  1F3B                     	;# 
   846  1F3C                     	;# 
   847  1F3D                     	;# 
   848  1F3E                     	;# 
   849  1F3F                     	;# 
   850  1F43                     	;# 
   851  1F44                     	;# 
   852  1F45                     	;# 
   853  1F46                     	;# 
   854  1F47                     	;# 
   855  1F48                     	;# 
   856  1F49                     	;# 
   857  1F4A                     	;# 
   858  1F4E                     	;# 
   859  1F4F                     	;# 
   860  1F50                     	;# 
   861  1F51                     	;# 
   862  1F52                     	;# 
   863  1F53                     	;# 
   864  1F54                     	;# 
   865  1F55                     	;# 
   866  1F59                     	;# 
   867  1F5A                     	;# 
   868  1F5B                     	;# 
   869  1F5C                     	;# 
   870  1F5D                     	;# 
   871  1F64                     	;# 
   872  1F65                     	;# 
   873  1F66                     	;# 
   874  1F67                     	;# 
   875  1F68                     	;# 
   876  1F69                     	;# 
   877  1F6A                     	;# 
   878  1F6B                     	;# 
   879  1FE4                     	;# 
   880  1FE5                     	;# 
   881  1FE6                     	;# 
   882  1FE7                     	;# 
   883  1FE8                     	;# 
   884  1FE8                     	;# 
   885  1FE9                     	;# 
   886  1FEA                     	;# 
   887  1FEB                     	;# 
   888  1FED                     	;# 
   889  1FEE                     	;# 
   890  1FEF                     	;# 
   891  0000                     	;# 
   892  0001                     	;# 
   893  0002                     	;# 
   894  0003                     	;# 
   895  0004                     	;# 
   896  0005                     	;# 
   897  0006                     	;# 
   898  0007                     	;# 
   899  0008                     	;# 
   900  0009                     	;# 
   901  000A                     	;# 
   902  000B                     	;# 
   903  000C                     	;# 
   904  000D                     	;# 
   905  000E                     	;# 
   906  000F                     	;# 
   907  0010                     	;# 
   908  0011                     	;# 
   909  0012                     	;# 
   910  0013                     	;# 
   911  0014                     	;# 
   912  0015                     	;# 
   913  0016                     	;# 
   914  0017                     	;# 
   915  0018                     	;# 
   916  0019                     	;# 
   917  001A                     	;# 
   918  001B                     	;# 
   919  001C                     	;# 
   920  001D                     	;# 
   921  009B                     	;# 
   922  009B                     	;# 
   923  009C                     	;# 
   924  009D                     	;# 
   925  009E                     	;# 
   926  009F                     	;# 
   927  0119                     	;# 
   928  0119                     	;# 
   929  0119                     	;# 
   930  011A                     	;# 
   931  011A                     	;# 
   932  011A                     	;# 
   933  011B                     	;# 
   934  011B                     	;# 
   935  011B                     	;# 
   936  011B                     	;# 
   937  011B                     	;# 
   938  011C                     	;# 
   939  011C                     	;# 
   940  011C                     	;# 
   941  011D                     	;# 
   942  011D                     	;# 
   943  011D                     	;# 
   944  011E                     	;# 
   945  011E                     	;# 
   946  011E                     	;# 
   947  011F                     	;# 
   948  011F                     	;# 
   949  011F                     	;# 
   950  011F                     	;# 
   951  011F                     	;# 
   952  018C                     	;# 
   953  018D                     	;# 
   954  018E                     	;# 
   955  018F                     	;# 
   956  0190                     	;# 
   957  0191                     	;# 
   958  0192                     	;# 
   959  0196                     	;# 
   960  0197                     	;# 
   961  0198                     	;# 
   962  0199                     	;# 
   963  019A                     	;# 
   964  019B                     	;# 
   965  019C                     	;# 
   966  020C                     	;# 
   967  020C                     	;# 
   968  020D                     	;# 
   969  020E                     	;# 
   970  020F                     	;# 
   971  020F                     	;# 
   972  0210                     	;# 
   973  0210                     	;# 
   974  0211                     	;# 
   975  0211                     	;# 
   976  028C                     	;# 
   977  028C                     	;# 
   978  028D                     	;# 
   979  028D                     	;# 
   980  028E                     	;# 
   981  028F                     	;# 
   982  0290                     	;# 
   983  0291                     	;# 
   984  030C                     	;# 
   985  030C                     	;# 
   986  030D                     	;# 
   987  030E                     	;# 
   988  030F                     	;# 
   989  0310                     	;# 
   990  0310                     	;# 
   991  0311                     	;# 
   992  0312                     	;# 
   993  0313                     	;# 
   994  0314                     	;# 
   995  0315                     	;# 
   996  0316                     	;# 
   997  0318                     	;# 
   998  0319                     	;# 
   999  031A                     	;# 
  1000  031C                     	;# 
  1001  031D                     	;# 
  1002  031E                     	;# 
  1003  038C                     	;# 
  1004  038D                     	;# 
  1005  038E                     	;# 
  1006  058C                     	;# 
  1007  058C                     	;# 
  1008  058D                     	;# 
  1009  058E                     	;# 
  1010  058F                     	;# 
  1011  058F                     	;# 
  1012  0590                     	;# 
  1013  0591                     	;# 
  1014  0592                     	;# 
  1015  0593                     	;# 
  1016  059C                     	;# 
  1017  059C                     	;# 
  1018  059D                     	;# 
  1019  059D                     	;# 
  1020  059E                     	;# 
  1021  059F                     	;# 
  1022  060C                     	;# 
  1023  060D                     	;# 
  1024  060E                     	;# 
  1025  060F                     	;# 
  1026  0610                     	;# 
  1027  0611                     	;# 
  1028  0612                     	;# 
  1029  0613                     	;# 
  1030  0614                     	;# 
  1031  070C                     	;# 
  1032  070D                     	;# 
  1033  070E                     	;# 
  1034  070F                     	;# 
  1035  0710                     	;# 
  1036  0711                     	;# 
  1037  0712                     	;# 
  1038  0713                     	;# 
  1039  0716                     	;# 
  1040  0717                     	;# 
  1041  0718                     	;# 
  1042  0719                     	;# 
  1043  071A                     	;# 
  1044  071B                     	;# 
  1045  071C                     	;# 
  1046  071D                     	;# 
  1047  0796                     	;# 
  1048  0797                     	;# 
  1049  0798                     	;# 
  1050  0799                     	;# 
  1051  079A                     	;# 
  1052  079B                     	;# 
  1053  080C                     	;# 
  1054  080D                     	;# 
  1055  080E                     	;# 
  1056  080F                     	;# 
  1057  0810                     	;# 
  1058  0811                     	;# 
  1059  0812                     	;# 
  1060  0813                     	;# 
  1061  0814                     	;# 
  1062  081A                     	;# 
  1063  081A                     	;# 
  1064  081B                     	;# 
  1065  081C                     	;# 
  1066  081C                     	;# 
  1067  081D                     	;# 
  1068  081E                     	;# 
  1069  081F                     	;# 
  1070  088C                     	;# 
  1071  088D                     	;# 
  1072  088E                     	;# 
  1073  088F                     	;# 
  1074  0890                     	;# 
  1075  0891                     	;# 
  1076  0892                     	;# 
  1077  0893                     	;# 
  1078  0895                     	;# 
  1079  0896                     	;# 
  1080  090C                     	;# 
  1081  090E                     	;# 
  1082  090F                     	;# 
  1083  091F                     	;# 
  1084  098F                     	;# 
  1085  098F                     	;# 
  1086  0990                     	;# 
  1087  0991                     	;# 
  1088  0992                     	;# 
  1089  0993                     	;# 
  1090  0994                     	;# 
  1091  0995                     	;# 
  1092  0996                     	;# 
  1093  0997                     	;# 
  1094  0A19                     	;# 
  1095  0A19                     	;# 
  1096  0A1A                     	;# 
  1097  0A1A                     	;# 
  1098  0A1B                     	;# 
  1099  0A1B                     	;# 
  1100  0A1B                     	;# 
  1101  0A1C                     	;# 
  1102  0A1C                     	;# 
  1103  0A1D                     	;# 
  1104  0A1D                     	;# 
  1105  0A1E                     	;# 
  1106  0A1E                     	;# 
  1107  0A1F                     	;# 
  1108  0A1F                     	;# 
  1109  0A1F                     	;# 
  1110  1E0F                     	;# 
  1111  1E10                     	;# 
  1112  1E11                     	;# 
  1113  1E12                     	;# 
  1114  1E13                     	;# 
  1115  1E14                     	;# 
  1116  1E15                     	;# 
  1117  1E16                     	;# 
  1118  1E17                     	;# 
  1119  1E18                     	;# 
  1120  1E19                     	;# 
  1121  1E1A                     	;# 
  1122  1E1B                     	;# 
  1123  1E1C                     	;# 
  1124  1E1D                     	;# 
  1125  1E1E                     	;# 
  1126  1E1F                     	;# 
  1127  1E20                     	;# 
  1128  1E21                     	;# 
  1129  1E22                     	;# 
  1130  1E23                     	;# 
  1131  1E24                     	;# 
  1132  1E25                     	;# 
  1133  1E26                     	;# 
  1134  1E27                     	;# 
  1135  1E28                     	;# 
  1136  1E29                     	;# 
  1137  1E2A                     	;# 
  1138  1E2B                     	;# 
  1139  1E2C                     	;# 
  1140  1E2D                     	;# 
  1141  1E2E                     	;# 
  1142  1E2F                     	;# 
  1143  1E30                     	;# 
  1144  1E31                     	;# 
  1145  1E32                     	;# 
  1146  1E33                     	;# 
  1147  1E34                     	;# 
  1148  1E35                     	;# 
  1149  1E36                     	;# 
  1150  1E37                     	;# 
  1151  1E38                     	;# 
  1152  1E39                     	;# 
  1153  1E3A                     	;# 
  1154  1E3B                     	;# 
  1155  1E3C                     	;# 
  1156  1E3D                     	;# 
  1157  1E3E                     	;# 
  1158  1E3F                     	;# 
  1159  1E50                     	;# 
  1160  1E51                     	;# 
  1161  1E52                     	;# 
  1162  1E53                     	;# 
  1163  1E54                     	;# 
  1164  1E8F                     	;# 
  1165  1E90                     	;# 
  1166  1E91                     	;# 
  1167  1E92                     	;# 
  1168  1E93                     	;# 
  1169  1E9C                     	;# 
  1170  1EA1                     	;# 
  1171  1EA2                     	;# 
  1172  1EB1                     	;# 
  1173  1EBB                     	;# 
  1174  1EBC                     	;# 
  1175  1EBD                     	;# 
  1176  1EBE                     	;# 
  1177  1EC3                     	;# 
  1178  1EC5                     	;# 
  1179  1EC6                     	;# 
  1180  1EC7                     	;# 
  1181  1EC8                     	;# 
  1182  1EC9                     	;# 
  1183  1ECA                     	;# 
  1184  1ECB                     	;# 
  1185  1ECC                     	;# 
  1186  1ECD                     	;# 
  1187  1ECE                     	;# 
  1188  1F10                     	;# 
  1189  1F11                     	;# 
  1190  1F12                     	;# 
  1191  1F13                     	;# 
  1192  1F14                     	;# 
  1193  1F15                     	;# 
  1194  1F16                     	;# 
  1195  1F17                     	;# 
  1196  1F18                     	;# 
  1197  1F19                     	;# 
  1198  1F1A                     	;# 
  1199  1F1B                     	;# 
  1200  1F1C                     	;# 
  1201  1F1D                     	;# 
  1202  1F1E                     	;# 
  1203  1F1F                     	;# 
  1204  1F20                     	;# 
  1205  1F21                     	;# 
  1206  1F22                     	;# 
  1207  1F23                     	;# 
  1208  1F24                     	;# 
  1209  1F25                     	;# 
  1210  1F26                     	;# 
  1211  1F27                     	;# 
  1212  1F28                     	;# 
  1213  1F29                     	;# 
  1214  1F2A                     	;# 
  1215  1F2B                     	;# 
  1216  1F2C                     	;# 
  1217  1F2D                     	;# 
  1218  1F2E                     	;# 
  1219  1F2F                     	;# 
  1220  1F30                     	;# 
  1221  1F31                     	;# 
  1222  1F32                     	;# 
  1223  1F38                     	;# 
  1224  1F39                     	;# 
  1225  1F3A                     	;# 
  1226  1F3B                     	;# 
  1227  1F3C                     	;# 
  1228  1F3D                     	;# 
  1229  1F3E                     	;# 
  1230  1F3F                     	;# 
  1231  1F43                     	;# 
  1232  1F44                     	;# 
  1233  1F45                     	;# 
  1234  1F46                     	;# 
  1235  1F47                     	;# 
  1236  1F48                     	;# 
  1237  1F49                     	;# 
  1238  1F4A                     	;# 
  1239  1F4E                     	;# 
  1240  1F4F                     	;# 
  1241  1F50                     	;# 
  1242  1F51                     	;# 
  1243  1F52                     	;# 
  1244  1F53                     	;# 
  1245  1F54                     	;# 
  1246  1F55                     	;# 
  1247  1F59                     	;# 
  1248  1F5A                     	;# 
  1249  1F5B                     	;# 
  1250  1F5C                     	;# 
  1251  1F5D                     	;# 
  1252  1F64                     	;# 
  1253  1F65                     	;# 
  1254  1F66                     	;# 
  1255  1F67                     	;# 
  1256  1F68                     	;# 
  1257  1F69                     	;# 
  1258  1F6A                     	;# 
  1259  1F6B                     	;# 
  1260  1FE4                     	;# 
  1261  1FE5                     	;# 
  1262  1FE6                     	;# 
  1263  1FE7                     	;# 
  1264  1FE8                     	;# 
  1265  1FE8                     	;# 
  1266  1FE9                     	;# 
  1267  1FEA                     	;# 
  1268  1FEB                     	;# 
  1269  1FED                     	;# 
  1270  1FEE                     	;# 
  1271  1FEF                     	;# 
  1272  0000                     	;# 
  1273  0001                     	;# 
  1274  0002                     	;# 
  1275  0003                     	;# 
  1276  0004                     	;# 
  1277  0005                     	;# 
  1278  0006                     	;# 
  1279  0007                     	;# 
  1280  0008                     	;# 
  1281  0009                     	;# 
  1282  000A                     	;# 
  1283  000B                     	;# 
  1284  000C                     	;# 
  1285  000D                     	;# 
  1286  000E                     	;# 
  1287  000F                     	;# 
  1288  0010                     	;# 
  1289  0011                     	;# 
  1290  0012                     	;# 
  1291  0013                     	;# 
  1292  0014                     	;# 
  1293  0015                     	;# 
  1294  0016                     	;# 
  1295  0017                     	;# 
  1296  0018                     	;# 
  1297  0019                     	;# 
  1298  001A                     	;# 
  1299  001B                     	;# 
  1300  001C                     	;# 
  1301  001D                     	;# 
  1302  009B                     	;# 
  1303  009B                     	;# 
  1304  009C                     	;# 
  1305  009D                     	;# 
  1306  009E                     	;# 
  1307  009F                     	;# 
  1308  0119                     	;# 
  1309  0119                     	;# 
  1310  0119                     	;# 
  1311  011A                     	;# 
  1312  011A                     	;# 
  1313  011A                     	;# 
  1314  011B                     	;# 
  1315  011B                     	;# 
  1316  011B                     	;# 
  1317  011B                     	;# 
  1318  011B                     	;# 
  1319  011C                     	;# 
  1320  011C                     	;# 
  1321  011C                     	;# 
  1322  011D                     	;# 
  1323  011D                     	;# 
  1324  011D                     	;# 
  1325  011E                     	;# 
  1326  011E                     	;# 
  1327  011E                     	;# 
  1328  011F                     	;# 
  1329  011F                     	;# 
  1330  011F                     	;# 
  1331  011F                     	;# 
  1332  011F                     	;# 
  1333  018C                     	;# 
  1334  018D                     	;# 
  1335  018E                     	;# 
  1336  018F                     	;# 
  1337  0190                     	;# 
  1338  0191                     	;# 
  1339  0192                     	;# 
  1340  0196                     	;# 
  1341  0197                     	;# 
  1342  0198                     	;# 
  1343  0199                     	;# 
  1344  019A                     	;# 
  1345  019B                     	;# 
  1346  019C                     	;# 
  1347  020C                     	;# 
  1348  020C                     	;# 
  1349  020D                     	;# 
  1350  020E                     	;# 
  1351  020F                     	;# 
  1352  020F                     	;# 
  1353  0210                     	;# 
  1354  0210                     	;# 
  1355  0211                     	;# 
  1356  0211                     	;# 
  1357  028C                     	;# 
  1358  028C                     	;# 
  1359  028D                     	;# 
  1360  028D                     	;# 
  1361  028E                     	;# 
  1362  028F                     	;# 
  1363  0290                     	;# 
  1364  0291                     	;# 
  1365  030C                     	;# 
  1366  030C                     	;# 
  1367  030D                     	;# 
  1368  030E                     	;# 
  1369  030F                     	;# 
  1370  0310                     	;# 
  1371  0310                     	;# 
  1372  0311                     	;# 
  1373  0312                     	;# 
  1374  0313                     	;# 
  1375  0314                     	;# 
  1376  0315                     	;# 
  1377  0316                     	;# 
  1378  0318                     	;# 
  1379  0319                     	;# 
  1380  031A                     	;# 
  1381  031C                     	;# 
  1382  031D                     	;# 
  1383  031E                     	;# 
  1384  038C                     	;# 
  1385  038D                     	;# 
  1386  038E                     	;# 
  1387  058C                     	;# 
  1388  058C                     	;# 
  1389  058D                     	;# 
  1390  058E                     	;# 
  1391  058F                     	;# 
  1392  058F                     	;# 
  1393  0590                     	;# 
  1394  0591                     	;# 
  1395  0592                     	;# 
  1396  0593                     	;# 
  1397  059C                     	;# 
  1398  059C                     	;# 
  1399  059D                     	;# 
  1400  059D                     	;# 
  1401  059E                     	;# 
  1402  059F                     	;# 
  1403  060C                     	;# 
  1404  060D                     	;# 
  1405  060E                     	;# 
  1406  060F                     	;# 
  1407  0610                     	;# 
  1408  0611                     	;# 
  1409  0612                     	;# 
  1410  0613                     	;# 
  1411  0614                     	;# 
  1412  070C                     	;# 
  1413  070D                     	;# 
  1414  070E                     	;# 
  1415  070F                     	;# 
  1416  0710                     	;# 
  1417  0711                     	;# 
  1418  0712                     	;# 
  1419  0713                     	;# 
  1420  0716                     	;# 
  1421  0717                     	;# 
  1422  0718                     	;# 
  1423  0719                     	;# 
  1424  071A                     	;# 
  1425  071B                     	;# 
  1426  071C                     	;# 
  1427  071D                     	;# 
  1428  0796                     	;# 
  1429  0797                     	;# 
  1430  0798                     	;# 
  1431  0799                     	;# 
  1432  079A                     	;# 
  1433  079B                     	;# 
  1434  080C                     	;# 
  1435  080D                     	;# 
  1436  080E                     	;# 
  1437  080F                     	;# 
  1438  0810                     	;# 
  1439  0811                     	;# 
  1440  0812                     	;# 
  1441  0813                     	;# 
  1442  0814                     	;# 
  1443  081A                     	;# 
  1444  081A                     	;# 
  1445  081B                     	;# 
  1446  081C                     	;# 
  1447  081C                     	;# 
  1448  081D                     	;# 
  1449  081E                     	;# 
  1450  081F                     	;# 
  1451  088C                     	;# 
  1452  088D                     	;# 
  1453  088E                     	;# 
  1454  088F                     	;# 
  1455  0890                     	;# 
  1456  0891                     	;# 
  1457  0892                     	;# 
  1458  0893                     	;# 
  1459  0895                     	;# 
  1460  0896                     	;# 
  1461  090C                     	;# 
  1462  090E                     	;# 
  1463  090F                     	;# 
  1464  091F                     	;# 
  1465  098F                     	;# 
  1466  098F                     	;# 
  1467  0990                     	;# 
  1468  0991                     	;# 
  1469  0992                     	;# 
  1470  0993                     	;# 
  1471  0994                     	;# 
  1472  0995                     	;# 
  1473  0996                     	;# 
  1474  0997                     	;# 
  1475  0A19                     	;# 
  1476  0A19                     	;# 
  1477  0A1A                     	;# 
  1478  0A1A                     	;# 
  1479  0A1B                     	;# 
  1480  0A1B                     	;# 
  1481  0A1B                     	;# 
  1482  0A1C                     	;# 
  1483  0A1C                     	;# 
  1484  0A1D                     	;# 
  1485  0A1D                     	;# 
  1486  0A1E                     	;# 
  1487  0A1E                     	;# 
  1488  0A1F                     	;# 
  1489  0A1F                     	;# 
  1490  0A1F                     	;# 
  1491  1E0F                     	;# 
  1492  1E10                     	;# 
  1493  1E11                     	;# 
  1494  1E12                     	;# 
  1495  1E13                     	;# 
  1496  1E14                     	;# 
  1497  1E15                     	;# 
  1498  1E16                     	;# 
  1499  1E17                     	;# 
  1500  1E18                     	;# 
  1501  1E19                     	;# 
  1502  1E1A                     	;# 
  1503  1E1B                     	;# 
  1504  1E1C                     	;# 
  1505  1E1D                     	;# 
  1506  1E1E                     	;# 
  1507  1E1F                     	;# 
  1508  1E20                     	;# 
  1509  1E21                     	;# 
  1510  1E22                     	;# 
  1511  1E23                     	;# 
  1512  1E24                     	;# 
  1513  1E25                     	;# 
  1514  1E26                     	;# 
  1515  1E27                     	;# 
  1516  1E28                     	;# 
  1517  1E29                     	;# 
  1518  1E2A                     	;# 
  1519  1E2B                     	;# 
  1520  1E2C                     	;# 
  1521  1E2D                     	;# 
  1522  1E2E                     	;# 
  1523  1E2F                     	;# 
  1524  1E30                     	;# 
  1525  1E31                     	;# 
  1526  1E32                     	;# 
  1527  1E33                     	;# 
  1528  1E34                     	;# 
  1529  1E35                     	;# 
  1530  1E36                     	;# 
  1531  1E37                     	;# 
  1532  1E38                     	;# 
  1533  1E39                     	;# 
  1534  1E3A                     	;# 
  1535  1E3B                     	;# 
  1536  1E3C                     	;# 
  1537  1E3D                     	;# 
  1538  1E3E                     	;# 
  1539  1E3F                     	;# 
  1540  1E50                     	;# 
  1541  1E51                     	;# 
  1542  1E52                     	;# 
  1543  1E53                     	;# 
  1544  1E54                     	;# 
  1545  1E8F                     	;# 
  1546  1E90                     	;# 
  1547  1E91                     	;# 
  1548  1E92                     	;# 
  1549  1E93                     	;# 
  1550  1E9C                     	;# 
  1551  1EA1                     	;# 
  1552  1EA2                     	;# 
  1553  1EB1                     	;# 
  1554  1EBB                     	;# 
  1555  1EBC                     	;# 
  1556  1EBD                     	;# 
  1557  1EBE                     	;# 
  1558  1EC3                     	;# 
  1559  1EC5                     	;# 
  1560  1EC6                     	;# 
  1561  1EC7                     	;# 
  1562  1EC8                     	;# 
  1563  1EC9                     	;# 
  1564  1ECA                     	;# 
  1565  1ECB                     	;# 
  1566  1ECC                     	;# 
  1567  1ECD                     	;# 
  1568  1ECE                     	;# 
  1569  1F10                     	;# 
  1570  1F11                     	;# 
  1571  1F12                     	;# 
  1572  1F13                     	;# 
  1573  1F14                     	;# 
  1574  1F15                     	;# 
  1575  1F16                     	;# 
  1576  1F17                     	;# 
  1577  1F18                     	;# 
  1578  1F19                     	;# 
  1579  1F1A                     	;# 
  1580  1F1B                     	;# 
  1581  1F1C                     	;# 
  1582  1F1D                     	;# 
  1583  1F1E                     	;# 
  1584  1F1F                     	;# 
  1585  1F20                     	;# 
  1586  1F21                     	;# 
  1587  1F22                     	;# 
  1588  1F23                     	;# 
  1589  1F24                     	;# 
  1590  1F25                     	;# 
  1591  1F26                     	;# 
  1592  1F27                     	;# 
  1593  1F28                     	;# 
  1594  1F29                     	;# 
  1595  1F2A                     	;# 
  1596  1F2B                     	;# 
  1597  1F2C                     	;# 
  1598  1F2D                     	;# 
  1599  1F2E                     	;# 
  1600  1F2F                     	;# 
  1601  1F30                     	;# 
  1602  1F31                     	;# 
  1603  1F32                     	;# 
  1604  1F38                     	;# 
  1605  1F39                     	;# 
  1606  1F3A                     	;# 
  1607  1F3B                     	;# 
  1608  1F3C                     	;# 
  1609  1F3D                     	;# 
  1610  1F3E                     	;# 
  1611  1F3F                     	;# 
  1612  1F43                     	;# 
  1613  1F44                     	;# 
  1614  1F45                     	;# 
  1615  1F46                     	;# 
  1616  1F47                     	;# 
  1617  1F48                     	;# 
  1618  1F49                     	;# 
  1619  1F4A                     	;# 
  1620  1F4E                     	;# 
  1621  1F4F                     	;# 
  1622  1F50                     	;# 
  1623  1F51                     	;# 
  1624  1F52                     	;# 
  1625  1F53                     	;# 
  1626  1F54                     	;# 
  1627  1F55                     	;# 
  1628  1F59                     	;# 
  1629  1F5A                     	;# 
  1630  1F5B                     	;# 
  1631  1F5C                     	;# 
  1632  1F5D                     	;# 
  1633  1F64                     	;# 
  1634  1F65                     	;# 
  1635  1F66                     	;# 
  1636  1F67                     	;# 
  1637  1F68                     	;# 
  1638  1F69                     	;# 
  1639  1F6A                     	;# 
  1640  1F6B                     	;# 
  1641  1FE4                     	;# 
  1642  1FE5                     	;# 
  1643  1FE6                     	;# 
  1644  1FE7                     	;# 
  1645  1FE8                     	;# 
  1646  1FE8                     	;# 
  1647  1FE9                     	;# 
  1648  1FEA                     	;# 
  1649  1FEB                     	;# 
  1650  1FED                     	;# 
  1651  1FEE                     	;# 
  1652  1FEF                     	;# 
  1653  0000                     	;# 
  1654  0001                     	;# 
  1655  0002                     	;# 
  1656  0003                     	;# 
  1657  0004                     	;# 
  1658  0005                     	;# 
  1659  0006                     	;# 
  1660  0007                     	;# 
  1661  0008                     	;# 
  1662  0009                     	;# 
  1663  000A                     	;# 
  1664  000B                     	;# 
  1665  000C                     	;# 
  1666  000D                     	;# 
  1667  000E                     	;# 
  1668  000F                     	;# 
  1669  0010                     	;# 
  1670  0011                     	;# 
  1671  0012                     	;# 
  1672  0013                     	;# 
  1673  0014                     	;# 
  1674  0015                     	;# 
  1675  0016                     	;# 
  1676  0017                     	;# 
  1677  0018                     	;# 
  1678  0019                     	;# 
  1679  001A                     	;# 
  1680  001B                     	;# 
  1681  001C                     	;# 
  1682  001D                     	;# 
  1683  009B                     	;# 
  1684  009B                     	;# 
  1685  009C                     	;# 
  1686  009D                     	;# 
  1687  009E                     	;# 
  1688  009F                     	;# 
  1689  0119                     	;# 
  1690  0119                     	;# 
  1691  0119                     	;# 
  1692  011A                     	;# 
  1693  011A                     	;# 
  1694  011A                     	;# 
  1695  011B                     	;# 
  1696  011B                     	;# 
  1697  011B                     	;# 
  1698  011B                     	;# 
  1699  011B                     	;# 
  1700  011C                     	;# 
  1701  011C                     	;# 
  1702  011C                     	;# 
  1703  011D                     	;# 
  1704  011D                     	;# 
  1705  011D                     	;# 
  1706  011E                     	;# 
  1707  011E                     	;# 
  1708  011E                     	;# 
  1709  011F                     	;# 
  1710  011F                     	;# 
  1711  011F                     	;# 
  1712  011F                     	;# 
  1713  011F                     	;# 
  1714  018C                     	;# 
  1715  018D                     	;# 
  1716  018E                     	;# 
  1717  018F                     	;# 
  1718  0190                     	;# 
  1719  0191                     	;# 
  1720  0192                     	;# 
  1721  0196                     	;# 
  1722  0197                     	;# 
  1723  0198                     	;# 
  1724  0199                     	;# 
  1725  019A                     	;# 
  1726  019B                     	;# 
  1727  019C                     	;# 
  1728  020C                     	;# 
  1729  020C                     	;# 
  1730  020D                     	;# 
  1731  020E                     	;# 
  1732  020F                     	;# 
  1733  020F                     	;# 
  1734  0210                     	;# 
  1735  0210                     	;# 
  1736  0211                     	;# 
  1737  0211                     	;# 
  1738  028C                     	;# 
  1739  028C                     	;# 
  1740  028D                     	;# 
  1741  028D                     	;# 
  1742  028E                     	;# 
  1743  028F                     	;# 
  1744  0290                     	;# 
  1745  0291                     	;# 
  1746  030C                     	;# 
  1747  030C                     	;# 
  1748  030D                     	;# 
  1749  030E                     	;# 
  1750  030F                     	;# 
  1751  0310                     	;# 
  1752  0310                     	;# 
  1753  0311                     	;# 
  1754  0312                     	;# 
  1755  0313                     	;# 
  1756  0314                     	;# 
  1757  0315                     	;# 
  1758  0316                     	;# 
  1759  0318                     	;# 
  1760  0319                     	;# 
  1761  031A                     	;# 
  1762  031C                     	;# 
  1763  031D                     	;# 
  1764  031E                     	;# 
  1765  038C                     	;# 
  1766  038D                     	;# 
  1767  038E                     	;# 
  1768  058C                     	;# 
  1769  058C                     	;# 
  1770  058D                     	;# 
  1771  058E                     	;# 
  1772  058F                     	;# 
  1773  058F                     	;# 
  1774  0590                     	;# 
  1775  0591                     	;# 
  1776  0592                     	;# 
  1777  0593                     	;# 
  1778  059C                     	;# 
  1779  059C                     	;# 
  1780  059D                     	;# 
  1781  059D                     	;# 
  1782  059E                     	;# 
  1783  059F                     	;# 
  1784  060C                     	;# 
  1785  060D                     	;# 
  1786  060E                     	;# 
  1787  060F                     	;# 
  1788  0610                     	;# 
  1789  0611                     	;# 
  1790  0612                     	;# 
  1791  0613                     	;# 
  1792  0614                     	;# 
  1793  070C                     	;# 
  1794  070D                     	;# 
  1795  070E                     	;# 
  1796  070F                     	;# 
  1797  0710                     	;# 
  1798  0711                     	;# 
  1799  0712                     	;# 
  1800  0713                     	;# 
  1801  0716                     	;# 
  1802  0717                     	;# 
  1803  0718                     	;# 
  1804  0719                     	;# 
  1805  071A                     	;# 
  1806  071B                     	;# 
  1807  071C                     	;# 
  1808  071D                     	;# 
  1809  0796                     	;# 
  1810  0797                     	;# 
  1811  0798                     	;# 
  1812  0799                     	;# 
  1813  079A                     	;# 
  1814  079B                     	;# 
  1815  080C                     	;# 
  1816  080D                     	;# 
  1817  080E                     	;# 
  1818  080F                     	;# 
  1819  0810                     	;# 
  1820  0811                     	;# 
  1821  0812                     	;# 
  1822  0813                     	;# 
  1823  0814                     	;# 
  1824  081A                     	;# 
  1825  081A                     	;# 
  1826  081B                     	;# 
  1827  081C                     	;# 
  1828  081C                     	;# 
  1829  081D                     	;# 
  1830  081E                     	;# 
  1831  081F                     	;# 
  1832  088C                     	;# 
  1833  088D                     	;# 
  1834  088E                     	;# 
  1835  088F                     	;# 
  1836  0890                     	;# 
  1837  0891                     	;# 
  1838  0892                     	;# 
  1839  0893                     	;# 
  1840  0895                     	;# 
  1841  0896                     	;# 
  1842  090C                     	;# 
  1843  090E                     	;# 
  1844  090F                     	;# 
  1845  091F                     	;# 
  1846  098F                     	;# 
  1847  098F                     	;# 
  1848  0990                     	;# 
  1849  0991                     	;# 
  1850  0992                     	;# 
  1851  0993                     	;# 
  1852  0994                     	;# 
  1853  0995                     	;# 
  1854  0996                     	;# 
  1855  0997                     	;# 
  1856  0A19                     	;# 
  1857  0A19                     	;# 
  1858  0A1A                     	;# 
  1859  0A1A                     	;# 
  1860  0A1B                     	;# 
  1861  0A1B                     	;# 
  1862  0A1B                     	;# 
  1863  0A1C                     	;# 
  1864  0A1C                     	;# 
  1865  0A1D                     	;# 
  1866  0A1D                     	;# 
  1867  0A1E                     	;# 
  1868  0A1E                     	;# 
  1869  0A1F                     	;# 
  1870  0A1F                     	;# 
  1871  0A1F                     	;# 
  1872  1E0F                     	;# 
  1873  1E10                     	;# 
  1874  1E11                     	;# 
  1875  1E12                     	;# 
  1876  1E13                     	;# 
  1877  1E14                     	;# 
  1878  1E15                     	;# 
  1879  1E16                     	;# 
  1880  1E17                     	;# 
  1881  1E18                     	;# 
  1882  1E19                     	;# 
  1883  1E1A                     	;# 
  1884  1E1B                     	;# 
  1885  1E1C                     	;# 
  1886  1E1D                     	;# 
  1887  1E1E                     	;# 
  1888  1E1F                     	;# 
  1889  1E20                     	;# 
  1890  1E21                     	;# 
  1891  1E22                     	;# 
  1892  1E23                     	;# 
  1893  1E24                     	;# 
  1894  1E25                     	;# 
  1895  1E26                     	;# 
  1896  1E27                     	;# 
  1897  1E28                     	;# 
  1898  1E29                     	;# 
  1899  1E2A                     	;# 
  1900  1E2B                     	;# 
  1901  1E2C                     	;# 
  1902  1E2D                     	;# 
  1903  1E2E                     	;# 
  1904  1E2F                     	;# 
  1905  1E30                     	;# 
  1906  1E31                     	;# 
  1907  1E32                     	;# 
  1908  1E33                     	;# 
  1909  1E34                     	;# 
  1910  1E35                     	;# 
  1911  1E36                     	;# 
  1912  1E37                     	;# 
  1913  1E38                     	;# 
  1914  1E39                     	;# 
  1915  1E3A                     	;# 
  1916  1E3B                     	;# 
  1917  1E3C                     	;# 
  1918  1E3D                     	;# 
  1919  1E3E                     	;# 
  1920  1E3F                     	;# 
  1921  1E50                     	;# 
  1922  1E51                     	;# 
  1923  1E52                     	;# 
  1924  1E53                     	;# 
  1925  1E54                     	;# 
  1926  1E8F                     	;# 
  1927  1E90                     	;# 
  1928  1E91                     	;# 
  1929  1E92                     	;# 
  1930  1E93                     	;# 
  1931  1E9C                     	;# 
  1932  1EA1                     	;# 
  1933  1EA2                     	;# 
  1934  1EB1                     	;# 
  1935  1EBB                     	;# 
  1936  1EBC                     	;# 
  1937  1EBD                     	;# 
  1938  1EBE                     	;# 
  1939  1EC3                     	;# 
  1940  1EC5                     	;# 
  1941  1EC6                     	;# 
  1942  1EC7                     	;# 
  1943  1EC8                     	;# 
  1944  1EC9                     	;# 
  1945  1ECA                     	;# 
  1946  1ECB                     	;# 
  1947  1ECC                     	;# 
  1948  1ECD                     	;# 
  1949  1ECE                     	;# 
  1950  1F10                     	;# 
  1951  1F11                     	;# 
  1952  1F12                     	;# 
  1953  1F13                     	;# 
  1954  1F14                     	;# 
  1955  1F15                     	;# 
  1956  1F16                     	;# 
  1957  1F17                     	;# 
  1958  1F18                     	;# 
  1959  1F19                     	;# 
  1960  1F1A                     	;# 
  1961  1F1B                     	;# 
  1962  1F1C                     	;# 
  1963  1F1D                     	;# 
  1964  1F1E                     	;# 
  1965  1F1F                     	;# 
  1966  1F20                     	;# 
  1967  1F21                     	;# 
  1968  1F22                     	;# 
  1969  1F23                     	;# 
  1970  1F24                     	;# 
  1971  1F25                     	;# 
  1972  1F26                     	;# 
  1973  1F27                     	;# 
  1974  1F28                     	;# 
  1975  1F29                     	;# 
  1976  1F2A                     	;# 
  1977  1F2B                     	;# 
  1978  1F2C                     	;# 
  1979  1F2D                     	;# 
  1980  1F2E                     	;# 
  1981  1F2F                     	;# 
  1982  1F30                     	;# 
  1983  1F31                     	;# 
  1984  1F32                     	;# 
  1985  1F38                     	;# 
  1986  1F39                     	;# 
  1987  1F3A                     	;# 
  1988  1F3B                     	;# 
  1989  1F3C                     	;# 
  1990  1F3D                     	;# 
  1991  1F3E                     	;# 
  1992  1F3F                     	;# 
  1993  1F43                     	;# 
  1994  1F44                     	;# 
  1995  1F45                     	;# 
  1996  1F46                     	;# 
  1997  1F47                     	;# 
  1998  1F48                     	;# 
  1999  1F49                     	;# 
  2000  1F4A                     	;# 
  2001  1F4E                     	;# 
  2002  1F4F                     	;# 
  2003  1F50                     	;# 
  2004  1F51                     	;# 
  2005  1F52                     	;# 
  2006  1F53                     	;# 
  2007  1F54                     	;# 
  2008  1F55                     	;# 
  2009  1F59                     	;# 
  2010  1F5A                     	;# 
  2011  1F5B                     	;# 
  2012  1F5C                     	;# 
  2013  1F5D                     	;# 
  2014  1F64                     	;# 
  2015  1F65                     	;# 
  2016  1F66                     	;# 
  2017  1F67                     	;# 
  2018  1F68                     	;# 
  2019  1F69                     	;# 
  2020  1F6A                     	;# 
  2021  1F6B                     	;# 
  2022  1FE4                     	;# 
  2023  1FE5                     	;# 
  2024  1FE6                     	;# 
  2025  1FE7                     	;# 
  2026  1FE8                     	;# 
  2027  1FE8                     	;# 
  2028  1FE9                     	;# 
  2029  1FEA                     	;# 
  2030  1FEB                     	;# 
  2031  1FED                     	;# 
  2032  1FEE                     	;# 
  2033  1FEF                     	;# 
  2034  0000                     	;# 
  2035  0001                     	;# 
  2036  0002                     	;# 
  2037  0003                     	;# 
  2038  0004                     	;# 
  2039  0005                     	;# 
  2040  0006                     	;# 
  2041  0007                     	;# 
  2042  0008                     	;# 
  2043  0009                     	;# 
  2044  000A                     	;# 
  2045  000B                     	;# 
  2046  000C                     	;# 
  2047  000D                     	;# 
  2048  000E                     	;# 
  2049  000F                     	;# 
  2050  0010                     	;# 
  2051  0011                     	;# 
  2052  0012                     	;# 
  2053  0013                     	;# 
  2054  0014                     	;# 
  2055  0015                     	;# 
  2056  0016                     	;# 
  2057  0017                     	;# 
  2058  0018                     	;# 
  2059  0019                     	;# 
  2060  001A                     	;# 
  2061  001B                     	;# 
  2062  001C                     	;# 
  2063  001D                     	;# 
  2064  009B                     	;# 
  2065  009B                     	;# 
  2066  009C                     	;# 
  2067  009D                     	;# 
  2068  009E                     	;# 
  2069  009F                     	;# 
  2070  0119                     	;# 
  2071  0119                     	;# 
  2072  0119                     	;# 
  2073  011A                     	;# 
  2074  011A                     	;# 
  2075  011A                     	;# 
  2076  011B                     	;# 
  2077  011B                     	;# 
  2078  011B                     	;# 
  2079  011B                     	;# 
  2080  011B                     	;# 
  2081  011C                     	;# 
  2082  011C                     	;# 
  2083  011C                     	;# 
  2084  011D                     	;# 
  2085  011D                     	;# 
  2086  011D                     	;# 
  2087  011E                     	;# 
  2088  011E                     	;# 
  2089  011E                     	;# 
  2090  011F                     	;# 
  2091  011F                     	;# 
  2092  011F                     	;# 
  2093  011F                     	;# 
  2094  011F                     	;# 
  2095  018C                     	;# 
  2096  018D                     	;# 
  2097  018E                     	;# 
  2098  018F                     	;# 
  2099  0190                     	;# 
  2100  0191                     	;# 
  2101  0192                     	;# 
  2102  0196                     	;# 
  2103  0197                     	;# 
  2104  0198                     	;# 
  2105  0199                     	;# 
  2106  019A                     	;# 
  2107  019B                     	;# 
  2108  019C                     	;# 
  2109  020C                     	;# 
  2110  020C                     	;# 
  2111  020D                     	;# 
  2112  020E                     	;# 
  2113  020F                     	;# 
  2114  020F                     	;# 
  2115  0210                     	;# 
  2116  0210                     	;# 
  2117  0211                     	;# 
  2118  0211                     	;# 
  2119  028C                     	;# 
  2120  028C                     	;# 
  2121  028D                     	;# 
  2122  028D                     	;# 
  2123  028E                     	;# 
  2124  028F                     	;# 
  2125  0290                     	;# 
  2126  0291                     	;# 
  2127  030C                     	;# 
  2128  030C                     	;# 
  2129  030D                     	;# 
  2130  030E                     	;# 
  2131  030F                     	;# 
  2132  0310                     	;# 
  2133  0310                     	;# 
  2134  0311                     	;# 
  2135  0312                     	;# 
  2136  0313                     	;# 
  2137  0314                     	;# 
  2138  0315                     	;# 
  2139  0316                     	;# 
  2140  0318                     	;# 
  2141  0319                     	;# 
  2142  031A                     	;# 
  2143  031C                     	;# 
  2144  031D                     	;# 
  2145  031E                     	;# 
  2146  038C                     	;# 
  2147  038D                     	;# 
  2148  038E                     	;# 
  2149  058C                     	;# 
  2150  058C                     	;# 
  2151  058D                     	;# 
  2152  058E                     	;# 
  2153  058F                     	;# 
  2154  058F                     	;# 
  2155  0590                     	;# 
  2156  0591                     	;# 
  2157  0592                     	;# 
  2158  0593                     	;# 
  2159  059C                     	;# 
  2160  059C                     	;# 
  2161  059D                     	;# 
  2162  059D                     	;# 
  2163  059E                     	;# 
  2164  059F                     	;# 
  2165  060C                     	;# 
  2166  060D                     	;# 
  2167  060E                     	;# 
  2168  060F                     	;# 
  2169  0610                     	;# 
  2170  0611                     	;# 
  2171  0612                     	;# 
  2172  0613                     	;# 
  2173  0614                     	;# 
  2174  070C                     	;# 
  2175  070D                     	;# 
  2176  070E                     	;# 
  2177  070F                     	;# 
  2178  0710                     	;# 
  2179  0711                     	;# 
  2180  0712                     	;# 
  2181  0713                     	;# 
  2182  0716                     	;# 
  2183  0717                     	;# 
  2184  0718                     	;# 
  2185  0719                     	;# 
  2186  071A                     	;# 
  2187  071B                     	;# 
  2188  071C                     	;# 
  2189  071D                     	;# 
  2190  0796                     	;# 
  2191  0797                     	;# 
  2192  0798                     	;# 
  2193  0799                     	;# 
  2194  079A                     	;# 
  2195  079B                     	;# 
  2196  080C                     	;# 
  2197  080D                     	;# 
  2198  080E                     	;# 
  2199  080F                     	;# 
  2200  0810                     	;# 
  2201  0811                     	;# 
  2202  0812                     	;# 
  2203  0813                     	;# 
  2204  0814                     	;# 
  2205  081A                     	;# 
  2206  081A                     	;# 
  2207  081B                     	;# 
  2208  081C                     	;# 
  2209  081C                     	;# 
  2210  081D                     	;# 
  2211  081E                     	;# 
  2212  081F                     	;# 
  2213  088C                     	;# 
  2214  088D                     	;# 
  2215  088E                     	;# 
  2216  088F                     	;# 
  2217  0890                     	;# 
  2218  0891                     	;# 
  2219  0892                     	;# 
  2220  0893                     	;# 
  2221  0895                     	;# 
  2222  0896                     	;# 
  2223  090C                     	;# 
  2224  090E                     	;# 
  2225  090F                     	;# 
  2226  091F                     	;# 
  2227  098F                     	;# 
  2228  098F                     	;# 
  2229  0990                     	;# 
  2230  0991                     	;# 
  2231  0992                     	;# 
  2232  0993                     	;# 
  2233  0994                     	;# 
  2234  0995                     	;# 
  2235  0996                     	;# 
  2236  0997                     	;# 
  2237  0A19                     	;# 
  2238  0A19                     	;# 
  2239  0A1A                     	;# 
  2240  0A1A                     	;# 
  2241  0A1B                     	;# 
  2242  0A1B                     	;# 
  2243  0A1B                     	;# 
  2244  0A1C                     	;# 
  2245  0A1C                     	;# 
  2246  0A1D                     	;# 
  2247  0A1D                     	;# 
  2248  0A1E                     	;# 
  2249  0A1E                     	;# 
  2250  0A1F                     	;# 
  2251  0A1F                     	;# 
  2252  0A1F                     	;# 
  2253  1E0F                     	;# 
  2254  1E10                     	;# 
  2255  1E11                     	;# 
  2256  1E12                     	;# 
  2257  1E13                     	;# 
  2258  1E14                     	;# 
  2259  1E15                     	;# 
  2260  1E16                     	;# 
  2261  1E17                     	;# 
  2262  1E18                     	;# 
  2263  1E19                     	;# 
  2264  1E1A                     	;# 
  2265  1E1B                     	;# 
  2266  1E1C                     	;# 
  2267  1E1D                     	;# 
  2268  1E1E                     	;# 
  2269  1E1F                     	;# 
  2270  1E20                     	;# 
  2271  1E21                     	;# 
  2272  1E22                     	;# 
  2273  1E23                     	;# 
  2274  1E24                     	;# 
  2275  1E25                     	;# 
  2276  1E26                     	;# 
  2277  1E27                     	;# 
  2278  1E28                     	;# 
  2279  1E29                     	;# 
  2280  1E2A                     	;# 
  2281  1E2B                     	;# 
  2282  1E2C                     	;# 
  2283  1E2D                     	;# 
  2284  1E2E                     	;# 
  2285  1E2F                     	;# 
  2286  1E30                     	;# 
  2287  1E31                     	;# 
  2288  1E32                     	;# 
  2289  1E33                     	;# 
  2290  1E34                     	;# 
  2291  1E35                     	;# 
  2292  1E36                     	;# 
  2293  1E37                     	;# 
  2294  1E38                     	;# 
  2295  1E39                     	;# 
  2296  1E3A                     	;# 
  2297  1E3B                     	;# 
  2298  1E3C                     	;# 
  2299  1E3D                     	;# 
  2300  1E3E                     	;# 
  2301  1E3F                     	;# 
  2302  1E50                     	;# 
  2303  1E51                     	;# 
  2304  1E52                     	;# 
  2305  1E53                     	;# 
  2306  1E54                     	;# 
  2307  1E8F                     	;# 
  2308  1E90                     	;# 
  2309  1E91                     	;# 
  2310  1E92                     	;# 
  2311  1E93                     	;# 
  2312  1E9C                     	;# 
  2313  1EA1                     	;# 
  2314  1EA2                     	;# 
  2315  1EB1                     	;# 
  2316  1EBB                     	;# 
  2317  1EBC                     	;# 
  2318  1EBD                     	;# 
  2319  1EBE                     	;# 
  2320  1EC3                     	;# 
  2321  1EC5                     	;# 
  2322  1EC6                     	;# 
  2323  1EC7                     	;# 
  2324  1EC8                     	;# 
  2325  1EC9                     	;# 
  2326  1ECA                     	;# 
  2327  1ECB                     	;# 
  2328  1ECC                     	;# 
  2329  1ECD                     	;# 
  2330  1ECE                     	;# 
  2331  1F10                     	;# 
  2332  1F11                     	;# 
  2333  1F12                     	;# 
  2334  1F13                     	;# 
  2335  1F14                     	;# 
  2336  1F15                     	;# 
  2337  1F16                     	;# 
  2338  1F17                     	;# 
  2339  1F18                     	;# 
  2340  1F19                     	;# 
  2341  1F1A                     	;# 
  2342  1F1B                     	;# 
  2343  1F1C                     	;# 
  2344  1F1D                     	;# 
  2345  1F1E                     	;# 
  2346  1F1F                     	;# 
  2347  1F20                     	;# 
  2348  1F21                     	;# 
  2349  1F22                     	;# 
  2350  1F23                     	;# 
  2351  1F24                     	;# 
  2352  1F25                     	;# 
  2353  1F26                     	;# 
  2354  1F27                     	;# 
  2355  1F28                     	;# 
  2356  1F29                     	;# 
  2357  1F2A                     	;# 
  2358  1F2B                     	;# 
  2359  1F2C                     	;# 
  2360  1F2D                     	;# 
  2361  1F2E                     	;# 
  2362  1F2F                     	;# 
  2363  1F30                     	;# 
  2364  1F31                     	;# 
  2365  1F32                     	;# 
  2366  1F38                     	;# 
  2367  1F39                     	;# 
  2368  1F3A                     	;# 
  2369  1F3B                     	;# 
  2370  1F3C                     	;# 
  2371  1F3D                     	;# 
  2372  1F3E                     	;# 
  2373  1F3F                     	;# 
  2374  1F43                     	;# 
  2375  1F44                     	;# 
  2376  1F45                     	;# 
  2377  1F46                     	;# 
  2378  1F47                     	;# 
  2379  1F48                     	;# 
  2380  1F49                     	;# 
  2381  1F4A                     	;# 
  2382  1F4E                     	;# 
  2383  1F4F                     	;# 
  2384  1F50                     	;# 
  2385  1F51                     	;# 
  2386  1F52                     	;# 
  2387  1F53                     	;# 
  2388  1F54                     	;# 
  2389  1F55                     	;# 
  2390  1F59                     	;# 
  2391  1F5A                     	;# 
  2392  1F5B                     	;# 
  2393  1F5C                     	;# 
  2394  1F5D                     	;# 
  2395  1F64                     	;# 
  2396  1F65                     	;# 
  2397  1F66                     	;# 
  2398  1F67                     	;# 
  2399  1F68                     	;# 
  2400  1F69                     	;# 
  2401  1F6A                     	;# 
  2402  1F6B                     	;# 
  2403  1FE4                     	;# 
  2404  1FE5                     	;# 
  2405  1FE6                     	;# 
  2406  1FE7                     	;# 
  2407  1FE8                     	;# 
  2408  1FE8                     	;# 
  2409  1FE9                     	;# 
  2410  1FEA                     	;# 
  2411  1FEB                     	;# 
  2412  1FED                     	;# 
  2413  1FEE                     	;# 
  2414  1FEF                     	;# 
  2415  0000                     	;# 
  2416  0001                     	;# 
  2417  0002                     	;# 
  2418  0003                     	;# 
  2419  0004                     	;# 
  2420  0005                     	;# 
  2421  0006                     	;# 
  2422  0007                     	;# 
  2423  0008                     	;# 
  2424  0009                     	;# 
  2425  000A                     	;# 
  2426  000B                     	;# 
  2427  000C                     	;# 
  2428  000D                     	;# 
  2429  000E                     	;# 
  2430  000F                     	;# 
  2431  0010                     	;# 
  2432  0011                     	;# 
  2433  0012                     	;# 
  2434  0013                     	;# 
  2435  0014                     	;# 
  2436  0015                     	;# 
  2437  0016                     	;# 
  2438  0017                     	;# 
  2439  0018                     	;# 
  2440  0019                     	;# 
  2441  001A                     	;# 
  2442  001B                     	;# 
  2443  001C                     	;# 
  2444  001D                     	;# 
  2445  009B                     	;# 
  2446  009B                     	;# 
  2447  009C                     	;# 
  2448  009D                     	;# 
  2449  009E                     	;# 
  2450  009F                     	;# 
  2451  0119                     	;# 
  2452  0119                     	;# 
  2453  0119                     	;# 
  2454  011A                     	;# 
  2455  011A                     	;# 
  2456  011A                     	;# 
  2457  011B                     	;# 
  2458  011B                     	;# 
  2459  011B                     	;# 
  2460  011B                     	;# 
  2461  011B                     	;# 
  2462  011C                     	;# 
  2463  011C                     	;# 
  2464  011C                     	;# 
  2465  011D                     	;# 
  2466  011D                     	;# 
  2467  011D                     	;# 
  2468  011E                     	;# 
  2469  011E                     	;# 
  2470  011E                     	;# 
  2471  011F                     	;# 
  2472  011F                     	;# 
  2473  011F                     	;# 
  2474  011F                     	;# 
  2475  011F                     	;# 
  2476  018C                     	;# 
  2477  018D                     	;# 
  2478  018E                     	;# 
  2479  018F                     	;# 
  2480  0190                     	;# 
  2481  0191                     	;# 
  2482  0192                     	;# 
  2483  0196                     	;# 
  2484  0197                     	;# 
  2485  0198                     	;# 
  2486  0199                     	;# 
  2487  019A                     	;# 
  2488  019B                     	;# 
  2489  019C                     	;# 
  2490  020C                     	;# 
  2491  020C                     	;# 
  2492  020D                     	;# 
  2493  020E                     	;# 
  2494  020F                     	;# 
  2495  020F                     	;# 
  2496  0210                     	;# 
  2497  0210                     	;# 
  2498  0211                     	;# 
  2499  0211                     	;# 
  2500  028C                     	;# 
  2501  028C                     	;# 
  2502  028D                     	;# 
  2503  028D                     	;# 
  2504  028E                     	;# 
  2505  028F                     	;# 
  2506  0290                     	;# 
  2507  0291                     	;# 
  2508  030C                     	;# 
  2509  030C                     	;# 
  2510  030D                     	;# 
  2511  030E                     	;# 
  2512  030F                     	;# 
  2513  0310                     	;# 
  2514  0310                     	;# 
  2515  0311                     	;# 
  2516  0312                     	;# 
  2517  0313                     	;# 
  2518  0314                     	;# 
  2519  0315                     	;# 
  2520  0316                     	;# 
  2521  0318                     	;# 
  2522  0319                     	;# 
  2523  031A                     	;# 
  2524  031C                     	;# 
  2525  031D                     	;# 
  2526  031E                     	;# 
  2527  038C                     	;# 
  2528  038D                     	;# 
  2529  038E                     	;# 
  2530  058C                     	;# 
  2531  058C                     	;# 
  2532  058D                     	;# 
  2533  058E                     	;# 
  2534  058F                     	;# 
  2535  058F                     	;# 
  2536  0590                     	;# 
  2537  0591                     	;# 
  2538  0592                     	;# 
  2539  0593                     	;# 
  2540  059C                     	;# 
  2541  059C                     	;# 
  2542  059D                     	;# 
  2543  059D                     	;# 
  2544  059E                     	;# 
  2545  059F                     	;# 
  2546  060C                     	;# 
  2547  060D                     	;# 
  2548  060E                     	;# 
  2549  060F                     	;# 
  2550  0610                     	;# 
  2551  0611                     	;# 
  2552  0612                     	;# 
  2553  0613                     	;# 
  2554  0614                     	;# 
  2555  070C                     	;# 
  2556  070D                     	;# 
  2557  070E                     	;# 
  2558  070F                     	;# 
  2559  0710                     	;# 
  2560  0711                     	;# 
  2561  0712                     	;# 
  2562  0713                     	;# 
  2563  0716                     	;# 
  2564  0717                     	;# 
  2565  0718                     	;# 
  2566  0719                     	;# 
  2567  071A                     	;# 
  2568  071B                     	;# 
  2569  071C                     	;# 
  2570  071D                     	;# 
  2571  0796                     	;# 
  2572  0797                     	;# 
  2573  0798                     	;# 
  2574  0799                     	;# 
  2575  079A                     	;# 
  2576  079B                     	;# 
  2577  080C                     	;# 
  2578  080D                     	;# 
  2579  080E                     	;# 
  2580  080F                     	;# 
  2581  0810                     	;# 
  2582  0811                     	;# 
  2583  0812                     	;# 
  2584  0813                     	;# 
  2585  0814                     	;# 
  2586  081A                     	;# 
  2587  081A                     	;# 
  2588  081B                     	;# 
  2589  081C                     	;# 
  2590  081C                     	;# 
  2591  081D                     	;# 
  2592  081E                     	;# 
  2593  081F                     	;# 
  2594  088C                     	;# 
  2595  088D                     	;# 
  2596  088E                     	;# 
  2597  088F                     	;# 
  2598  0890                     	;# 
  2599  0891                     	;# 
  2600  0892                     	;# 
  2601  0893                     	;# 
  2602  0895                     	;# 
  2603  0896                     	;# 
  2604  090C                     	;# 
  2605  090E                     	;# 
  2606  090F                     	;# 
  2607  091F                     	;# 
  2608  098F                     	;# 
  2609  098F                     	;# 
  2610  0990                     	;# 
  2611  0991                     	;# 
  2612  0992                     	;# 
  2613  0993                     	;# 
  2614  0994                     	;# 
  2615  0995                     	;# 
  2616  0996                     	;# 
  2617  0997                     	;# 
  2618  0A19                     	;# 
  2619  0A19                     	;# 
  2620  0A1A                     	;# 
  2621  0A1A                     	;# 
  2622  0A1B                     	;# 
  2623  0A1B                     	;# 
  2624  0A1B                     	;# 
  2625  0A1C                     	;# 
  2626  0A1C                     	;# 
  2627  0A1D                     	;# 
  2628  0A1D                     	;# 
  2629  0A1E                     	;# 
  2630  0A1E                     	;# 
  2631  0A1F                     	;# 
  2632  0A1F                     	;# 
  2633  0A1F                     	;# 
  2634  1E0F                     	;# 
  2635  1E10                     	;# 
  2636  1E11                     	;# 
  2637  1E12                     	;# 
  2638  1E13                     	;# 
  2639  1E14                     	;# 
  2640  1E15                     	;# 
  2641  1E16                     	;# 
  2642  1E17                     	;# 
  2643  1E18                     	;# 
  2644  1E19                     	;# 
  2645  1E1A                     	;# 
  2646  1E1B                     	;# 
  2647  1E1C                     	;# 
  2648  1E1D                     	;# 
  2649  1E1E                     	;# 
  2650  1E1F                     	;# 
  2651  1E20                     	;# 
  2652  1E21                     	;# 
  2653  1E22                     	;# 
  2654  1E23                     	;# 
  2655  1E24                     	;# 
  2656  1E25                     	;# 
  2657  1E26                     	;# 
  2658  1E27                     	;# 
  2659  1E28                     	;# 
  2660  1E29                     	;# 
  2661  1E2A                     	;# 
  2662  1E2B                     	;# 
  2663  1E2C                     	;# 
  2664  1E2D                     	;# 
  2665  1E2E                     	;# 
  2666  1E2F                     	;# 
  2667  1E30                     	;# 
  2668  1E31                     	;# 
  2669  1E32                     	;# 
  2670  1E33                     	;# 
  2671  1E34                     	;# 
  2672  1E35                     	;# 
  2673  1E36                     	;# 
  2674  1E37                     	;# 
  2675  1E38                     	;# 
  2676  1E39                     	;# 
  2677  1E3A                     	;# 
  2678  1E3B                     	;# 
  2679  1E3C                     	;# 
  2680  1E3D                     	;# 
  2681  1E3E                     	;# 
  2682  1E3F                     	;# 
  2683  1E50                     	;# 
  2684  1E51                     	;# 
  2685  1E52                     	;# 
  2686  1E53                     	;# 
  2687  1E54                     	;# 
  2688  1E8F                     	;# 
  2689  1E90                     	;# 
  2690  1E91                     	;# 
  2691  1E92                     	;# 
  2692  1E93                     	;# 
  2693  1E9C                     	;# 
  2694  1EA1                     	;# 
  2695  1EA2                     	;# 
  2696  1EB1                     	;# 
  2697  1EBB                     	;# 
  2698  1EBC                     	;# 
  2699  1EBD                     	;# 
  2700  1EBE                     	;# 
  2701  1EC3                     	;# 
  2702  1EC5                     	;# 
  2703  1EC6                     	;# 
  2704  1EC7                     	;# 
  2705  1EC8                     	;# 
  2706  1EC9                     	;# 
  2707  1ECA                     	;# 
  2708  1ECB                     	;# 
  2709  1ECC                     	;# 
  2710  1ECD                     	;# 
  2711  1ECE                     	;# 
  2712  1F10                     	;# 
  2713  1F11                     	;# 
  2714  1F12                     	;# 
  2715  1F13                     	;# 
  2716  1F14                     	;# 
  2717  1F15                     	;# 
  2718  1F16                     	;# 
  2719  1F17                     	;# 
  2720  1F18                     	;# 
  2721  1F19                     	;# 
  2722  1F1A                     	;# 
  2723  1F1B                     	;# 
  2724  1F1C                     	;# 
  2725  1F1D                     	;# 
  2726  1F1E                     	;# 
  2727  1F1F                     	;# 
  2728  1F20                     	;# 
  2729  1F21                     	;# 
  2730  1F22                     	;# 
  2731  1F23                     	;# 
  2732  1F24                     	;# 
  2733  1F25                     	;# 
  2734  1F26                     	;# 
  2735  1F27                     	;# 
  2736  1F28                     	;# 
  2737  1F29                     	;# 
  2738  1F2A                     	;# 
  2739  1F2B                     	;# 
  2740  1F2C                     	;# 
  2741  1F2D                     	;# 
  2742  1F2E                     	;# 
  2743  1F2F                     	;# 
  2744  1F30                     	;# 
  2745  1F31                     	;# 
  2746  1F32                     	;# 
  2747  1F38                     	;# 
  2748  1F39                     	;# 
  2749  1F3A                     	;# 
  2750  1F3B                     	;# 
  2751  1F3C                     	;# 
  2752  1F3D                     	;# 
  2753  1F3E                     	;# 
  2754  1F3F                     	;# 
  2755  1F43                     	;# 
  2756  1F44                     	;# 
  2757  1F45                     	;# 
  2758  1F46                     	;# 
  2759  1F47                     	;# 
  2760  1F48                     	;# 
  2761  1F49                     	;# 
  2762  1F4A                     	;# 
  2763  1F4E                     	;# 
  2764  1F4F                     	;# 
  2765  1F50                     	;# 
  2766  1F51                     	;# 
  2767  1F52                     	;# 
  2768  1F53                     	;# 
  2769  1F54                     	;# 
  2770  1F55                     	;# 
  2771  1F59                     	;# 
  2772  1F5A                     	;# 
  2773  1F5B                     	;# 
  2774  1F5C                     	;# 
  2775  1F5D                     	;# 
  2776  1F64                     	;# 
  2777  1F65                     	;# 
  2778  1F66                     	;# 
  2779  1F67                     	;# 
  2780  1F68                     	;# 
  2781  1F69                     	;# 
  2782  1F6A                     	;# 
  2783  1F6B                     	;# 
  2784  1FE4                     	;# 
  2785  1FE5                     	;# 
  2786  1FE6                     	;# 
  2787  1FE7                     	;# 
  2788  1FE8                     	;# 
  2789  1FE8                     	;# 
  2790  1FE9                     	;# 
  2791  1FEA                     	;# 
  2792  1FEB                     	;# 
  2793  1FED                     	;# 
  2794  1FEE                     	;# 
  2795  1FEF                     	;# 
  2796  0000                     	;# 
  2797  0001                     	;# 
  2798  0002                     	;# 
  2799  0003                     	;# 
  2800  0004                     	;# 
  2801  0005                     	;# 
  2802  0006                     	;# 
  2803  0007                     	;# 
  2804  0008                     	;# 
  2805  0009                     	;# 
  2806  000A                     	;# 
  2807  000B                     	;# 
  2808  000C                     	;# 
  2809  000D                     	;# 
  2810  000E                     	;# 
  2811  000F                     	;# 
  2812  0010                     	;# 
  2813  0011                     	;# 
  2814  0012                     	;# 
  2815  0013                     	;# 
  2816  0014                     	;# 
  2817  0015                     	;# 
  2818  0016                     	;# 
  2819  0017                     	;# 
  2820  0018                     	;# 
  2821  0019                     	;# 
  2822  001A                     	;# 
  2823  001B                     	;# 
  2824  001C                     	;# 
  2825  001D                     	;# 
  2826  009B                     	;# 
  2827  009B                     	;# 
  2828  009C                     	;# 
  2829  009D                     	;# 
  2830  009E                     	;# 
  2831  009F                     	;# 
  2832  0119                     	;# 
  2833  0119                     	;# 
  2834  0119                     	;# 
  2835  011A                     	;# 
  2836  011A                     	;# 
  2837  011A                     	;# 
  2838  011B                     	;# 
  2839  011B                     	;# 
  2840  011B                     	;# 
  2841  011B                     	;# 
  2842  011B                     	;# 
  2843  011C                     	;# 
  2844  011C                     	;# 
  2845  011C                     	;# 
  2846  011D                     	;# 
  2847  011D                     	;# 
  2848  011D                     	;# 
  2849  011E                     	;# 
  2850  011E                     	;# 
  2851  011E                     	;# 
  2852  011F                     	;# 
  2853  011F                     	;# 
  2854  011F                     	;# 
  2855  011F                     	;# 
  2856  011F                     	;# 
  2857  018C                     	;# 
  2858  018D                     	;# 
  2859  018E                     	;# 
  2860  018F                     	;# 
  2861  0190                     	;# 
  2862  0191                     	;# 
  2863  0192                     	;# 
  2864  0196                     	;# 
  2865  0197                     	;# 
  2866  0198                     	;# 
  2867  0199                     	;# 
  2868  019A                     	;# 
  2869  019B                     	;# 
  2870  019C                     	;# 
  2871  020C                     	;# 
  2872  020C                     	;# 
  2873  020D                     	;# 
  2874  020E                     	;# 
  2875  020F                     	;# 
  2876  020F                     	;# 
  2877  0210                     	;# 
  2878  0210                     	;# 
  2879  0211                     	;# 
  2880  0211                     	;# 
  2881  028C                     	;# 
  2882  028C                     	;# 
  2883  028D                     	;# 
  2884  028D                     	;# 
  2885  028E                     	;# 
  2886  028F                     	;# 
  2887  0290                     	;# 
  2888  0291                     	;# 
  2889  030C                     	;# 
  2890  030C                     	;# 
  2891  030D                     	;# 
  2892  030E                     	;# 
  2893  030F                     	;# 
  2894  0310                     	;# 
  2895  0310                     	;# 
  2896  0311                     	;# 
  2897  0312                     	;# 
  2898  0313                     	;# 
  2899  0314                     	;# 
  2900  0315                     	;# 
  2901  0316                     	;# 
  2902  0318                     	;# 
  2903  0319                     	;# 
  2904  031A                     	;# 
  2905  031C                     	;# 
  2906  031D                     	;# 
  2907  031E                     	;# 
  2908  038C                     	;# 
  2909  038D                     	;# 
  2910  038E                     	;# 
  2911  058C                     	;# 
  2912  058C                     	;# 
  2913  058D                     	;# 
  2914  058E                     	;# 
  2915  058F                     	;# 
  2916  058F                     	;# 
  2917  0590                     	;# 
  2918  0591                     	;# 
  2919  0592                     	;# 
  2920  0593                     	;# 
  2921  059C                     	;# 
  2922  059C                     	;# 
  2923  059D                     	;# 
  2924  059D                     	;# 
  2925  059E                     	;# 
  2926  059F                     	;# 
  2927  060C                     	;# 
  2928  060D                     	;# 
  2929  060E                     	;# 
  2930  060F                     	;# 
  2931  0610                     	;# 
  2932  0611                     	;# 
  2933  0612                     	;# 
  2934  0613                     	;# 
  2935  0614                     	;# 
  2936  070C                     	;# 
  2937  070D                     	;# 
  2938  070E                     	;# 
  2939  070F                     	;# 
  2940  0710                     	;# 
  2941  0711                     	;# 
  2942  0712                     	;# 
  2943  0713                     	;# 
  2944  0716                     	;# 
  2945  0717                     	;# 
  2946  0718                     	;# 
  2947  0719                     	;# 
  2948  071A                     	;# 
  2949  071B                     	;# 
  2950  071C                     	;# 
  2951  071D                     	;# 
  2952  0796                     	;# 
  2953  0797                     	;# 
  2954  0798                     	;# 
  2955  0799                     	;# 
  2956  079A                     	;# 
  2957  079B                     	;# 
  2958  080C                     	;# 
  2959  080D                     	;# 
  2960  080E                     	;# 
  2961  080F                     	;# 
  2962  0810                     	;# 
  2963  0811                     	;# 
  2964  0812                     	;# 
  2965  0813                     	;# 
  2966  0814                     	;# 
  2967  081A                     	;# 
  2968  081A                     	;# 
  2969  081B                     	;# 
  2970  081C                     	;# 
  2971  081C                     	;# 
  2972  081D                     	;# 
  2973  081E                     	;# 
  2974  081F                     	;# 
  2975  088C                     	;# 
  2976  088D                     	;# 
  2977  088E                     	;# 
  2978  088F                     	;# 
  2979  0890                     	;# 
  2980  0891                     	;# 
  2981  0892                     	;# 
  2982  0893                     	;# 
  2983  0895                     	;# 
  2984  0896                     	;# 
  2985  090C                     	;# 
  2986  090E                     	;# 
  2987  090F                     	;# 
  2988  091F                     	;# 
  2989  098F                     	;# 
  2990  098F                     	;# 
  2991  0990                     	;# 
  2992  0991                     	;# 
  2993  0992                     	;# 
  2994  0993                     	;# 
  2995  0994                     	;# 
  2996  0995                     	;# 
  2997  0996                     	;# 
  2998  0997                     	;# 
  2999  0A19                     	;# 
  3000  0A19                     	;# 
  3001  0A1A                     	;# 
  3002  0A1A                     	;# 
  3003  0A1B                     	;# 
  3004  0A1B                     	;# 
  3005  0A1B                     	;# 
  3006  0A1C                     	;# 
  3007  0A1C                     	;# 
  3008  0A1D                     	;# 
  3009  0A1D                     	;# 
  3010  0A1E                     	;# 
  3011  0A1E                     	;# 
  3012  0A1F                     	;# 
  3013  0A1F                     	;# 
  3014  0A1F                     	;# 
  3015  1E0F                     	;# 
  3016  1E10                     	;# 
  3017  1E11                     	;# 
  3018  1E12                     	;# 
  3019  1E13                     	;# 
  3020  1E14                     	;# 
  3021  1E15                     	;# 
  3022  1E16                     	;# 
  3023  1E17                     	;# 
  3024  1E18                     	;# 
  3025  1E19                     	;# 
  3026  1E1A                     	;# 
  3027  1E1B                     	;# 
  3028  1E1C                     	;# 
  3029  1E1D                     	;# 
  3030  1E1E                     	;# 
  3031  1E1F                     	;# 
  3032  1E20                     	;# 
  3033  1E21                     	;# 
  3034  1E22                     	;# 
  3035  1E23                     	;# 
  3036  1E24                     	;# 
  3037  1E25                     	;# 
  3038  1E26                     	;# 
  3039  1E27                     	;# 
  3040  1E28                     	;# 
  3041  1E29                     	;# 
  3042  1E2A                     	;# 
  3043  1E2B                     	;# 
  3044  1E2C                     	;# 
  3045  1E2D                     	;# 
  3046  1E2E                     	;# 
  3047  1E2F                     	;# 
  3048  1E30                     	;# 
  3049  1E31                     	;# 
  3050  1E32                     	;# 
  3051  1E33                     	;# 
  3052  1E34                     	;# 
  3053  1E35                     	;# 
  3054  1E36                     	;# 
  3055  1E37                     	;# 
  3056  1E38                     	;# 
  3057  1E39                     	;# 
  3058  1E3A                     	;# 
  3059  1E3B                     	;# 
  3060  1E3C                     	;# 
  3061  1E3D                     	;# 
  3062  1E3E                     	;# 
  3063  1E3F                     	;# 
  3064  1E50                     	;# 
  3065  1E51                     	;# 
  3066  1E52                     	;# 
  3067  1E53                     	;# 
  3068  1E54                     	;# 
  3069  1E8F                     	;# 
  3070  1E90                     	;# 
  3071  1E91                     	;# 
  3072  1E92                     	;# 
  3073  1E93                     	;# 
  3074  1E9C                     	;# 
  3075  1EA1                     	;# 
  3076  1EA2                     	;# 
  3077  1EB1                     	;# 
  3078  1EBB                     	;# 
  3079  1EBC                     	;# 
  3080  1EBD                     	;# 
  3081  1EBE                     	;# 
  3082  1EC3                     	;# 
  3083  1EC5                     	;# 
  3084  1EC6                     	;# 
  3085  1EC7                     	;# 
  3086  1EC8                     	;# 
  3087  1EC9                     	;# 
  3088  1ECA                     	;# 
  3089  1ECB                     	;# 
  3090  1ECC                     	;# 
  3091  1ECD                     	;# 
  3092  1ECE                     	;# 
  3093  1F10                     	;# 
  3094  1F11                     	;# 
  3095  1F12                     	;# 
  3096  1F13                     	;# 
  3097  1F14                     	;# 
  3098  1F15                     	;# 
  3099  1F16                     	;# 
  3100  1F17                     	;# 
  3101  1F18                     	;# 
  3102  1F19                     	;# 
  3103  1F1A                     	;# 
  3104  1F1B                     	;# 
  3105  1F1C                     	;# 
  3106  1F1D                     	;# 
  3107  1F1E                     	;# 
  3108  1F1F                     	;# 
  3109  1F20                     	;# 
  3110  1F21                     	;# 
  3111  1F22                     	;# 
  3112  1F23                     	;# 
  3113  1F24                     	;# 
  3114  1F25                     	;# 
  3115  1F26                     	;# 
  3116  1F27                     	;# 
  3117  1F28                     	;# 
  3118  1F29                     	;# 
  3119  1F2A                     	;# 
  3120  1F2B                     	;# 
  3121  1F2C                     	;# 
  3122  1F2D                     	;# 
  3123  1F2E                     	;# 
  3124  1F2F                     	;# 
  3125  1F30                     	;# 
  3126  1F31                     	;# 
  3127  1F32                     	;# 
  3128  1F38                     	;# 
  3129  1F39                     	;# 
  3130  1F3A                     	;# 
  3131  1F3B                     	;# 
  3132  1F3C                     	;# 
  3133  1F3D                     	;# 
  3134  1F3E                     	;# 
  3135  1F3F                     	;# 
  3136  1F43                     	;# 
  3137  1F44                     	;# 
  3138  1F45                     	;# 
  3139  1F46                     	;# 
  3140  1F47                     	;# 
  3141  1F48                     	;# 
  3142  1F49                     	;# 
  3143  1F4A                     	;# 
  3144  1F4E                     	;# 
  3145  1F4F                     	;# 
  3146  1F50                     	;# 
  3147  1F51                     	;# 
  3148  1F52                     	;# 
  3149  1F53                     	;# 
  3150  1F54                     	;# 
  3151  1F55                     	;# 
  3152  1F59                     	;# 
  3153  1F5A                     	;# 
  3154  1F5B                     	;# 
  3155  1F5C                     	;# 
  3156  1F5D                     	;# 
  3157  1F64                     	;# 
  3158  1F65                     	;# 
  3159  1F66                     	;# 
  3160  1F67                     	;# 
  3161  1F68                     	;# 
  3162  1F69                     	;# 
  3163  1F6A                     	;# 
  3164  1F6B                     	;# 
  3165  1FE4                     	;# 
  3166  1FE5                     	;# 
  3167  1FE6                     	;# 
  3168  1FE7                     	;# 
  3169  1FE8                     	;# 
  3170  1FE8                     	;# 
  3171  1FE9                     	;# 
  3172  1FEA                     	;# 
  3173  1FEB                     	;# 
  3174  1FED                     	;# 
  3175  1FEE                     	;# 
  3176  1FEF                     	;# 
  3177  0000                     	;# 
  3178  0001                     	;# 
  3179  0002                     	;# 
  3180  0003                     	;# 
  3181  0004                     	;# 
  3182  0005                     	;# 
  3183  0006                     	;# 
  3184  0007                     	;# 
  3185  0008                     	;# 
  3186  0009                     	;# 
  3187  000A                     	;# 
  3188  000B                     	;# 
  3189  000C                     	;# 
  3190  000D                     	;# 
  3191  000E                     	;# 
  3192  000F                     	;# 
  3193  0010                     	;# 
  3194  0011                     	;# 
  3195  0012                     	;# 
  3196  0013                     	;# 
  3197  0014                     	;# 
  3198  0015                     	;# 
  3199  0016                     	;# 
  3200  0017                     	;# 
  3201  0018                     	;# 
  3202  0019                     	;# 
  3203  001A                     	;# 
  3204  001B                     	;# 
  3205  001C                     	;# 
  3206  001D                     	;# 
  3207  009B                     	;# 
  3208  009B                     	;# 
  3209  009C                     	;# 
  3210  009D                     	;# 
  3211  009E                     	;# 
  3212  009F                     	;# 
  3213  0119                     	;# 
  3214  0119                     	;# 
  3215  0119                     	;# 
  3216  011A                     	;# 
  3217  011A                     	;# 
  3218  011A                     	;# 
  3219  011B                     	;# 
  3220  011B                     	;# 
  3221  011B                     	;# 
  3222  011B                     	;# 
  3223  011B                     	;# 
  3224  011C                     	;# 
  3225  011C                     	;# 
  3226  011C                     	;# 
  3227  011D                     	;# 
  3228  011D                     	;# 
  3229  011D                     	;# 
  3230  011E                     	;# 
  3231  011E                     	;# 
  3232  011E                     	;# 
  3233  011F                     	;# 
  3234  011F                     	;# 
  3235  011F                     	;# 
  3236  011F                     	;# 
  3237  011F                     	;# 
  3238  018C                     	;# 
  3239  018D                     	;# 
  3240  018E                     	;# 
  3241  018F                     	;# 
  3242  0190                     	;# 
  3243  0191                     	;# 
  3244  0192                     	;# 
  3245  0196                     	;# 
  3246  0197                     	;# 
  3247  0198                     	;# 
  3248  0199                     	;# 
  3249  019A                     	;# 
  3250  019B                     	;# 
  3251  019C                     	;# 
  3252  020C                     	;# 
  3253  020C                     	;# 
  3254  020D                     	;# 
  3255  020E                     	;# 
  3256  020F                     	;# 
  3257  020F                     	;# 
  3258  0210                     	;# 
  3259  0210                     	;# 
  3260  0211                     	;# 
  3261  0211                     	;# 
  3262  028C                     	;# 
  3263  028C                     	;# 
  3264  028D                     	;# 
  3265  028D                     	;# 
  3266  028E                     	;# 
  3267  028F                     	;# 
  3268  0290                     	;# 
  3269  0291                     	;# 
  3270  030C                     	;# 
  3271  030C                     	;# 
  3272  030D                     	;# 
  3273  030E                     	;# 
  3274  030F                     	;# 
  3275  0310                     	;# 
  3276  0310                     	;# 
  3277  0311                     	;# 
  3278  0312                     	;# 
  3279  0313                     	;# 
  3280  0314                     	;# 
  3281  0315                     	;# 
  3282  0316                     	;# 
  3283  0318                     	;# 
  3284  0319                     	;# 
  3285  031A                     	;# 
  3286  031C                     	;# 
  3287  031D                     	;# 
  3288  031E                     	;# 
  3289  038C                     	;# 
  3290  038D                     	;# 
  3291  038E                     	;# 
  3292  058C                     	;# 
  3293  058C                     	;# 
  3294  058D                     	;# 
  3295  058E                     	;# 
  3296  058F                     	;# 
  3297  058F                     	;# 
  3298  0590                     	;# 
  3299  0591                     	;# 
  3300  0592                     	;# 
  3301  0593                     	;# 
  3302  059C                     	;# 
  3303  059C                     	;# 
  3304  059D                     	;# 
  3305  059D                     	;# 
  3306  059E                     	;# 
  3307  059F                     	;# 
  3308  060C                     	;# 
  3309  060D                     	;# 
  3310  060E                     	;# 
  3311  060F                     	;# 
  3312  0610                     	;# 
  3313  0611                     	;# 
  3314  0612                     	;# 
  3315  0613                     	;# 
  3316  0614                     	;# 
  3317  070C                     	;# 
  3318  070D                     	;# 
  3319  070E                     	;# 
  3320  070F                     	;# 
  3321  0710                     	;# 
  3322  0711                     	;# 
  3323  0712                     	;# 
  3324  0713                     	;# 
  3325  0716                     	;# 
  3326  0717                     	;# 
  3327  0718                     	;# 
  3328  0719                     	;# 
  3329  071A                     	;# 
  3330  071B                     	;# 
  3331  071C                     	;# 
  3332  071D                     	;# 
  3333  0796                     	;# 
  3334  0797                     	;# 
  3335  0798                     	;# 
  3336  0799                     	;# 
  3337  079A                     	;# 
  3338  079B                     	;# 
  3339  080C                     	;# 
  3340  080D                     	;# 
  3341  080E                     	;# 
  3342  080F                     	;# 
  3343  0810                     	;# 
  3344  0811                     	;# 
  3345  0812                     	;# 
  3346  0813                     	;# 
  3347  0814                     	;# 
  3348  081A                     	;# 
  3349  081A                     	;# 
  3350  081B                     	;# 
  3351  081C                     	;# 
  3352  081C                     	;# 
  3353  081D                     	;# 
  3354  081E                     	;# 
  3355  081F                     	;# 
  3356  088C                     	;# 
  3357  088D                     	;# 
  3358  088E                     	;# 
  3359  088F                     	;# 
  3360  0890                     	;# 
  3361  0891                     	;# 
  3362  0892                     	;# 
  3363  0893                     	;# 
  3364  0895                     	;# 
  3365  0896                     	;# 
  3366  090C                     	;# 
  3367  090E                     	;# 
  3368  090F                     	;# 
  3369  091F                     	;# 
  3370  098F                     	;# 
  3371  098F                     	;# 
  3372  0990                     	;# 
  3373  0991                     	;# 
  3374  0992                     	;# 
  3375  0993                     	;# 
  3376  0994                     	;# 
  3377  0995                     	;# 
  3378  0996                     	;# 
  3379  0997                     	;# 
  3380  0A19                     	;# 
  3381  0A19                     	;# 
  3382  0A1A                     	;# 
  3383  0A1A                     	;# 
  3384  0A1B                     	;# 
  3385  0A1B                     	;# 
  3386  0A1B                     	;# 
  3387  0A1C                     	;# 
  3388  0A1C                     	;# 
  3389  0A1D                     	;# 
  3390  0A1D                     	;# 
  3391  0A1E                     	;# 
  3392  0A1E                     	;# 
  3393  0A1F                     	;# 
  3394  0A1F                     	;# 
  3395  0A1F                     	;# 
  3396  1E0F                     	;# 
  3397  1E10                     	;# 
  3398  1E11                     	;# 
  3399  1E12                     	;# 
  3400  1E13                     	;# 
  3401  1E14                     	;# 
  3402  1E15                     	;# 
  3403  1E16                     	;# 
  3404  1E17                     	;# 
  3405  1E18                     	;# 
  3406  1E19                     	;# 
  3407  1E1A                     	;# 
  3408  1E1B                     	;# 
  3409  1E1C                     	;# 
  3410  1E1D                     	;# 
  3411  1E1E                     	;# 
  3412  1E1F                     	;# 
  3413  1E20                     	;# 
  3414  1E21                     	;# 
  3415  1E22                     	;# 
  3416  1E23                     	;# 
  3417  1E24                     	;# 
  3418  1E25                     	;# 
  3419  1E26                     	;# 
  3420  1E27                     	;# 
  3421  1E28                     	;# 
  3422  1E29                     	;# 
  3423  1E2A                     	;# 
  3424  1E2B                     	;# 
  3425  1E2C                     	;# 
  3426  1E2D                     	;# 
  3427  1E2E                     	;# 
  3428  1E2F                     	;# 
  3429  1E30                     	;# 
  3430  1E31                     	;# 
  3431  1E32                     	;# 
  3432  1E33                     	;# 
  3433  1E34                     	;# 
  3434  1E35                     	;# 
  3435  1E36                     	;# 
  3436  1E37                     	;# 
  3437  1E38                     	;# 
  3438  1E39                     	;# 
  3439  1E3A                     	;# 
  3440  1E3B                     	;# 
  3441  1E3C                     	;# 
  3442  1E3D                     	;# 
  3443  1E3E                     	;# 
  3444  1E3F                     	;# 
  3445  1E50                     	;# 
  3446  1E51                     	;# 
  3447  1E52                     	;# 
  3448  1E53                     	;# 
  3449  1E54                     	;# 
  3450  1E8F                     	;# 
  3451  1E90                     	;# 
  3452  1E91                     	;# 
  3453  1E92                     	;# 
  3454  1E93                     	;# 
  3455  1E9C                     	;# 
  3456  1EA1                     	;# 
  3457  1EA2                     	;# 
  3458  1EB1                     	;# 
  3459  1EBB                     	;# 
  3460  1EBC                     	;# 
  3461  1EBD                     	;# 
  3462  1EBE                     	;# 
  3463  1EC3                     	;# 
  3464  1EC5                     	;# 
  3465  1EC6                     	;# 
  3466  1EC7                     	;# 
  3467  1EC8                     	;# 
  3468  1EC9                     	;# 
  3469  1ECA                     	;# 
  3470  1ECB                     	;# 
  3471  1ECC                     	;# 
  3472  1ECD                     	;# 
  3473  1ECE                     	;# 
  3474  1F10                     	;# 
  3475  1F11                     	;# 
  3476  1F12                     	;# 
  3477  1F13                     	;# 
  3478  1F14                     	;# 
  3479  1F15                     	;# 
  3480  1F16                     	;# 
  3481  1F17                     	;# 
  3482  1F18                     	;# 
  3483  1F19                     	;# 
  3484  1F1A                     	;# 
  3485  1F1B                     	;# 
  3486  1F1C                     	;# 
  3487  1F1D                     	;# 
  3488  1F1E                     	;# 
  3489  1F1F                     	;# 
  3490  1F20                     	;# 
  3491  1F21                     	;# 
  3492  1F22                     	;# 
  3493  1F23                     	;# 
  3494  1F24                     	;# 
  3495  1F25                     	;# 
  3496  1F26                     	;# 
  3497  1F27                     	;# 
  3498  1F28                     	;# 
  3499  1F29                     	;# 
  3500  1F2A                     	;# 
  3501  1F2B                     	;# 
  3502  1F2C                     	;# 
  3503  1F2D                     	;# 
  3504  1F2E                     	;# 
  3505  1F2F                     	;# 
  3506  1F30                     	;# 
  3507  1F31                     	;# 
  3508  1F32                     	;# 
  3509  1F38                     	;# 
  3510  1F39                     	;# 
  3511  1F3A                     	;# 
  3512  1F3B                     	;# 
  3513  1F3C                     	;# 
  3514  1F3D                     	;# 
  3515  1F3E                     	;# 
  3516  1F3F                     	;# 
  3517  1F43                     	;# 
  3518  1F44                     	;# 
  3519  1F45                     	;# 
  3520  1F46                     	;# 
  3521  1F47                     	;# 
  3522  1F48                     	;# 
  3523  1F49                     	;# 
  3524  1F4A                     	;# 
  3525  1F4E                     	;# 
  3526  1F4F                     	;# 
  3527  1F50                     	;# 
  3528  1F51                     	;# 
  3529  1F52                     	;# 
  3530  1F53                     	;# 
  3531  1F54                     	;# 
  3532  1F55                     	;# 
  3533  1F59                     	;# 
  3534  1F5A                     	;# 
  3535  1F5B                     	;# 
  3536  1F5C                     	;# 
  3537  1F5D                     	;# 
  3538  1F64                     	;# 
  3539  1F65                     	;# 
  3540  1F66                     	;# 
  3541  1F67                     	;# 
  3542  1F68                     	;# 
  3543  1F69                     	;# 
  3544  1F6A                     	;# 
  3545  1F6B                     	;# 
  3546  1FE4                     	;# 
  3547  1FE5                     	;# 
  3548  1FE6                     	;# 
  3549  1FE7                     	;# 
  3550  1FE8                     	;# 
  3551  1FE8                     	;# 
  3552  1FE9                     	;# 
  3553  1FEA                     	;# 
  3554  1FEB                     	;# 
  3555  1FED                     	;# 
  3556  1FEE                     	;# 
  3557  1FEF                     	;_CAN_rxMessageQ
  3558                           
  3559                           	psect	idataBANK1
  3560  102F                     __pidataBANK1:	
  3561                           
  3562                           ;initializer for blink_forward_led@toggle
  3563  102F  3401               	retlw	1
  3564                           
  3565                           ;initializer for __numLedRows
  3566  1030  3405               	retlw	5
  3567                           
  3568                           ;initializer for _j1939_address_claim_was_successful
  3569  1031  3401               	retlw	1
  3570                           
  3571                           	psect	idataBANK2
  3572  106D                     __pidataBANK2:	
  3573                           
  3574                           ;initializer for _LED_ROW_PORTA
  3575  106D  3401               	retlw	1
  3576  106E  3402               	retlw	2
  3577  106F  3404               	retlw	4
  3578  1070  3408               	retlw	8
  3579  1071  3410               	retlw	16
  3580                           
  3581                           ;initializer for _SW_ROW_PORTD
  3582  1072  3401               	retlw	1
  3583  1073  3402               	retlw	2
  3584  1074  3404               	retlw	4
  3585  1075  3408               	retlw	8
  3586  1076  3410               	retlw	16
  3587                           
  3588                           ;initializer for _SW_ROW_ARRAY
  3589  1077  3401               	retlw	1
  3590  1078  3402               	retlw	2
  3591  1079  3404               	retlw	4
  3592  107A  3408               	retlw	8
  3593  107B  3410               	retlw	16
  3594                           
  3595                           	psect	idataBANK3
  3596  123D                     __pidataBANK3:	
  3597                           
  3598                           ;initializer for _test_send_message
  3599  123D  3481               	retlw	129
  3600  123E  3410               	retlw	16
  3601  123F  34FF               	retlw	255
  3602  1240  3490               	retlw	144
  3603  1241  3400               	retlw	0
  3604  1242  3408               	retlw	8
  3605  1243  3400               	retlw	0
  3606  1244  3400               	retlw	0
  3607  1245  3400               	retlw	0
  3608  1246  3400               	retlw	0
  3609  1247  3400               	retlw	0
  3610  1248  3400               	retlw	0
  3611  1249  3400               	retlw	0
  3612  124A  3400               	retlw	0
  3613                           
  3614                           ;initializer for _can_send_message
  3615  124B  3481               	retlw	129
  3616  124C  3410               	retlw	16
  3617  124D  34FF               	retlw	255
  3618  124E  3490               	retlw	144
  3619  124F  3400               	retlw	0
  3620  1250  3408               	retlw	8
  3621  1251  3400               	retlw	0
  3622  1252  3400               	retlw	0
  3623  1253  3400               	retlw	0
  3624  1254  3400               	retlw	0
  3625  1255  3400               	retlw	0
  3626  1256  3400               	retlw	0
  3627  1257  3400               	retlw	0
  3628  1258  3400               	retlw	0
  3629                           
  3630                           	psect	stringtext1
  3631  03FE                     __pstringtext1:	
  3632  03FE                     __CRCTable:	
  3633  03FE  3400               	retlw	0
  3634  03FF  3400               	retlw	0
  3635  0400  34C1               	retlw	193
  3636  0401  34C0               	retlw	192
  3637  0402  3481               	retlw	129
  3638  0403  34C1               	retlw	193
  3639  0404  3440               	retlw	64
  3640  0405  3401               	retlw	1
  3641  0406  3401               	retlw	1
  3642  0407  34C3               	retlw	195
  3643  0408  34C0               	retlw	192
  3644  0409  3403               	retlw	3
  3645  040A  3480               	retlw	128
  3646  040B  3402               	retlw	2
  3647  040C  3441               	retlw	65
  3648  040D  34C2               	retlw	194
  3649  040E  3401               	retlw	1
  3650  040F  34C6               	retlw	198
  3651  0410  34C0               	retlw	192
  3652  0411  3406               	retlw	6
  3653  0412  3480               	retlw	128
  3654  0413  3407               	retlw	7
  3655  0414  3441               	retlw	65
  3656  0415  34C7               	retlw	199
  3657  0416  3400               	retlw	0
  3658  0417  3405               	retlw	5
  3659  0418  34C1               	retlw	193
  3660  0419  34C5               	retlw	197
  3661  041A  3481               	retlw	129
  3662  041B  34C4               	retlw	196
  3663  041C  3440               	retlw	64
  3664  041D  3404               	retlw	4
  3665  041E  3401               	retlw	1
  3666  041F  34CC               	retlw	204
  3667  0420  34C0               	retlw	192
  3668  0421  340C               	retlw	12
  3669  0422  3480               	retlw	128
  3670  0423  340D               	retlw	13
  3671  0424  3441               	retlw	65
  3672  0425  34CD               	retlw	205
  3673  0426  3400               	retlw	0
  3674  0427  340F               	retlw	15
  3675  0428  34C1               	retlw	193
  3676  0429  34CF               	retlw	207
  3677  042A  3481               	retlw	129
  3678  042B  34CE               	retlw	206
  3679  042C  3440               	retlw	64
  3680  042D  340E               	retlw	14
  3681  042E  3400               	retlw	0
  3682  042F  340A               	retlw	10
  3683  0430  34C1               	retlw	193
  3684  0431  34CA               	retlw	202
  3685  0432  3481               	retlw	129
  3686  0433  34CB               	retlw	203
  3687  0434  3440               	retlw	64
  3688  0435  340B               	retlw	11
  3689  0436  3401               	retlw	1
  3690  0437  34C9               	retlw	201
  3691  0438  34C0               	retlw	192
  3692  0439  3409               	retlw	9
  3693  043A  3480               	retlw	128
  3694  043B  3408               	retlw	8
  3695  043C  3441               	retlw	65
  3696  043D  34C8               	retlw	200
  3697  043E  3401               	retlw	1
  3698  043F  34D8               	retlw	216
  3699  0440  34C0               	retlw	192
  3700  0441  3418               	retlw	24
  3701  0442  3480               	retlw	128
  3702  0443  3419               	retlw	25
  3703  0444  3441               	retlw	65
  3704  0445  34D9               	retlw	217
  3705  0446  3400               	retlw	0
  3706  0447  341B               	retlw	27
  3707  0448  34C1               	retlw	193
  3708  0449  34DB               	retlw	219
  3709  044A  3481               	retlw	129
  3710  044B  34DA               	retlw	218
  3711  044C  3440               	retlw	64
  3712  044D  341A               	retlw	26
  3713  044E  3400               	retlw	0
  3714  044F  341E               	retlw	30
  3715  0450  34C1               	retlw	193
  3716  0451  34DE               	retlw	222
  3717  0452  3481               	retlw	129
  3718  0453  34DF               	retlw	223
  3719  0454  3440               	retlw	64
  3720  0455  341F               	retlw	31
  3721  0456  3401               	retlw	1
  3722  0457  34DD               	retlw	221
  3723  0458  34C0               	retlw	192
  3724  0459  341D               	retlw	29
  3725  045A  3480               	retlw	128
  3726  045B  341C               	retlw	28
  3727  045C  3441               	retlw	65
  3728  045D  34DC               	retlw	220
  3729  045E  3400               	retlw	0
  3730  045F  3414               	retlw	20
  3731  0460  34C1               	retlw	193
  3732  0461  34D4               	retlw	212
  3733  0462  3481               	retlw	129
  3734  0463  34D5               	retlw	213
  3735  0464  3440               	retlw	64
  3736  0465  3415               	retlw	21
  3737  0466  3401               	retlw	1
  3738  0467  34D7               	retlw	215
  3739  0468  34C0               	retlw	192
  3740  0469  3417               	retlw	23
  3741  046A  3480               	retlw	128
  3742  046B  3416               	retlw	22
  3743  046C  3441               	retlw	65
  3744  046D  34D6               	retlw	214
  3745  046E  3401               	retlw	1
  3746  046F  34D2               	retlw	210
  3747  0470  34C0               	retlw	192
  3748  0471  3412               	retlw	18
  3749  0472  3480               	retlw	128
  3750  0473  3413               	retlw	19
  3751  0474  3441               	retlw	65
  3752  0475  34D3               	retlw	211
  3753  0476  3400               	retlw	0
  3754  0477  3411               	retlw	17
  3755  0478  34C1               	retlw	193
  3756  0479  34D1               	retlw	209
  3757  047A  3481               	retlw	129
  3758  047B  34D0               	retlw	208
  3759  047C  3440               	retlw	64
  3760  047D  3410               	retlw	16
  3761  047E  3401               	retlw	1
  3762  047F  34F0               	retlw	240
  3763  0480  34C0               	retlw	192
  3764  0481  3430               	retlw	48
  3765  0482  3480               	retlw	128
  3766  0483  3431               	retlw	49
  3767  0484  3441               	retlw	65
  3768  0485  34F1               	retlw	241
  3769  0486  3400               	retlw	0
  3770  0487  3433               	retlw	51
  3771  0488  34C1               	retlw	193
  3772  0489  34F3               	retlw	243
  3773  048A  3481               	retlw	129
  3774  048B  34F2               	retlw	242
  3775  048C  3440               	retlw	64
  3776  048D  3432               	retlw	50
  3777  048E  3400               	retlw	0
  3778  048F  3436               	retlw	54
  3779  0490  34C1               	retlw	193
  3780  0491  34F6               	retlw	246
  3781  0492  3481               	retlw	129
  3782  0493  34F7               	retlw	247
  3783  0494  3440               	retlw	64
  3784  0495  3437               	retlw	55
  3785  0496  3401               	retlw	1
  3786  0497  34F5               	retlw	245
  3787  0498  34C0               	retlw	192
  3788  0499  3435               	retlw	53
  3789  049A  3480               	retlw	128
  3790  049B  3434               	retlw	52
  3791  049C  3441               	retlw	65
  3792  049D  34F4               	retlw	244
  3793  049E  3400               	retlw	0
  3794  049F  343C               	retlw	60
  3795  04A0  34C1               	retlw	193
  3796  04A1  34FC               	retlw	252
  3797  04A2  3481               	retlw	129
  3798  04A3  34FD               	retlw	253
  3799  04A4  3440               	retlw	64
  3800  04A5  343D               	retlw	61
  3801  04A6  3401               	retlw	1
  3802  04A7  34FF               	retlw	255
  3803  04A8  34C0               	retlw	192
  3804  04A9  343F               	retlw	63
  3805  04AA  3480               	retlw	128
  3806  04AB  343E               	retlw	62
  3807  04AC  3441               	retlw	65
  3808  04AD  34FE               	retlw	254
  3809  04AE  3401               	retlw	1
  3810  04AF  34FA               	retlw	250
  3811  04B0  34C0               	retlw	192
  3812  04B1  343A               	retlw	58
  3813  04B2  3480               	retlw	128
  3814  04B3  343B               	retlw	59
  3815  04B4  3441               	retlw	65
  3816  04B5  34FB               	retlw	251
  3817  04B6  3400               	retlw	0
  3818  04B7  3439               	retlw	57
  3819  04B8  34C1               	retlw	193
  3820  04B9  34F9               	retlw	249
  3821  04BA  3481               	retlw	129
  3822  04BB  34F8               	retlw	248
  3823  04BC  3440               	retlw	64
  3824  04BD  3438               	retlw	56
  3825  04BE  3400               	retlw	0
  3826  04BF  3428               	retlw	40
  3827  04C0  34C1               	retlw	193
  3828  04C1  34E8               	retlw	232
  3829  04C2  3481               	retlw	129
  3830  04C3  34E9               	retlw	233
  3831  04C4  3440               	retlw	64
  3832  04C5  3429               	retlw	41
  3833  04C6  3401               	retlw	1
  3834  04C7  34EB               	retlw	235
  3835  04C8  34C0               	retlw	192
  3836  04C9  342B               	retlw	43
  3837  04CA  3480               	retlw	128
  3838  04CB  342A               	retlw	42
  3839  04CC  3441               	retlw	65
  3840  04CD  34EA               	retlw	234
  3841  04CE  3401               	retlw	1
  3842  04CF  34EE               	retlw	238
  3843  04D0  34C0               	retlw	192
  3844  04D1  342E               	retlw	46
  3845  04D2  3480               	retlw	128
  3846  04D3  342F               	retlw	47
  3847  04D4  3441               	retlw	65
  3848  04D5  34EF               	retlw	239
  3849  04D6  3400               	retlw	0
  3850  04D7  342D               	retlw	45
  3851  04D8  34C1               	retlw	193
  3852  04D9  34ED               	retlw	237
  3853  04DA  3481               	retlw	129
  3854  04DB  34EC               	retlw	236
  3855  04DC  3440               	retlw	64
  3856  04DD  342C               	retlw	44
  3857  04DE  3401               	retlw	1
  3858  04DF  34E4               	retlw	228
  3859  04E0  34C0               	retlw	192
  3860  04E1  3424               	retlw	36
  3861  04E2  3480               	retlw	128
  3862  04E3  3425               	retlw	37
  3863  04E4  3441               	retlw	65
  3864  04E5  34E5               	retlw	229
  3865  04E6  3400               	retlw	0
  3866  04E7  3427               	retlw	39
  3867  04E8  34C1               	retlw	193
  3868  04E9  34E7               	retlw	231
  3869  04EA  3481               	retlw	129
  3870  04EB  34E6               	retlw	230
  3871  04EC  3440               	retlw	64
  3872  04ED  3426               	retlw	38
  3873  04EE  3400               	retlw	0
  3874  04EF  3422               	retlw	34
  3875  04F0  34C1               	retlw	193
  3876  04F1  34E2               	retlw	226
  3877  04F2  3481               	retlw	129
  3878  04F3  34E3               	retlw	227
  3879  04F4  3440               	retlw	64
  3880  04F5  3423               	retlw	35
  3881  04F6  3401               	retlw	1
  3882  04F7  34E1               	retlw	225
  3883  04F8  34C0               	retlw	192
  3884  04F9  3421               	retlw	33
  3885  04FA  3480               	retlw	128
  3886  04FB  3420               	retlw	32
  3887  04FC  3441               	retlw	65
  3888  04FD  34E0               	retlw	224
  3889  04FE  3401               	retlw	1
  3890  04FF  34A0               	retlw	160
  3891  0500  34C0               	retlw	192
  3892  0501  3460               	retlw	96
  3893  0502  3480               	retlw	128
  3894  0503  3461               	retlw	97
  3895  0504  3441               	retlw	65
  3896  0505  34A1               	retlw	161
  3897  0506  3400               	retlw	0
  3898  0507  3463               	retlw	99
  3899  0508  34C1               	retlw	193
  3900  0509  34A3               	retlw	163
  3901  050A  3481               	retlw	129
  3902  050B  34A2               	retlw	162
  3903  050C  3440               	retlw	64
  3904  050D  3462               	retlw	98
  3905  050E  3400               	retlw	0
  3906  050F  3466               	retlw	102
  3907  0510  34C1               	retlw	193
  3908  0511  34A6               	retlw	166
  3909  0512  3481               	retlw	129
  3910  0513  34A7               	retlw	167
  3911  0514  3440               	retlw	64
  3912  0515  3467               	retlw	103
  3913  0516  3401               	retlw	1
  3914  0517  34A5               	retlw	165
  3915  0518  34C0               	retlw	192
  3916  0519  3465               	retlw	101
  3917  051A  3480               	retlw	128
  3918  051B  3464               	retlw	100
  3919  051C  3441               	retlw	65
  3920  051D  34A4               	retlw	164
  3921  051E  3400               	retlw	0
  3922  051F  346C               	retlw	108
  3923  0520  34C1               	retlw	193
  3924  0521  34AC               	retlw	172
  3925  0522  3481               	retlw	129
  3926  0523  34AD               	retlw	173
  3927  0524  3440               	retlw	64
  3928  0525  346D               	retlw	109
  3929  0526  3401               	retlw	1
  3930  0527  34AF               	retlw	175
  3931  0528  34C0               	retlw	192
  3932  0529  346F               	retlw	111
  3933  052A  3480               	retlw	128
  3934  052B  346E               	retlw	110
  3935  052C  3441               	retlw	65
  3936  052D  34AE               	retlw	174
  3937  052E  3401               	retlw	1
  3938  052F  34AA               	retlw	170
  3939  0530  34C0               	retlw	192
  3940  0531  346A               	retlw	106
  3941  0532  3480               	retlw	128
  3942  0533  346B               	retlw	107
  3943  0534  3441               	retlw	65
  3944  0535  34AB               	retlw	171
  3945  0536  3400               	retlw	0
  3946  0537  3469               	retlw	105
  3947  0538  34C1               	retlw	193
  3948  0539  34A9               	retlw	169
  3949  053A  3481               	retlw	129
  3950  053B  34A8               	retlw	168
  3951  053C  3440               	retlw	64
  3952  053D  3468               	retlw	104
  3953  053E  3400               	retlw	0
  3954  053F  3478               	retlw	120
  3955  0540  34C1               	retlw	193
  3956  0541  34B8               	retlw	184
  3957  0542  3481               	retlw	129
  3958  0543  34B9               	retlw	185
  3959  0544  3440               	retlw	64
  3960  0545  3479               	retlw	121
  3961  0546  3401               	retlw	1
  3962  0547  34BB               	retlw	187
  3963  0548  34C0               	retlw	192
  3964  0549  347B               	retlw	123
  3965  054A  3480               	retlw	128
  3966  054B  347A               	retlw	122
  3967  054C  3441               	retlw	65
  3968  054D  34BA               	retlw	186
  3969  054E  3401               	retlw	1
  3970  054F  34BE               	retlw	190
  3971  0550  34C0               	retlw	192
  3972  0551  347E               	retlw	126
  3973  0552  3480               	retlw	128
  3974  0553  347F               	retlw	127
  3975  0554  3441               	retlw	65
  3976  0555  34BF               	retlw	191
  3977  0556  3400               	retlw	0
  3978  0557  347D               	retlw	125
  3979  0558  34C1               	retlw	193
  3980  0559  34BD               	retlw	189
  3981  055A  3481               	retlw	129
  3982  055B  34BC               	retlw	188
  3983  055C  3440               	retlw	64
  3984  055D  347C               	retlw	124
  3985  055E  3401               	retlw	1
  3986  055F  34B4               	retlw	180
  3987  0560  34C0               	retlw	192
  3988  0561  3474               	retlw	116
  3989  0562  3480               	retlw	128
  3990  0563  3475               	retlw	117
  3991  0564  3441               	retlw	65
  3992  0565  34B5               	retlw	181
  3993  0566  3400               	retlw	0
  3994  0567  3477               	retlw	119
  3995  0568  34C1               	retlw	193
  3996  0569  34B7               	retlw	183
  3997  056A  3481               	retlw	129
  3998  056B  34B6               	retlw	182
  3999  056C  3440               	retlw	64
  4000  056D  3476               	retlw	118
  4001  056E  3400               	retlw	0
  4002  056F  3472               	retlw	114
  4003  0570  34C1               	retlw	193
  4004  0571  34B2               	retlw	178
  4005  0572  3481               	retlw	129
  4006  0573  34B3               	retlw	179
  4007  0574  3440               	retlw	64
  4008  0575  3473               	retlw	115
  4009  0576  3401               	retlw	1
  4010  0577  34B1               	retlw	177
  4011  0578  34C0               	retlw	192
  4012  0579  3471               	retlw	113
  4013  057A  3480               	retlw	128
  4014  057B  3470               	retlw	112
  4015  057C  3441               	retlw	65
  4016  057D  34B0               	retlw	176
  4017  057E  3400               	retlw	0
  4018  057F  3450               	retlw	80
  4019  0580  34C1               	retlw	193
  4020  0581  3490               	retlw	144
  4021  0582  3481               	retlw	129
  4022  0583  3491               	retlw	145
  4023  0584  3440               	retlw	64
  4024  0585  3451               	retlw	81
  4025  0586  3401               	retlw	1
  4026  0587  3493               	retlw	147
  4027  0588  34C0               	retlw	192
  4028  0589  3453               	retlw	83
  4029  058A  3480               	retlw	128
  4030  058B  3452               	retlw	82
  4031  058C  3441               	retlw	65
  4032  058D  3492               	retlw	146
  4033  058E  3401               	retlw	1
  4034  058F  3496               	retlw	150
  4035  0590  34C0               	retlw	192
  4036  0591  3456               	retlw	86
  4037  0592  3480               	retlw	128
  4038  0593  3457               	retlw	87
  4039  0594  3441               	retlw	65
  4040  0595  3497               	retlw	151
  4041  0596  3400               	retlw	0
  4042  0597  3455               	retlw	85
  4043  0598  34C1               	retlw	193
  4044  0599  3495               	retlw	149
  4045  059A  3481               	retlw	129
  4046  059B  3494               	retlw	148
  4047  059C  3440               	retlw	64
  4048  059D  3454               	retlw	84
  4049  059E  3401               	retlw	1
  4050  059F  349C               	retlw	156
  4051  05A0  34C0               	retlw	192
  4052  05A1  345C               	retlw	92
  4053  05A2  3480               	retlw	128
  4054  05A3  345D               	retlw	93
  4055  05A4  3441               	retlw	65
  4056  05A5  349D               	retlw	157
  4057  05A6  3400               	retlw	0
  4058  05A7  345F               	retlw	95
  4059  05A8  34C1               	retlw	193
  4060  05A9  349F               	retlw	159
  4061  05AA  3481               	retlw	129
  4062  05AB  349E               	retlw	158
  4063  05AC  3440               	retlw	64
  4064  05AD  345E               	retlw	94
  4065  05AE  3400               	retlw	0
  4066  05AF  345A               	retlw	90
  4067  05B0  34C1               	retlw	193
  4068  05B1  349A               	retlw	154
  4069  05B2  3481               	retlw	129
  4070  05B3  349B               	retlw	155
  4071  05B4  3440               	retlw	64
  4072  05B5  345B               	retlw	91
  4073  05B6  3401               	retlw	1
  4074  05B7  3499               	retlw	153
  4075  05B8  34C0               	retlw	192
  4076  05B9  3459               	retlw	89
  4077  05BA  3480               	retlw	128
  4078  05BB  3458               	retlw	88
  4079  05BC  3441               	retlw	65
  4080  05BD  3498               	retlw	152
  4081  05BE  3401               	retlw	1
  4082  05BF  3488               	retlw	136
  4083  05C0  34C0               	retlw	192
  4084  05C1  3448               	retlw	72
  4085  05C2  3480               	retlw	128
  4086  05C3  3449               	retlw	73
  4087  05C4  3441               	retlw	65
  4088  05C5  3489               	retlw	137
  4089  05C6  3400               	retlw	0
  4090  05C7  344B               	retlw	75
  4091  05C8  34C1               	retlw	193
  4092  05C9  348B               	retlw	139
  4093  05CA  3481               	retlw	129
  4094  05CB  348A               	retlw	138
  4095  05CC  3440               	retlw	64
  4096  05CD  344A               	retlw	74
  4097  05CE  3400               	retlw	0
  4098  05CF  344E               	retlw	78
  4099  05D0  34C1               	retlw	193
  4100  05D1  348E               	retlw	142
  4101  05D2  3481               	retlw	129
  4102  05D3  348F               	retlw	143
  4103  05D4  3440               	retlw	64
  4104  05D5  344F               	retlw	79
  4105  05D6  3401               	retlw	1
  4106  05D7  348D               	retlw	141
  4107  05D8  34C0               	retlw	192
  4108  05D9  344D               	retlw	77
  4109  05DA  3480               	retlw	128
  4110  05DB  344C               	retlw	76
  4111  05DC  3441               	retlw	65
  4112  05DD  348C               	retlw	140
  4113  05DE  3400               	retlw	0
  4114  05DF  3444               	retlw	68
  4115  05E0  34C1               	retlw	193
  4116  05E1  3484               	retlw	132
  4117  05E2  3481               	retlw	129
  4118  05E3  3485               	retlw	133
  4119  05E4  3440               	retlw	64
  4120  05E5  3445               	retlw	69
  4121  05E6  3401               	retlw	1
  4122  05E7  3487               	retlw	135
  4123  05E8  34C0               	retlw	192
  4124  05E9  3447               	retlw	71
  4125  05EA  3480               	retlw	128
  4126  05EB  3446               	retlw	70
  4127  05EC  3441               	retlw	65
  4128  05ED  3486               	retlw	134
  4129  05EE  3401               	retlw	1
  4130  05EF  3482               	retlw	130
  4131  05F0  34C0               	retlw	192
  4132  05F1  3442               	retlw	66
  4133  05F2  3480               	retlw	128
  4134  05F3  3443               	retlw	67
  4135  05F4  3441               	retlw	65
  4136  05F5  3483               	retlw	131
  4137  05F6  3400               	retlw	0
  4138  05F7  3441               	retlw	65
  4139  05F8  34C1               	retlw	193
  4140  05F9  3481               	retlw	129
  4141  05FA  3481               	retlw	129
  4142  05FB  3480               	retlw	128
  4143  05FC  3440               	retlw	64
  4144  05FD  3440               	retlw	64
  4145  05FE                     __end_of__CRCTable:	
  4146                           
  4147                           	psect	stringtext2
  4148  1800                     __pstringtext2:	
  4149  1800                     __canConfig:	
  4150  1800  3400               	retlw	0
  4151  1801  3400               	retlw	0
  4152  1802  34FF               	retlw	255
  4153  1803  3400               	retlw	0
  4154  1804  3407               	retlw	7
  4155  1805  34E3               	retlw	227
  4156  1806  34FF               	retlw	255
  4157  1807  34FF               	retlw	255
  4158  1808  3400               	retlw	0
  4159  1809  3408               	retlw	8
  4160  180A  3480               	retlw	128
  4161  180B  3400               	retlw	0
  4162  180C  3400               	retlw	0
  4163  180D  3408               	retlw	8
  4164  180E  3455               	retlw	85
  4165  180F  3400               	retlw	0
  4166  1810  3400               	retlw	0
  4167  1811  3408               	retlw	8
  4168  1812  3480               	retlw	128
  4169  1813  3400               	retlw	0
  4170  1814  3407               	retlw	7
  4171  1815  34EB               	retlw	235
  4172  1816  3420               	retlw	32
  4173  1817  3480               	retlw	128
  4174  1818  3402               	retlw	2
  4175  1819  34A9               	retlw	169
  4176  181A  3455               	retlw	85
  4177  181B  3496               	retlw	150
  4178  181C  3402               	retlw	2
  4179  181D  34A9               	retlw	169
  4180  181E  3455               	retlw	85
  4181  181F  34B6               	retlw	182
  4182  1820                     __end_of__canConfig:	
  4183  0014                     _TRISCbits	set	20
  4184  0018                     _LATAbits	set	24
  4185  0017                     _TRISF	set	23
  4186  001D                     _LATF	set	29
  4187  0016                     _TRISE	set	22
  4188  001C                     _LATE	set	28
  4189  0015                     _TRISD	set	21
  4190  0014                     _TRISC	set	20
  4191  001A                     _LATC	set	26
  4192  0013                     _TRISB	set	19
  4193  0019                     _LATB	set	25
  4194  0012                     _TRISA	set	18
  4195  0018                     _LATA	set	24
  4196  000B                     _INTCONbits	set	11
  4197  0013                     _TRISBbits	set	19
  4198  000E                     _PORTCbits	set	14
  4199  0019                     _LATBbits	set	25
  4200  001B                     _LATD	set	27
  4201  011B                     _SP1BRG	set	283
  4202  0119                     _RCREG1	set	281
  4203  011D                     _RCSTA1bits	set	285
  4204  011A                     _TXREG1	set	282
  4205  011E                     _TXSTA1bits	set	286
  4206  011E                     _TX1STA	set	286
  4207  011D                     _RC1STA	set	285
  4208  011C                     _SP1BRGH	set	284
  4209  011F                     _BAUD1CON	set	287
  4210  018F                     _SSP1STATbits	set	399
  4211  018C                     _SSP1BUF	set	396
  4212  018F                     _SSP1STAT	set	399
  4213  0190                     _SSP1CON1	set	400
  4214  020C                     _TMR1	set	524
  4215  020E                     _T1CON	set	526
  4216  0211                     _T1CLK	set	529
  4217  020E                     _T1CONbits	set	526
  4218  028D                     _PR2	set	653
  4219  028E                     _T2CONbits	set	654
  4220  059C                     _TMR0L	set	1436
  4221  059D                     _TMR0H	set	1437
  4222  059E                     _T0CON0	set	1438
  4223  059F                     _T0CON1	set	1439
  4224  0719                     _PIE3bits	set	1817
  4225  0716                     _PIE0bits	set	1814
  4226  070C                     _PIR0bits	set	1804
  4227  3864                     _IOCIF	set	14436
  4228  38B4                     _IOCIE	set	14516
  4229  38CD                     _RC1IE	set	14541
  4230  387D                     _RC1IF	set	14461
  4231  38CC                     _TX1IE	set	14540
  4232  387C                     _TX1IF	set	14460
  4233  3880                     _TMR1IF	set	14464
  4234  3881                     _TMR2IF	set	14465
  4235  38D1                     _TMR2IE	set	14545
  4236  38D0                     _TMR1IE	set	14544
  4237  079B                     _PMD5	set	1947
  4238  079A                     _PMD4	set	1946
  4239  0799                     _PMD3	set	1945
  4240  0798                     _PMD2	set	1944
  4241  088C                     _CPUDOZEbits	set	2188
  4242  1E50                     _ANSELF	set	7760
  4243  1EC6                     _SSP1DATPPS	set	7878
  4244  1ECB                     _RX1DTPPS	set	7883
  4245  1F55                     _IOCCFbits	set	8021
  4246  1F55                     _IOCCF	set	8021
  4247  1F54                     _IOCCN	set	8020
  4248  1F1B                     _RB3PPS	set	7963
  4249  1F19                     _RB1PPS	set	7961
  4250  1F27                     _RC7PPS	set	7975
  4251  1F64                     _ANSELE	set	8036
  4252  1F59                     _ANSELD	set	8025
  4253  1F4F                     _WPUC	set	8015
  4254  1F4E                     _ANSELC	set	8014
  4255  1F44                     _WPUB	set	8004
  4256  1F43                     _ANSELB	set	8003
  4257  1F38                     _ANSELA	set	7992
  4258                           
  4259                           ; #config settings
  4260  0000                     
  4261                           	psect	cinit
  4262  0068                     start_initialization:	
  4263  0068                     __initialization:		;BIGRAM
  4264                           
  4265                           ; Initialize objects allocated to BANK1
  4266  0068  0141               	movlb	1	; select bank1
  4267  0069  3190  202F  3180   	fcall	__pidataBANK1	;fetch initializer
  4268  006C  00ED               	movwf	__pdataBANK1& (0+127)
  4269  006D  3190  2030  3180   	fcall	__pidataBANK1+1	;fetch initializer
  4270  0070  00EE               	movwf	(__pdataBANK1+1)& (0+127)
  4271  0071  3190  2031  3180   	fcall	__pidataBANK1+2	;fetch initializer
  4272  0074  00EF               	movwf	(__pdataBANK1+2)& (0+127)
  4273                           
  4274                           ; Initialize objects allocated to BANK2
  4275  0075  306D               	movlw	low __pidataBANK2
  4276  0076  0084               	movwf	4
  4277  0077  3090               	movlw	(high __pidataBANK2)| (0+128)
  4278  0078  0085               	movwf	5
  4279  0079  305F               	movlw	low __pdataBANK2
  4280  007A  0086               	movwf	6
  4281  007B  3001               	movlw	high __pdataBANK2
  4282  007C  0087               	movwf	7
  4283  007D  3000               	movlw	0
  4284  007E  00FF               	movwf	btemp+1
  4285  007F  300F               	movlw	15
  4286  0080  3187  27F2  3180   	fcall	init_ram
  4287                           
  4288                           ; Initialize objects allocated to BANK3
  4289  0083  303D               	movlw	low __pidataBANK3
  4290  0084  0084               	movwf	4
  4291  0085  3092               	movlw	(high __pidataBANK3)| (0+128)
  4292  0086  0085               	movwf	5
  4293  0087  30CA               	movlw	low __pdataBANK3
  4294  0088  0086               	movwf	6
  4295  0089  3001               	movlw	high __pdataBANK3
  4296  008A  0087               	movwf	7
  4297  008B  3000               	movlw	0
  4298  008C  00FF               	movwf	btemp+1
  4299  008D  301C               	movlw	28
  4300  008E  3187  27F2  3180   	fcall	init_ram
  4301                           
  4302                           ; Clear objects allocated to BIGRAM
  4303  0091  304C               	movlw	low (0+9804)
  4304  0092  0084               	movwf	4
  4305  0093  3026               	movlw	high (0+9804)
  4306  0094  0085               	movwf	5
  4307  0095  30A4               	movlw	164
  4308  0096  00FE               	movwf	btemp
  4309  0097  3001               	movlw	1
  4310  0098  00FF               	movwf	btemp+1
  4311  0099  3190  2052  3180   	fcall	clear_ram0
  4312                           
  4313                           ; Clear objects allocated to BANK0
  4314  009C  304E               	movlw	low __pbssBANK0
  4315  009D  0084               	movwf	4
  4316  009E  3000               	movlw	high __pbssBANK0
  4317  009F  0085               	movwf	5
  4318  00A0  3011               	movlw	17
  4319  00A1  00FE               	movwf	btemp
  4320  00A2  3000               	movlw	0
  4321  00A3  00FF               	movwf	btemp+1
  4322  00A4  3190  2052  3180   	fcall	clear_ram0
  4323                           
  4324                           ; Clear objects allocated to BANK1
  4325  00A7  30A0               	movlw	low __pbssBANK1
  4326  00A8  0084               	movwf	4
  4327  00A9  3000               	movlw	high __pbssBANK1
  4328  00AA  0085               	movwf	5
  4329  00AB  3049               	movlw	73
  4330  00AC  00FE               	movwf	btemp
  4331  00AD  3000               	movlw	0
  4332  00AE  00FF               	movwf	btemp+1
  4333  00AF  3190  2052  3180   	fcall	clear_ram0
  4334                           
  4335                           ; Clear objects allocated to BANK2
  4336  00B2  3020               	movlw	low __pbssBANK2
  4337  00B3  0084               	movwf	4
  4338  00B4  3001               	movlw	high __pbssBANK2
  4339  00B5  0085               	movwf	5
  4340  00B6  303F               	movlw	63
  4341  00B7  00FE               	movwf	btemp
  4342  00B8  3000               	movlw	0
  4343  00B9  00FF               	movwf	btemp+1
  4344  00BA  3190  2052  3180   	fcall	clear_ram0
  4345                           
  4346                           ; Clear objects allocated to BANK3
  4347  00BD  30A0               	movlw	low __pbssBANK3
  4348  00BE  0084               	movwf	4
  4349  00BF  3001               	movlw	high __pbssBANK3
  4350  00C0  0085               	movwf	5
  4351  00C1  302A               	movlw	42
  4352  00C2  00FE               	movwf	btemp
  4353  00C3  3000               	movlw	0
  4354  00C4  00FF               	movwf	btemp+1
  4355  00C5  3190  2052  3180   	fcall	clear_ram0
  4356                           
  4357                           ; Clear objects allocated to BANK4
  4358  00C8  3020               	movlw	low __pbssBANK4
  4359  00C9  0084               	movwf	4
  4360  00CA  3002               	movlw	high __pbssBANK4
  4361  00CB  0085               	movwf	5
  4362  00CC  301B               	movlw	27
  4363  00CD  00FE               	movwf	btemp
  4364  00CE  3000               	movlw	0
  4365  00CF  00FF               	movwf	btemp+1
  4366  00D0  3190  2052         	fcall	clear_ram0
  4367  00D2                     end_of_initialization:	
  4368                           ;End of C runtime variable initialization code
  4369                           
  4370  00D2                     __end_of__initialization:	
  4371  00D2  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4372  00D3  0140               	movlb	0
  4373  00D4  3193  2B69         	ljmp	_main	;jump to C main() function
  4374                           
  4375                           	psect	bssBANK0
  4376  004E                     __pbssBANK0:	
  4377  004E                     _LED_column_array:	
  4378  004E                     	ds	5
  4379  0053                     _SYSTEM_tick:	
  4380  0053                     	ds	4
  4381  0057                     _SW_row:	
  4382  0057                     	ds	1
  4383  0058                     _button_column_4:	
  4384  0058                     	ds	1
  4385  0059                     _button_column_3:	
  4386  0059                     	ds	1
  4387  005A                     _button_column_2:	
  4388  005A                     	ds	1
  4389  005B                     _button_column_1:	
  4390  005B                     	ds	1
  4391  005C                     _EUSART_Rx_head:	
  4392  005C                     	ds	1
  4393  005D                     _EUSART_Tx_tail:	
  4394  005D                     	ds	1
  4395  005E                     __canMode:	
  4396  005E                     	ds	1
  4397                           
  4398                           	psect	bssBANK1
  4399  00A0                     __pbssBANK1:	
  4400  00A0                     _EUSART_packet_data:	
  4401  00A0                     	ds	27
  4402  00BB                     _j1939tp_rxbuf:	
  4403  00BB                     	ds	18
  4404  00CD                     _EUSART_slave_bad_response:	
  4405  00CD                     	ds	2
  4406  00CF                     direction_message_task@direction_state:	
  4407  00CF                     	ds	1
  4408  00D0                     led_task@LED_row:	
  4409  00D0                     	ds	1
  4410  00D1                     test_clock_rollover@counter:	
  4411  00D1                     	ds	1
  4412  00D2                     _machine_direction:	
  4413  00D2                     	ds	1
  4414  00D3                     _button_flag:	
  4415  00D3                     	ds	1
  4416  00D4                     _person_on_machine_flag:	
  4417  00D4                     	ds	1
  4418  00D5                     _button_7:	
  4419  00D5                     	ds	1
  4420  00D6                     _button_6:	
  4421  00D6                     	ds	1
  4422  00D7                     _button_5:	
  4423  00D7                     	ds	1
  4424  00D8                     _CAN_ID_switch:	
  4425  00D8                     	ds	1
  4426  00D9                     _EUSART_receive_flag:	
  4427  00D9                     	ds	1
  4428  00DA                     _EUSART_send_data_flag:	
  4429  00DA                     	ds	1
  4430  00DB                     _EUSART_Rx_checksum_error:	
  4431  00DB                     	ds	1
  4432  00DC                     _EUSART_Rx_checksum:	
  4433  00DC                     	ds	1
  4434  00DD                     _EUSART_Tx_checksum:	
  4435  00DD                     	ds	1
  4436  00DE                     _EUSART_packet_checksum:	
  4437  00DE                     	ds	1
  4438  00DF                     _EUSART_Rx_parity_error:	
  4439  00DF                     	ds	1
  4440  00E0                     _EUSART_byte_parity:	
  4441  00E0                     	ds	1
  4442  00E1                     _EUSART_parity_count:	
  4443  00E1                     	ds	1
  4444  00E2                     _current_address_ID:	
  4445  00E2                     	ds	1
  4446  00E3                     _EUSART_Rx_count:	
  4447  00E3                     	ds	1
  4448  00E4                     _EUSART_Rx_tail:	
  4449  00E4                     	ds	1
  4450  00E5                     _EUSART_Tx_buffer_remaining:	
  4451  00E5                     	ds	1
  4452  00E6                     _EUSART_Tx_head:	
  4453  00E6                     	ds	1
  4454  00E7                     _transportState:	
  4455  00E7                     	ds	1
  4456  00E8                     _j1939_sa:	
  4457  00E8                     	ds	1
  4458                           
  4459                           	psect	dataBANK1
  4460  00ED                     __pdataBANK1:	
  4461  00ED                     blink_forward_led@toggle:	
  4462  00ED                     	ds	1
  4463  00EE                     __numLedRows:	
  4464  00EE                     	ds	1
  4465  00EF                     _j1939_address_claim_was_successful:	
  4466  00EF                     	ds	1
  4467                           
  4468                           	psect	bssBANK2
  4469  0120                     __pbssBANK2:	
  4470  0120                     _LED_row_array:	
  4471  0120                     	ds	5
  4472  0125                     blink_forward_led@tick:	
  4473  0125                     	ds	4
  4474  0129                     transmit_can_message_task@sendSwitchesTimer:	
  4475  0129                     	ds	4
  4476  012D                     power_down_task@power_down_tick:	
  4477  012D                     	ds	4
  4478  0131                     direction_message_task@direction_tick:	
  4479  0131                     	ds	4
  4480  0135                     handle_can_messages_from_VCU@can_tick:	
  4481  0135                     	ds	4
  4482  0139                     led_task@led_tick:	
  4483  0139                     	ds	4
  4484  013D                     button_task@button_tick:	
  4485  013D                     	ds	4
  4486  0141                     test_clock_rollover@rollover_tick:	
  4487  0141                     	ds	4
  4488  0145                     _MCP2515_diag:	
  4489  0145                     	ds	12
  4490  0151                     _LED_COL:	
  4491  0151                     	ds	5
  4492  0156                     __enableInputState:	
  4493  0156                     	ds	3
  4494  0159                     __faultInputState:	
  4495  0159                     	ds	3
  4496  015C                     __extraSwitchState:	
  4497  015C                     	ds	3
  4498                           
  4499                           	psect	dataBANK2
  4500  015F                     __pdataBANK2:	
  4501  015F                     _LED_ROW_PORTA:	
  4502  015F                     	ds	5
  4503  0164                     _SW_ROW_PORTD:	
  4504  0164                     	ds	5
  4505  0169                     _SW_ROW_ARRAY:	
  4506  0169                     	ds	5
  4507                           
  4508                           	psect	bssBANK3
  4509  01A0                     __pbssBANK3:	
  4510  01A0                     _EUSART_Rx_buffer:	
  4511  01A0                     	ds	27
  4512  01BB                     __switchStates:	
  4513  01BB                     	ds	15
  4514                           
  4515                           	psect	dataBANK3
  4516  01CA                     __pdataBANK3:	
  4517  01CA                     _test_send_message:	
  4518  01CA                     	ds	14
  4519  01D8                     _can_send_message:	
  4520  01D8                     	ds	14
  4521                           
  4522                           	psect	bssBANK4
  4523  0220                     __pbssBANK4:	
  4524  0220                     _EUSART_Tx_buffer:	
  4525  0220                     	ds	27
  4526                           
  4527                           	psect	inittext
  4528  07F2                     init_ram:	
  4529  07F2  00FE               	movwf	126
  4530  07F3                     initloop:	
  4531  07F3  0012               	moviw fsr0++
  4532  07F4  001E               	movwi fsr1++
  4533  07F5  3001               	movlw	1
  4534  07F6  02FE               	subwf	126,f
  4535  07F7  3000               	movlw	0
  4536  07F8  3BFF               	subwfb	127,f
  4537  07F9  087F               	movf	127,w
  4538  07FA  047E               	iorwf	126,w
  4539  07FB  1903               	btfsc	3,2
  4540  07FC  3400               	retlw	0
  4541  07FD  2FF3               	goto	initloop
  4542                           
  4543                           	psect	clrtext
  4544  1052                     clear_ram0:	
  4545                           ;	Called with FSR0 containing the base address, and
  4546                           ;	btemp/btemp+1 has the size to clear
  4547                           
  4548  1052  0064               	clrwdt	;clear the watchdog before getting into this loop
  4549  1053                     clrloop0:	
  4550  1053  0180               	clrf	0	;clear RAM location pointed to by FSR
  4551  1054  3101               	addfsr 0,1
  4552  1055  3001               	movlw	1
  4553  1056  02FE               	subwf	126,f
  4554  1057  3000               	movlw	0
  4555  1058  3BFF               	subwfb	127,f
  4556  1059  087F               	movf	127,w
  4557  105A  047E               	iorwf	126,w
  4558  105B  1903               	btfsc	3,2
  4559  105C  3400               	retlw	0	;all done for this memory range, return
  4560  105D  2853               	goto	clrloop0	;have we reached the end yet?
  4561                           
  4562                           	psect	cstackBANK4
  4563  023B                     __pcstackBANK4:	
  4564  023B                     CAN_TxMailbox@result:	
  4565  023B                     Receive_CAN_Message@result:	
  4566                           ; 1 bytes @ 0x0
  4567                           
  4568  023B                     CAN_Initialize@buf:	
  4569                           ; 1 bytes @ 0x0
  4570                           
  4571                           
  4572                           ; 5 bytes @ 0x0
  4573  023B                     	ds	1
  4574  023C                     CAN_TxMailbox@txBufCtrlAddress:	
  4575  023C                     Receive_CAN_Message@can:	
  4576                           ; 1 bytes @ 0x1
  4577                           
  4578                           
  4579                           ; 14 bytes @ 0x1
  4580  023C                     	ds	1
  4581  023D                     CAN_TxMailbox@bufStatus:	
  4582                           
  4583                           ; 1 bytes @ 0x2
  4584  023D                     	ds	1
  4585  023E                     CAN_TxMailbox@buf:	
  4586                           
  4587                           ; 13 bytes @ 0x3
  4588  023E                     	ds	2
  4589  0240                     CAN_Initialize@wait:	
  4590                           
  4591                           ; 2 bytes @ 0x5
  4592  0240                     	ds	2
  4593  0242                     CAN_Initialize@bResult:	
  4594                           
  4595                           ; 1 bytes @ 0x7
  4596  0242                     	ds	1
  4597  0243                     CAN_Initialize@p:	
  4598                           
  4599                           ; 2 bytes @ 0x8
  4600  0243                     	ds	2
  4601  0245                     CAN_Initialize@temp8:	
  4602                           
  4603                           ; 1 bytes @ 0xA
  4604  0245                     	ds	6
  4605  024B                     ??_transmit_can_message_task:	
  4606                           
  4607                           ; 1 bytes @ 0x10
  4608  024B                     	ds	8
  4609                           
  4610                           	psect	cstackBANK3
  4611  01E6                     __pcstackBANK3:	
  4612  01E6                     ??_handle_can_messages_from_VCU:	
  4613  01E6                     ??_power_down_task:	
  4614                           ; 1 bytes @ 0x0
  4615                           
  4616  01E6                     ??__EnqueueTxMessage:	
  4617                           ; 1 bytes @ 0x0
  4618                           
  4619                           
  4620                           ; 1 bytes @ 0x0
  4621  01E6                     	ds	6
  4622  01EC                     ??_CAN_Tx:	
  4623                           
  4624                           ; 1 bytes @ 0x6
  4625  01EC                     	ds	4
  4626                           
  4627                           	psect	cstackBANK1
  4628  00E9                     __pcstackBANK1:	
  4629  00E9                     ?_CAN_Tx:	
  4630  00E9                     CAN_Tx@pFrame:	
  4631                           ; 1 bytes @ 0x0
  4632                           
  4633                           
  4634                           ; 2 bytes @ 0x0
  4635  00E9                     	ds	2
  4636  00EB                     main@LED_row:	
  4637                           
  4638                           ; 2 bytes @ 0x2
  4639  00EB                     	ds	2
  4640                           
  4641                           	psect	cstackCOMMON
  4642  0070                     __pcstackCOMMON:	
  4643  0070                     ?_SPI1_Put:	
  4644  0070                     ?_SPI1_Initialize:	
  4645                           ; 1 bytes @ 0x0
  4646                           
  4647  0070                     ?_CAN_To_EUSART:	
  4648                           ; 1 bytes @ 0x0
  4649                           
  4650  0070                     ?_EUSART_Initialize:	
  4651                           ; 1 bytes @ 0x0
  4652                           
  4653  0070                     ?_SYSTEM_Wakeup:	
  4654                           ; 1 bytes @ 0x0
  4655                           
  4656  0070                     ?_SYSTEM_Initialize:	
  4657                           ; 1 bytes @ 0x0
  4658                           
  4659  0070                     ?_Buttons_Initialize:	
  4660                           ; 1 bytes @ 0x0
  4661                           
  4662  0070                     ?_LED_Initialize:	
  4663                           ; 1 bytes @ 0x0
  4664                           
  4665  0070                     ?_button_task:	
  4666                           ; 1 bytes @ 0x0
  4667                           
  4668  0070                     ?_led_task:	
  4669                           ; 1 bytes @ 0x0
  4670                           
  4671  0070                     ?_update_graphics:	
  4672                           ; 1 bytes @ 0x0
  4673                           
  4674  0070                     ?_handle_can_messages_from_VCU:	
  4675                           ; 1 bytes @ 0x0
  4676                           
  4677  0070                     ?_transmit_can_message_task:	
  4678                           ; 1 bytes @ 0x0
  4679                           
  4680  0070                     ?_direction_message_task:	
  4681                           ; 1 bytes @ 0x0
  4682                           
  4683  0070                     ?_power_down_task:	
  4684                           ; 1 bytes @ 0x0
  4685                           
  4686  0070                     ?_SYSTEM_Sleep:	
  4687                           ; 1 bytes @ 0x0
  4688                           
  4689  0070                     ?_EUSART_Master_Request:	
  4690                           ; 1 bytes @ 0x0
  4691                           
  4692  0070                     ?_EUSART_Receive:	
  4693                           ; 1 bytes @ 0x0
  4694                           
  4695  0070                     ?_EUSART_TO_CAN:	
  4696                           ; 1 bytes @ 0x0
  4697                           
  4698  0070                     ?_Button_Debounce:	
  4699                           ; 1 bytes @ 0x0
  4700                           
  4701  0070                     ?_Get_Settings_Lock_Status:	
  4702                           ; 1 bytes @ 0x0
  4703                           
  4704  0070                     ?_EUSART_Parity_Count:	
  4705                           ; 1 bytes @ 0x0
  4706                           
  4707  0070                     ??_EUSART_Parity_Count:	
  4708                           ; 1 bytes @ 0x0
  4709                           
  4710  0070                     ?__SetMode:	
  4711                           ; 1 bytes @ 0x0
  4712                           
  4713  0070                     ?_CAN_Sleep:	
  4714                           ; 1 bytes @ 0x0
  4715                           
  4716  0070                     ?_CAN_Wakeup:	
  4717                           ; 1 bytes @ 0x0
  4718                           
  4719  0070                     ?_Receive_CAN_Message:	
  4720                           ; 1 bytes @ 0x0
  4721                           
  4722  0070                     ?_MCP2515_ISR:	
  4723                           ; 1 bytes @ 0x0
  4724                           
  4725  0070                     ?__Wakeup:	
  4726                           ; 1 bytes @ 0x0
  4727                           
  4728  0070                     ?_main:	
  4729                           ; 1 bytes @ 0x0
  4730                           
  4731  0070                     ?_EUSART_Transmit_ISR:	
  4732                           ; 1 bytes @ 0x0
  4733                           
  4734  0070                     ?_EUSART_Receive_ISR:	
  4735                           ; 1 bytes @ 0x0
  4736                           
  4737  0070                     ?_tc_int:	
  4738                           ; 1 bytes @ 0x0
  4739                           
  4740  0070                     ?i1_SPI1_Put:	
  4741                           ; 1 bytes @ 0x0
  4742                           
  4743  0070                     ??i1_SPI1_Put:	
  4744                           ; 1 bytes @ 0x0
  4745                           
  4746  0070                     ?i1_SPI1_PutBuffer:	
  4747                           ; 1 bytes @ 0x0
  4748                           
  4749  0070                     ?i1_SPI1_GetBuffer:	
  4750                           ; 1 bytes @ 0x0
  4751                           
  4752  0070                     ?i1___wmul:	
  4753                           ; 1 bytes @ 0x0
  4754                           
  4755  0070                     i1SPI1_Put@c:	
  4756                           ; 2 bytes @ 0x0
  4757                           
  4758  0070                     i1SPI1_PutBuffer@pBuf:	
  4759                           ; 1 bytes @ 0x0
  4760                           
  4761  0070                     i1SPI1_GetBuffer@pBuf:	
  4762                           ; 2 bytes @ 0x0
  4763                           
  4764  0070                     i1___wmul@multiplier:	
  4765                           ; 2 bytes @ 0x0
  4766                           
  4767                           
  4768                           ; 2 bytes @ 0x0
  4769  0070                     	ds	1
  4770  0071                     ?i1__Modify:	
  4771  0071                     EUSART_Parity_Count@EUSART_byte_parity:	
  4772                           ; 1 bytes @ 0x1
  4773                           
  4774  0071                     i1__Modify@mask:	
  4775                           ; 1 bytes @ 0x1
  4776                           
  4777                           
  4778                           ; 1 bytes @ 0x1
  4779  0071                     	ds	1
  4780  0072                     i1__Modify@value:	
  4781  0072                     i1SPI1_PutBuffer@count:	
  4782                           ; 1 bytes @ 0x2
  4783                           
  4784  0072                     i1SPI1_GetBuffer@count:	
  4785                           ; 1 bytes @ 0x2
  4786                           
  4787  0072                     EUSART_Parity_Count@i:	
  4788                           ; 1 bytes @ 0x2
  4789                           
  4790  0072                     i1___wmul@multiplicand:	
  4791                           ; 2 bytes @ 0x2
  4792                           
  4793                           
  4794                           ; 2 bytes @ 0x2
  4795  0072                     	ds	1
  4796  0073                     ?__RxCommand:	
  4797  0073                     ?i1__Read:	
  4798                           ; 1 bytes @ 0x3
  4799                           
  4800  0073                     ?i1__Write:	
  4801                           ; 1 bytes @ 0x3
  4802                           
  4803  0073                     ??i1__Modify:	
  4804                           ; 1 bytes @ 0x3
  4805                           
  4806  0073                     ??i1_SPI1_PutBuffer:	
  4807                           ; 1 bytes @ 0x3
  4808                           
  4809  0073                     ??i1_SPI1_GetBuffer:	
  4810                           ; 1 bytes @ 0x3
  4811                           
  4812  0073                     __RxCommand@p:	
  4813                           ; 1 bytes @ 0x3
  4814                           
  4815  0073                     i1__Modify@reg:	
  4816                           ; 1 bytes @ 0x3
  4817                           
  4818  0073                     i1__Read@pBuf:	
  4819                           ; 1 bytes @ 0x3
  4820                           
  4821  0073                     i1__Write@pBuf:	
  4822                           ; 2 bytes @ 0x3
  4823                           
  4824                           
  4825                           ; 2 bytes @ 0x3
  4826  0073                     	ds	1
  4827  0074                     ??_EUSART_Transmit_ISR:	
  4828  0074                     ??_EUSART_Receive_ISR:	
  4829                           ; 1 bytes @ 0x4
  4830                           
  4831  0074                     ??i1___wmul:	
  4832                           ; 1 bytes @ 0x4
  4833                           
  4834  0074                     __RxCommand@count:	
  4835                           ; 1 bytes @ 0x4
  4836                           
  4837  0074                     i1___wmul@product:	
  4838                           ; 1 bytes @ 0x4
  4839                           
  4840                           
  4841                           ; 2 bytes @ 0x4
  4842  0074                     	ds	1
  4843  0075                     ??__RxCommand:	
  4844  0075                     i1__Read@count:	
  4845                           ; 1 bytes @ 0x5
  4846                           
  4847  0075                     i1__Write@count:	
  4848                           ; 1 bytes @ 0x5
  4849                           
  4850                           
  4851                           ; 1 bytes @ 0x5
  4852  0075                     	ds	1
  4853  0076                     ??i1__Read:	
  4854  0076                     ??i1__Write:	
  4855                           ; 1 bytes @ 0x6
  4856                           
  4857  0076                     __RxCommand@cmd:	
  4858                           ; 1 bytes @ 0x6
  4859                           
  4860                           
  4861                           ; 1 bytes @ 0x6
  4862  0076                     	ds	1
  4863  0077                     __RxCommand@pBuf:	
  4864  0077                     i1__Read@reg:	
  4865                           ; 1 bytes @ 0x7
  4866                           
  4867  0077                     i1__Write@reg:	
  4868                           ; 1 bytes @ 0x7
  4869                           
  4870                           
  4871                           ; 1 bytes @ 0x7
  4872  0077                     	ds	1
  4873  0078                     ?i1__SendBuffer:	
  4874  0078                     i1__SendBuffer@pBuf:	
  4875                           ; 1 bytes @ 0x8
  4876                           
  4877                           
  4878                           ; 2 bytes @ 0x8
  4879  0078                     	ds	2
  4880  007A                     ??i1__SendBuffer:	
  4881                           
  4882                           ; 1 bytes @ 0xA
  4883  007A                     	ds	2
  4884  007C                     i1__SendBuffer@addr:	
  4885                           
  4886                           ; 1 bytes @ 0xC
  4887  007C                     	ds	1
  4888  007D                     tc_int@changed:	
  4889                           
  4890                           ; 1 bytes @ 0xD
  4891  007D                     	ds	1
  4892                           
  4893                           	psect	cstackBANK0
  4894  0020                     __pcstackBANK0:	
  4895  0020                     ??_MCP2515_ISR:	
  4896                           
  4897                           ; 1 bytes @ 0x0
  4898  0020                     	ds	6
  4899  0026                     MCP2515_ISR@pBuf:	
  4900                           
  4901                           ; 2 bytes @ 0x6
  4902  0026                     	ds	2
  4903  0028                     MCP2515_ISR@pBuf_580:	
  4904                           
  4905                           ; 2 bytes @ 0x8
  4906  0028                     	ds	2
  4907  002A                     MCP2515_ISR@pBuf_581:	
  4908                           
  4909                           ; 2 bytes @ 0xA
  4910  002A                     	ds	2
  4911  002C                     MCP2515_ISR@_intFlags2:	
  4912                           
  4913                           ; 1 bytes @ 0xC
  4914  002C                     	ds	1
  4915  002D                     MCP2515_ISR@_errFlags:	
  4916                           
  4917                           ; 1 bytes @ 0xD
  4918  002D                     	ds	1
  4919  002E                     MCP2515_ISR@_intFlags:	
  4920                           
  4921                           ; 1 bytes @ 0xE
  4922  002E                     	ds	1
  4923  002F                     ??_tc_int:	
  4924                           
  4925                           ; 1 bytes @ 0xF
  4926  002F                     	ds	2
  4927  0031                     ??_SPI1_Put:	
  4928  0031                     ?_SPI1_GetBuffer:	
  4929                           ; 1 bytes @ 0x11
  4930                           
  4931  0031                     ?_SPI1_PutBuffer:	
  4932                           ; 1 bytes @ 0x11
  4933                           
  4934  0031                     ?_memset:	
  4935                           ; 1 bytes @ 0x11
  4936                           
  4937  0031                     ??_SPI1_Initialize:	
  4938                           ; 1 bytes @ 0x11
  4939                           
  4940  0031                     ??_CAN_To_EUSART:	
  4941                           ; 1 bytes @ 0x11
  4942                           
  4943  0031                     ??_EUSART_Initialize:	
  4944                           ; 1 bytes @ 0x11
  4945                           
  4946  0031                     ??_SYSTEM_Initialize:	
  4947                           ; 1 bytes @ 0x11
  4948                           
  4949  0031                     ??_Buttons_Initialize:	
  4950                           ; 1 bytes @ 0x11
  4951                           
  4952  0031                     ??_LED_Initialize:	
  4953                           ; 1 bytes @ 0x11
  4954                           
  4955  0031                     ??_direction_message_task:	
  4956                           ; 1 bytes @ 0x11
  4957                           
  4958  0031                     ?_Update_LEDs:	
  4959                           ; 1 bytes @ 0x11
  4960                           
  4961  0031                     ??_EUSART_Master_Request:	
  4962                           ; 1 bytes @ 0x11
  4963                           
  4964  0031                     ??_EUSART_Receive:	
  4965                           ; 1 bytes @ 0x11
  4966                           
  4967  0031                     ??_EUSART_TO_CAN:	
  4968                           ; 1 bytes @ 0x11
  4969                           
  4970  0031                     ??_Button_Debounce:	
  4971                           ; 1 bytes @ 0x11
  4972                           
  4973  0031                     ??_Get_Settings_Lock_Status:	
  4974                           ; 1 bytes @ 0x11
  4975                           
  4976  0031                     ?__RxBufferToMessage:	
  4977                           ; 1 bytes @ 0x11
  4978                           
  4979  0031                     ?__MessageToTxBuffer:	
  4980                           ; 1 bytes @ 0x11
  4981                           
  4982  0031                     ?___wmul:	
  4983                           ; 1 bytes @ 0x11
  4984                           
  4985  0031                     SPI1_Put@c:	
  4986                           ; 2 bytes @ 0x11
  4987                           
  4988  0031                     __RxBufferToMessage@p:	
  4989                           ; 1 bytes @ 0x11
  4990                           
  4991  0031                     __MessageToTxBuffer@pFrame:	
  4992                           ; 2 bytes @ 0x11
  4993                           
  4994  0031                     SPI1_PutBuffer@pBuf:	
  4995                           ; 2 bytes @ 0x11
  4996                           
  4997  0031                     SPI1_GetBuffer@pBuf:	
  4998                           ; 2 bytes @ 0x11
  4999                           
  5000  0031                     Update_LEDs@row:	
  5001                           ; 2 bytes @ 0x11
  5002                           
  5003  0031                     ___wmul@multiplier:	
  5004                           ; 2 bytes @ 0x11
  5005                           
  5006  0031                     memset@c:	
  5007                           ; 2 bytes @ 0x11
  5008                           
  5009                           
  5010                           ; 2 bytes @ 0x11
  5011  0031                     	ds	1
  5012  0032                     ?__Modify:	
  5013  0032                     __Modify@mask:	
  5014                           ; 1 bytes @ 0x12
  5015                           
  5016  0032                     Button_Debounce@i:	
  5017                           ; 1 bytes @ 0x12
  5018                           
  5019  0032                     EUSART_Master_Request@i:	
  5020                           ; 2 bytes @ 0x12
  5021                           
  5022                           
  5023                           ; 2 bytes @ 0x12
  5024  0032                     	ds	1
  5025  0033                     ??_Update_LEDs:	
  5026  0033                     __Modify@value:	
  5027                           ; 1 bytes @ 0x13
  5028                           
  5029  0033                     SPI1_PutBuffer@count:	
  5030                           ; 1 bytes @ 0x13
  5031                           
  5032  0033                     SPI1_GetBuffer@count:	
  5033                           ; 1 bytes @ 0x13
  5034                           
  5035  0033                     __RxBufferToMessage@pMsg:	
  5036                           ; 1 bytes @ 0x13
  5037                           
  5038  0033                     __MessageToTxBuffer@pBuf:	
  5039                           ; 2 bytes @ 0x13
  5040                           
  5041  0033                     EUSART_Receive@i:	
  5042                           ; 2 bytes @ 0x13
  5043                           
  5044  0033                     ___wmul@multiplicand:	
  5045                           ; 2 bytes @ 0x13
  5046                           
  5047  0033                     memset@n:	
  5048                           ; 2 bytes @ 0x13
  5049                           
  5050                           
  5051                           ; 2 bytes @ 0x13
  5052  0033                     	ds	1
  5053  0034                     ??_SPI1_GetBuffer:	
  5054  0034                     ??_SPI1_PutBuffer:	
  5055                           ; 1 bytes @ 0x14
  5056                           
  5057  0034                     ??_led_task:	
  5058                           ; 1 bytes @ 0x14
  5059                           
  5060  0034                     ?_Buttons_Update:	
  5061                           ; 1 bytes @ 0x14
  5062                           
  5063  0034                     ?__Read:	
  5064                           ; 1 bytes @ 0x14
  5065                           
  5066  0034                     ?__Write:	
  5067                           ; 1 bytes @ 0x14
  5068                           
  5069  0034                     ??__Modify:	
  5070                           ; 1 bytes @ 0x14
  5071                           
  5072  0034                     ?__TxCommand:	
  5073                           ; 1 bytes @ 0x14
  5074                           
  5075  0034                     __Modify@reg:	
  5076                           ; 1 bytes @ 0x14
  5077                           
  5078  0034                     __TxCommand@pBuf:	
  5079                           ; 1 bytes @ 0x14
  5080                           
  5081  0034                     Buttons_Update@switch_state:	
  5082                           ; 1 bytes @ 0x14
  5083                           
  5084  0034                     __Read@pBuf:	
  5085                           ; 1 bytes @ 0x14
  5086                           
  5087  0034                     __Write@pBuf:	
  5088                           ; 2 bytes @ 0x14
  5089                           
  5090                           
  5091                           ; 2 bytes @ 0x14
  5092  0034                     	ds	1
  5093  0035                     ??_memset:	
  5094  0035                     ??_Buttons_Update:	
  5095                           ; 1 bytes @ 0x15
  5096                           
  5097  0035                     ??__RxBufferToMessage:	
  5098                           ; 1 bytes @ 0x15
  5099                           
  5100  0035                     ??__MessageToTxBuffer:	
  5101                           ; 1 bytes @ 0x15
  5102                           
  5103  0035                     ??___wmul:	
  5104                           ; 1 bytes @ 0x15
  5105                           
  5106  0035                     __TxCommand@count:	
  5107                           ; 1 bytes @ 0x15
  5108                           
  5109  0035                     EUSART_TO_CAN@message:	
  5110                           ; 1 bytes @ 0x15
  5111                           
  5112  0035                     EUSART_Receive@i_1681:	
  5113                           ; 1 bytes @ 0x15
  5114                           
  5115  0035                     ___wmul@product:	
  5116                           ; 2 bytes @ 0x15
  5117                           
  5118                           
  5119                           ; 2 bytes @ 0x15
  5120  0035                     	ds	1
  5121  0036                     ??__TxCommand:	
  5122  0036                     __Read@count:	
  5123                           ; 1 bytes @ 0x16
  5124                           
  5125  0036                     __Write@count:	
  5126                           ; 1 bytes @ 0x16
  5127                           
  5128  0036                     Buttons_Update@SW_row:	
  5129                           ; 1 bytes @ 0x16
  5130                           
  5131  0036                     CAN_To_EUSART@machine_directionA:	
  5132                           ; 1 bytes @ 0x16
  5133                           
  5134  0036                     memset@p:	
  5135                           ; 1 bytes @ 0x16
  5136                           
  5137                           
  5138                           ; 1 bytes @ 0x16
  5139  0036                     	ds	1
  5140  0037                     ??_button_task:	
  5141  0037                     ??_update_graphics:	
  5142                           ; 1 bytes @ 0x17
  5143                           
  5144  0037                     ??__Read:	
  5145                           ; 1 bytes @ 0x17
  5146                           
  5147  0037                     ??__Write:	
  5148                           ; 1 bytes @ 0x17
  5149                           
  5150  0037                     __TxCommand@cmd:	
  5151                           ; 1 bytes @ 0x17
  5152                           
  5153  0037                     CAN_To_EUSART@message:	
  5154                           ; 1 bytes @ 0x17
  5155                           
  5156  0037                     memset@p1:	
  5157                           ; 1 bytes @ 0x17
  5158                           
  5159                           
  5160                           ; 1 bytes @ 0x17
  5161  0037                     	ds	1
  5162  0038                     __Read@reg:	
  5163  0038                     __Write@reg:	
  5164                           ; 1 bytes @ 0x18
  5165                           
  5166                           
  5167                           ; 1 bytes @ 0x18
  5168  0038                     	ds	1
  5169  0039                     ?__SendBuffer:	
  5170  0039                     ??__SetMode:	
  5171                           ; 1 bytes @ 0x19
  5172                           
  5173  0039                     __SendBuffer@pBuf:	
  5174                           ; 1 bytes @ 0x19
  5175                           
  5176                           
  5177                           ; 2 bytes @ 0x19
  5178  0039                     	ds	1
  5179  003A                     __MessageToTxBuffer$473:	
  5180                           
  5181                           ; 4 bytes @ 0x1A
  5182  003A                     	ds	1
  5183  003B                     ??__SendBuffer:	
  5184                           
  5185                           ; 1 bytes @ 0x1B
  5186  003B                     	ds	2
  5187  003D                     __SendBuffer@addr:	
  5188                           
  5189                           ; 1 bytes @ 0x1D
  5190  003D                     	ds	1
  5191  003E                     __RxBufferToMessage@dlc:	
  5192  003E                     __MessageToTxBuffer@rtr:	
  5193                           ; 1 bytes @ 0x1E
  5194                           
  5195                           
  5196                           ; 1 bytes @ 0x1E
  5197  003E                     	ds	1
  5198  003F                     button_task@can_msg:	
  5199  003F                     __MessageToTxBuffer$481:	
  5200                           ; 1 bytes @ 0x1F
  5201                           
  5202  003F                     __RxBufferToMessage@id:	
  5203                           ; 2 bytes @ 0x1F
  5204                           
  5205                           
  5206                           ; 4 bytes @ 0x1F
  5207  003F                     	ds	2
  5208  0041                     __MessageToTxBuffer@id:	
  5209  0041                     __SetMode@timer:	
  5210                           ; 4 bytes @ 0x21
  5211                           
  5212                           
  5213                           ; 4 bytes @ 0x21
  5214  0041                     	ds	2
  5215  0043                     ?_CAN_Rx:	
  5216  0043                     CAN_Rx@ptr:	
  5217                           ; 1 bytes @ 0x23
  5218                           
  5219                           
  5220                           ; 2 bytes @ 0x23
  5221  0043                     	ds	2
  5222  0045                     ??_CAN_Rx:	
  5223  0045                     __MessageToTxBuffer@ext:	
  5224                           ; 1 bytes @ 0x25
  5225                           
  5226  0045                     __SetMode@mode:	
  5227                           ; 1 bytes @ 0x25
  5228                           
  5229                           
  5230                           ; 1 bytes @ 0x25
  5231  0045                     	ds	1
  5232  0046                     __SetMode@modeMatch:	
  5233  0046                     __MessageToTxBuffer@canid:	
  5234                           ; 1 bytes @ 0x26
  5235                           
  5236                           
  5237                           ; 2 bytes @ 0x26
  5238  0046                     	ds	1
  5239  0047                     ??_SYSTEM_Wakeup:	
  5240  0047                     ??_SYSTEM_Sleep:	
  5241                           ; 1 bytes @ 0x27
  5242                           
  5243  0047                     ?_CAN_Initialize:	
  5244                           ; 1 bytes @ 0x27
  5245                           
  5246  0047                     ??_CAN_Sleep:	
  5247                           ; 1 bytes @ 0x27
  5248                           
  5249  0047                     ??_CAN_Wakeup:	
  5250                           ; 1 bytes @ 0x27
  5251                           
  5252  0047                     ??__Wakeup:	
  5253                           ; 1 bytes @ 0x27
  5254                           
  5255  0047                     CAN_Initialize@pConfig:	
  5256                           ; 1 bytes @ 0x27
  5257                           
  5258                           
  5259                           ; 2 bytes @ 0x27
  5260  0047                     	ds	1
  5261  0048                     ?_CAN_TxMailbox:	
  5262  0048                     ?__EnqueueTxMessage:	
  5263                           ; 1 bytes @ 0x28
  5264                           
  5265  0048                     __EnqueueTxMessage@pFrame:	
  5266                           ; 1 bytes @ 0x28
  5267                           
  5268  0048                     CAN_TxMailbox@pFrame:	
  5269                           ; 2 bytes @ 0x28
  5270                           
  5271                           
  5272                           ; 2 bytes @ 0x28
  5273  0048                     	ds	1
  5274  0049                     ??_CAN_Initialize:	
  5275                           
  5276                           ; 1 bytes @ 0x29
  5277  0049                     	ds	1
  5278  004A                     __EnqueueTxMessage@pBuf:	
  5279  004A                     CAN_TxMailbox@which:	
  5280                           ; 2 bytes @ 0x2A
  5281                           
  5282                           
  5283                           ; 2 bytes @ 0x2A
  5284  004A                     	ds	1
  5285  004B                     CAN_Rx@pBuf:	
  5286                           
  5287                           ; 2 bytes @ 0x2B
  5288  004B                     	ds	1
  5289  004C                     ??_CAN_TxMailbox:	
  5290                           
  5291                           ; 1 bytes @ 0x2C
  5292  004C                     	ds	1
  5293  004D                     ??_Receive_CAN_Message:	
  5294  004D                     transmit_can_message_task@can_msg:	
  5295                           ; 1 bytes @ 0x2D
  5296                           
  5297                           
  5298                           ; 1 bytes @ 0x2D
  5299  004D                     	ds	1
  5300  004E                     ??_main:	
  5301                           
  5302                           	psect	maintext
  5303  1369                     __pmaintext:	
  5304                           ; 1 bytes @ 0x2E
  5305 ;;
  5306 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  5307 ;;
  5308 ;; *************** function _main *****************
  5309 ;; Defined at:
  5310 ;;		line 181 in file "../src/main.c"
  5311 ;; Parameters:    Size  Location     Type
  5312 ;;		None
  5313 ;; Auto vars:     Size  Location     Type
  5314 ;;  LED_row         2    2[BANK1 ] unsigned int 
  5315 ;; Return value:  Size  Location     Type
  5316 ;;                  1    wreg      void 
  5317 ;; Registers used:
  5318 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5319 ;; Tracked objects:
  5320 ;;		On entry : B3F/0
  5321 ;;		On exit  : 0/0
  5322 ;;		Unchanged: 0/0
  5323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5325 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5327 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5328 ;;Total ram usage:        2 bytes
  5329 ;; Hardware stack levels required when called:   12
  5330 ;; This function calls:
  5331 ;;		_Buttons_Initialize
  5332 ;;		_CAN_Initialize
  5333 ;;		_EUSART_Initialize
  5334 ;;		_LED_Initialize
  5335 ;;		_SYSTEM_Initialize
  5336 ;;		__Wakeup
  5337 ;;		_button_task
  5338 ;;		_direction_message_task
  5339 ;;		_handle_can_messages_from_VCU
  5340 ;;		_led_task
  5341 ;;		_power_down_task
  5342 ;;		_transmit_can_message_task
  5343 ;;		_update_graphics
  5344 ;; This function is called by:
  5345 ;;		Startup code after reset
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349                           
  5350                           ;psect for function _main
  5351  1369                     _main:	
  5352                           
  5353                           ;main.c: 183: unsigned int LED_row = 0;
  5354                           
  5355                           ;incstack = 0
  5356                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5357  1369  0141               	movlb	1	; select bank1
  5358  136A  01EB               	clrf	main@LED_row^(0+128)
  5359  136B  01EC               	clrf	(main@LED_row+1)^(0+128)
  5360                           
  5361                           ;main.c: 186: SYSTEM_Initialize();
  5362  136C  3194  24F6  3193   	fcall	_SYSTEM_Initialize
  5363                           
  5364                           ;main.c: 187: Buttons_Initialize();
  5365  136F  3192  22B1  3193   	fcall	_Buttons_Initialize
  5366                           
  5367                           ;main.c: 188: TRISBbits.TRISB0 = 1;;
  5368  1372  0140               	movlb	0	; select bank0
  5369  1373  1413               	bsf	19,0	;volatile
  5370                           
  5371                           ;main.c: 189: CAN_Initialize( &_canConfig );
  5372  1374  3000               	movlw	low (__canConfig| (0+32768))
  5373  1375  00C7               	movwf	CAN_Initialize@pConfig
  5374  1376  3098               	movlw	high (__canConfig| (0+32768))
  5375  1377  00C8               	movwf	CAN_Initialize@pConfig+1
  5376  1378  3189  218B  3193   	fcall	_CAN_Initialize
  5377                           
  5378                           ;main.c: 190: _Wakeup();
  5379  137B  3193  23A7  3193   	fcall	__Wakeup
  5380                           
  5381                           ;main.c: 191: EUSART_Initialize();
  5382  137E  3193  23E9  3193   	fcall	_EUSART_Initialize
  5383                           
  5384                           ;main.c: 192: LED_Initialize();
  5385  1381  3188  2001  3193   	fcall	_LED_Initialize
  5386                           
  5387                           ;main.c: 193: INTCONbits.GIE = 1; INTCONbits.PEIE = 1; PIE0bits.IOCIE = 1; PIR0bits.IOCI
      +                          F = 0; INTCONbits.INTEDG = 0; PIE0bits.TMR0IE = 1; TMR1IE = 1; T1CONbits.TMR1ON = 1;
  5388  1384  178B               	bsf	11,7	;volatile
  5389  1385  170B               	bsf	11,6	;volatile
  5390  1386  014E               	movlb	14	; select bank14
  5391  1387  1616               	bsf	22,4	;volatile
  5392  1388  120C               	bcf	12,4	;volatile
  5393  1389  100B               	bcf	11,0	;volatile
  5394  138A  1696               	bsf	22,5	;volatile
  5395  138B  141A               	bsf	26,0	;volatile
  5396  138C  0144               	movlb	4	; select bank4
  5397  138D  140E               	bsf	14,0	;volatile
  5398  138E                     l6603:	
  5399                           ;main.c: 195: while( 1 )
  5400                           
  5401                           
  5402                           ;main.c: 196: {
  5403                           ;main.c: 198: button_task(&can_send_message);
  5404  138E  30D8               	movlw	(low (_can_send_message| (0+256)))& (0+255)
  5405  138F  3188  202D  3193   	fcall	_button_task
  5406                           
  5407                           ;main.c: 200: led_task();
  5408  1392  3196  26EA  3193   	fcall	_led_task
  5409                           
  5410                           ;main.c: 201: update_graphics();
  5411  1395  3190  208C  3193   	fcall	_update_graphics
  5412                           
  5413                           ;main.c: 202: handle_can_messages_from_VCU();
  5414  1398  3195  2541  3193   	fcall	_handle_can_messages_from_VCU
  5415                           
  5416                           ;main.c: 203: transmit_can_message_task(&can_send_message);
  5417  139B  30D8               	movlw	(low (_can_send_message| (0+256)))& (0+255)
  5418  139C  3197  2744  3193   	fcall	_transmit_can_message_task
  5419                           
  5420                           ;main.c: 204: direction_message_task();
  5421  139F  3196  2690  3193   	fcall	_direction_message_task
  5422                           
  5423                           ;main.c: 205: power_down_task();
  5424  13A2  3196  263A  3193   	fcall	_power_down_task
  5425  13A5  0064               	clrwdt	;# 
  5426  13A6  2B8E               	goto	l6603
  5427  13A7                     __end_of_main:	
  5428                           ;main.c: 207: }
  5429                           ;main.c: 208: return;
  5430                           
  5431                           
  5432                           	psect	text1
  5433  108C                     __ptext1:	
  5434 ;; *************** function _update_graphics *****************
  5435 ;; Defined at:
  5436 ;;		line 310 in file "../src/main.c"
  5437 ;; Parameters:    Size  Location     Type
  5438 ;;		None
  5439 ;; Auto vars:     Size  Location     Type
  5440 ;;		None
  5441 ;; Return value:  Size  Location     Type
  5442 ;;                  1    wreg      void 
  5443 ;; Registers used:
  5444 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5445 ;; Tracked objects:
  5446 ;;		On entry : 0/0
  5447 ;;		On exit  : 0/0
  5448 ;;		Unchanged: 0/0
  5449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5454 ;;Total ram usage:        0 bytes
  5455 ;; Hardware stack levels used:    1
  5456 ;; Hardware stack levels required when called:    6
  5457 ;; This function calls:
  5458 ;;		_EUSART_Master_Request
  5459 ;;		_EUSART_Receive
  5460 ;; This function is called by:
  5461 ;;		_main
  5462 ;; This function uses a non-reentrant model
  5463 ;;
  5464                           
  5465                           
  5466                           ;psect for function _update_graphics
  5467  108C                     _update_graphics:	
  5468                           
  5469                           ;main.c: 312: if( EUSART_send_data_flag)
  5470                           
  5471                           ;incstack = 0
  5472                           ; Regs used in _update_graphics: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5473  108C  0141               	movlb	1	; select bank1
  5474  108D  085A               	movf	_EUSART_send_data_flag^(0+128),w
  5475  108E  1903               	btfsc	3,2
  5476  108F  2895               	goto	l4841
  5477                           
  5478                           ;main.c: 313: {
  5479                           ;main.c: 314: EUSART_Master_Request();
  5480  1090  3194  246F  3190   	fcall	_EUSART_Master_Request
  5481                           
  5482                           ;main.c: 315: EUSART_send_data_flag = 0;
  5483  1093  0141               	movlb	1	; select bank1
  5484  1094  01DA               	clrf	_EUSART_send_data_flag^(0+128)
  5485  1095                     l4841:	
  5486                           
  5487                           ;main.c: 316: }
  5488                           ;main.c: 318: if( EUSART_receive_flag )
  5489  1095  0859               	movf	_EUSART_receive_flag^(0+128),w
  5490  1096  1903               	btfsc	3,2
  5491  1097  0008               	return
  5492                           
  5493                           ;main.c: 319: {
  5494                           ;main.c: 320: EUSART_Receive();
  5495  1098  318B  23BE         	fcall	_EUSART_Receive
  5496                           
  5497                           ;main.c: 321: EUSART_receive_flag = 0;
  5498  109A  0141               	movlb	1	; select bank1
  5499  109B  01D9               	clrf	_EUSART_receive_flag^(0+128)
  5500  109C  0008               	return
  5501  109D                     __end_of_update_graphics:	
  5502                           
  5503                           	psect	text2
  5504  0BBE                     __ptext2:	
  5505 ;; *************** function _EUSART_Receive *****************
  5506 ;; Defined at:
  5507 ;;		line 142 in file "../src/EUSART.c"
  5508 ;; Parameters:    Size  Location     Type
  5509 ;;		None
  5510 ;; Auto vars:     Size  Location     Type
  5511 ;;  i               2   21[BANK0 ] int 
  5512 ;;  i               2   19[BANK0 ] unsigned int 
  5513 ;; Return value:  Size  Location     Type
  5514 ;;                  1    wreg      void 
  5515 ;; Registers used:
  5516 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5517 ;; Tracked objects:
  5518 ;;		On entry : 0/0
  5519 ;;		On exit  : 0/0
  5520 ;;		Unchanged: 0/0
  5521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5523 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5524 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5525 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5526 ;;Total ram usage:        6 bytes
  5527 ;; Hardware stack levels used:    1
  5528 ;; Hardware stack levels required when called:    5
  5529 ;; This function calls:
  5530 ;;		Nothing
  5531 ;; This function is called by:
  5532 ;;		_update_graphics
  5533 ;; This function uses a non-reentrant model
  5534 ;;
  5535                           
  5536                           
  5537                           ;psect for function _EUSART_Receive
  5538  0BBE                     _EUSART_Receive:	
  5539                           
  5540                           ;EUSART.c: 145: EUSART_Rx_checksum = 0;
  5541                           
  5542                           ;incstack = 0
  5543                           ; Regs used in _EUSART_Receive: [wreg-fsr1h+status,2+status,0]
  5544  0BBE  0141               	movlb	1	; select bank1
  5545  0BBF  01DC               	clrf	_EUSART_Rx_checksum^(0+128)
  5546                           
  5547                           ;EUSART.c: 147: for(unsigned int i = 0; i < (27 - 1); ++i)
  5548  0BC0  0140               	movlb	0	; select bank0
  5549  0BC1  01B3               	clrf	EUSART_Receive@i
  5550  0BC2  01B4               	clrf	EUSART_Receive@i+1
  5551  0BC3  3000               	movlw	0
  5552  0BC4  0234               	subwf	EUSART_Receive@i+1,w
  5553  0BC5  301A               	movlw	26
  5554  0BC6  1903               	skipnz
  5555  0BC7  0233               	subwf	EUSART_Receive@i,w
  5556  0BC8  1803               	btfsc	3,0
  5557  0BC9  2BE0               	goto	l4359
  5558  0BCA                     l4353:	
  5559                           
  5560                           ;EUSART.c: 148: {
  5561                           ;EUSART.c: 149: EUSART_Rx_checksum += EUSART_Rx_buffer[i];
  5562  0BCA  0833               	movf	EUSART_Receive@i,w
  5563  0BCB  3EA0               	addlw	(low (_EUSART_Rx_buffer| (0+256)))& (0+255)
  5564  0BCC  0086               	movwf	6
  5565  0BCD  3001               	movlw	1	; select bank3/4
  5566  0BCE  0087               	movwf	7
  5567  0BCF  0801               	movf	1,w
  5568  0BD0  00B1               	movwf	??_EUSART_Receive
  5569  0BD1  0831               	movf	??_EUSART_Receive,w
  5570  0BD2  0141               	movlb	1	; select bank1
  5571  0BD3  07DC               	addwf	_EUSART_Rx_checksum^(0+128),f
  5572  0BD4  3001               	movlw	1
  5573  0BD5  0140               	movlb	0	; select bank0
  5574  0BD6  07B3               	addwf	EUSART_Receive@i,f
  5575  0BD7  3000               	movlw	0
  5576  0BD8  3DB4               	addwfc	EUSART_Receive@i+1,f
  5577  0BD9  3000               	movlw	0
  5578  0BDA  0234               	subwf	EUSART_Receive@i+1,w
  5579  0BDB  301A               	movlw	26
  5580  0BDC  1903               	skipnz
  5581  0BDD  0233               	subwf	EUSART_Receive@i,w
  5582  0BDE  1C03               	skipc
  5583  0BDF  2BCA               	goto	l4353
  5584  0BE0                     l4359:	
  5585                           
  5586                           ;EUSART.c: 150: }
  5587                           ;EUSART.c: 152: if(EUSART_Rx_checksum != EUSART_Rx_buffer[27 - 1])
  5588  0BE0  0143               	movlb	3	; select bank3
  5589  0BE1  083A               	movf	(_EUSART_Rx_buffer^(0+384)+26),w
  5590  0BE2  0141               	movlb	1	; select bank1
  5591  0BE3  065C               	xorwf	_EUSART_Rx_checksum^(0+128),w
  5592  0BE4  1903               	skipnz
  5593  0BE5  2BE8               	goto	l4363
  5594                           
  5595                           ;EUSART.c: 153: {
  5596                           ;EUSART.c: 154: EUSART_Rx_checksum_error = 1;
  5597  0BE6  01DB               	clrf	_EUSART_Rx_checksum_error^(0+128)
  5598  0BE7  0ADB               	incf	_EUSART_Rx_checksum_error^(0+128),f
  5599  0BE8                     l4363:	
  5600                           
  5601                           ;EUSART.c: 155: }
  5602                           ;EUSART.c: 159: if(EUSART_Rx_parity_error || EUSART_Rx_checksum_error || ((EUSART_Rx_buf
      +                          fer[EUSART_ADDRESS_BYTE] != 0x55)
  5603                           ;EUSART.c: 160: && (EUSART_Rx_buffer[EUSART_ADDRESS_BYTE] != 0x63) && (EUSART_Rx_buffer[
      +                          EUSART_ADDRESS_BYTE] != 0xF0)))
  5604  0BE8  085F               	movf	_EUSART_Rx_parity_error^(0+128),w
  5605  0BE9  1D03               	btfss	3,2
  5606  0BEA  2BFB               	goto	l960
  5607  0BEB  085B               	movf	_EUSART_Rx_checksum_error^(0+128),w
  5608  0BEC  1D03               	btfss	3,2
  5609  0BED  2BFB               	goto	l960
  5610  0BEE  3055               	movlw	85
  5611  0BEF  0143               	movlb	3	; select bank3
  5612  0BF0  0620               	xorwf	_EUSART_Rx_buffer^(0+384),w
  5613  0BF1  1903               	btfsc	3,2
  5614  0BF2  2C08               	goto	l4379
  5615  0BF3  3063               	movlw	99
  5616  0BF4  0620               	xorwf	_EUSART_Rx_buffer^(0+384),w
  5617  0BF5  1903               	btfsc	3,2
  5618  0BF6  2C08               	goto	l4379
  5619  0BF7  30F0               	movlw	240
  5620  0BF8  0620               	xorwf	_EUSART_Rx_buffer^(0+384),w
  5621  0BF9  1903               	btfsc	3,2
  5622  0BFA  2C08               	goto	l4379
  5623  0BFB                     l960:	
  5624                           
  5625                           ;EUSART.c: 161: {
  5626                           ;EUSART.c: 162: TMR1 = 0xFF00;
  5627  0BFB  30FF               	movlw	255
  5628  0BFC  0144               	movlb	4	; select bank4
  5629  0BFD  008D               	movwf	13	;volatile
  5630  0BFE  3000               	movlw	0
  5631  0BFF  008C               	movwf	12	;volatile
  5632                           
  5633                           ;EUSART.c: 163: EUSART_Rx_head = 0;
  5634  0C00  0140               	movlb	0	; select bank0
  5635  0C01  01DC               	clrf	_EUSART_Rx_head
  5636                           
  5637                           ;EUSART.c: 164: EUSART_Rx_tail = 0;
  5638  0C02  0141               	movlb	1	; select bank1
  5639  0C03  01E4               	clrf	_EUSART_Rx_tail^(0+128)
  5640                           
  5641                           ;EUSART.c: 165: EUSART_Rx_count = 0;
  5642  0C04  01E3               	clrf	_EUSART_Rx_count^(0+128)
  5643                           
  5644                           ;EUSART.c: 166: EUSART_Rx_checksum_error = 0;
  5645  0C05  01DB               	clrf	_EUSART_Rx_checksum_error^(0+128)
  5646                           
  5647                           ;EUSART.c: 167: EUSART_Rx_parity_error = 0;
  5648  0C06  01DF               	clrf	_EUSART_Rx_parity_error^(0+128)
  5649                           
  5650                           ;EUSART.c: 169: }
  5651                           
  5652                           ;EUSART.c: 168: return;
  5653  0C07  0008               	return
  5654  0C08                     l4379:	
  5655                           
  5656                           ;EUSART.c: 173: else
  5657                           ;EUSART.c: 174: {
  5658                           ;EUSART.c: 175: if (current_address_ID != EUSART_Rx_buffer[EUSART_ADDRESS_BYTE])
  5659  0C08  0143               	movlb	3	; select bank3
  5660  0C09  0820               	movf	_EUSART_Rx_buffer^(0+384),w
  5661  0C0A  0141               	movlb	1	; select bank1
  5662  0C0B  0662               	xorwf	_current_address_ID^(0+128),w
  5663  0C0C  1903               	skipnz
  5664  0C0D  2C31               	goto	l4393
  5665                           
  5666                           ;EUSART.c: 176: {
  5667                           ;EUSART.c: 177: for(int i = 0; i < 27; i++) {EUSART_packet_data[i] = 0x00;};
  5668  0C0E  0140               	movlb	0	; select bank0
  5669  0C0F  01B5               	clrf	EUSART_Receive@i_1681
  5670  0C10  01B6               	clrf	EUSART_Receive@i_1681+1
  5671  0C11  0836               	movf	EUSART_Receive@i_1681+1,w
  5672  0C12  3A80               	xorlw	128
  5673  0C13  00B1               	movwf	??_EUSART_Receive
  5674  0C14  3080               	movlw	128
  5675  0C15  0231               	subwf	??_EUSART_Receive,w
  5676  0C16  1D03               	skipz
  5677  0C17  2C1A               	goto	u3165
  5678  0C18  301B               	movlw	27
  5679  0C19  0235               	subwf	EUSART_Receive@i_1681,w
  5680  0C1A                     u3165:	
  5681  0C1A  1803               	btfsc	3,0
  5682  0C1B  2C31               	goto	l4393
  5683  0C1C                     l4387:	
  5684  0C1C  0140               	movlb	0	; select bank0
  5685  0C1D  0835               	movf	EUSART_Receive@i_1681,w
  5686  0C1E  3EA0               	addlw	(low (_EUSART_packet_data| 0))& (0+255)
  5687  0C1F  0086               	movwf	6
  5688  0C20  0187               	clrf	7
  5689  0C21  0181               	clrf	1
  5690  0C22  3001               	movlw	1
  5691  0C23  07B5               	addwf	EUSART_Receive@i_1681,f
  5692  0C24  3000               	movlw	0
  5693  0C25  3DB6               	addwfc	EUSART_Receive@i_1681+1,f
  5694  0C26  0836               	movf	EUSART_Receive@i_1681+1,w
  5695  0C27  3A80               	xorlw	128
  5696  0C28  00B1               	movwf	??_EUSART_Receive
  5697  0C29  3080               	movlw	128
  5698  0C2A  0231               	subwf	??_EUSART_Receive,w
  5699  0C2B  1D03               	skipz
  5700  0C2C  2C2F               	goto	u3175
  5701  0C2D  301B               	movlw	27
  5702  0C2E  0235               	subwf	EUSART_Receive@i_1681,w
  5703  0C2F                     u3175:	
  5704  0C2F  1C03               	skipc
  5705  0C30  2C1C               	goto	l4387
  5706  0C31                     l4393:	
  5707                           
  5708                           ;EUSART.c: 178: }
  5709                           ;EUSART.c: 179: current_address_ID = EUSART_Rx_buffer[EUSART_ADDRESS_BYTE];
  5710  0C31  0143               	movlb	3	; select bank3
  5711  0C32  0820               	movf	_EUSART_Rx_buffer^(0+384),w
  5712  0C33  0140               	movlb	0	; select bank0
  5713  0C34  00B1               	movwf	??_EUSART_Receive
  5714  0C35  0831               	movf	??_EUSART_Receive,w
  5715  0C36  0141               	movlb	1	; select bank1
  5716  0C37  00E2               	movwf	_current_address_ID^(0+128)
  5717                           
  5718                           ;EUSART.c: 180: switch(EUSART_Rx_buffer[EUSART_ADDRESS_BYTE])
  5719  0C38  2D15               	goto	l4437
  5720  0C39                     l4395:	
  5721                           ;EUSART.c: 181: {
  5722                           ;EUSART.c: 182: case 0x63:
  5723                           
  5724                           
  5725                           ;EUSART.c: 183: EUSART_packet_data[EUSART_ADDRESS_BYTE] = 0x63;
  5726  0C39  3063               	movlw	99
  5727  0C3A  0140               	movlb	0	; select bank0
  5728  0C3B  00B1               	movwf	??_EUSART_Receive
  5729  0C3C  0831               	movf	??_EUSART_Receive,w
  5730  0C3D  0141               	movlb	1	; select bank1
  5731  0C3E  00A0               	movwf	_EUSART_packet_data^(0+128)
  5732                           
  5733                           ;EUSART.c: 184: EUSART_packet_data[1] = ((EUSART_Rx_buffer[1] & 0b00001100U) | (EUSART_p
      +                          acket_data[1] & 0b11110011U));
  5734  0C3F  30F3               	movlw	243
  5735  0C40  0521               	andwf	(_EUSART_packet_data^(0+128)+1),w
  5736  0C41  0140               	movlb	0	; select bank0
  5737  0C42  00B1               	movwf	??_EUSART_Receive
  5738  0C43  0143               	movlb	3	; select bank3
  5739  0C44  0821               	movf	(_EUSART_Rx_buffer^(0+384)+1),w
  5740  0C45  390C               	andlw	12
  5741  0C46  0140               	movlb	0	; select bank0
  5742  0C47  0431               	iorwf	??_EUSART_Receive,w
  5743  0C48  00B2               	movwf	??_EUSART_Receive+1
  5744  0C49  0832               	movf	??_EUSART_Receive+1,w
  5745  0C4A  0141               	movlb	1	; select bank1
  5746  0C4B  00A1               	movwf	(_EUSART_packet_data^(0+128)+1)
  5747                           
  5748                           ;EUSART.c: 185: EUSART_packet_data[8] = ((EUSART_Rx_buffer[8] & 0b00001100U) | (EUSART_p
      +                          acket_data[8] & 0b11110011U));
  5749  0C4C  30F3               	movlw	243
  5750  0C4D  0528               	andwf	(_EUSART_packet_data^(0+128)+8),w
  5751  0C4E  0140               	movlb	0	; select bank0
  5752  0C4F  00B1               	movwf	??_EUSART_Receive
  5753  0C50  0143               	movlb	3	; select bank3
  5754  0C51  0828               	movf	(_EUSART_Rx_buffer^(0+384)+8),w
  5755  0C52  390C               	andlw	12
  5756  0C53  0140               	movlb	0	; select bank0
  5757  0C54  0431               	iorwf	??_EUSART_Receive,w
  5758  0C55  00B2               	movwf	??_EUSART_Receive+1
  5759  0C56  0832               	movf	??_EUSART_Receive+1,w
  5760  0C57  0141               	movlb	1	; select bank1
  5761  0C58  00A8               	movwf	(_EUSART_packet_data^(0+128)+8)
  5762                           
  5763                           ;EUSART.c: 186: if(EUSART_packet_data[1] & 0b00000010)
  5764  0C59  1CA1               	btfss	(_EUSART_packet_data^(0+128)+1),1
  5765  0C5A  2C85               	goto	l4405
  5766                           
  5767                           ;EUSART.c: 187: {
  5768                           ;EUSART.c: 188: EUSART_packet_data[2] = EUSART_Rx_buffer[2];
  5769  0C5B  0143               	movlb	3	; select bank3
  5770  0C5C  0822               	movf	(_EUSART_Rx_buffer^(0+384)+2),w
  5771  0C5D  0140               	movlb	0	; select bank0
  5772  0C5E  00B1               	movwf	??_EUSART_Receive
  5773  0C5F  0831               	movf	??_EUSART_Receive,w
  5774  0C60  0141               	movlb	1	; select bank1
  5775  0C61  00A2               	movwf	(_EUSART_packet_data^(0+128)+2)
  5776                           
  5777                           ;EUSART.c: 189: EUSART_packet_data[3] = EUSART_Rx_buffer[3];
  5778  0C62  0143               	movlb	3	; select bank3
  5779  0C63  0823               	movf	(_EUSART_Rx_buffer^(0+384)+3),w
  5780  0C64  0140               	movlb	0	; select bank0
  5781  0C65  00B1               	movwf	??_EUSART_Receive
  5782  0C66  0831               	movf	??_EUSART_Receive,w
  5783  0C67  0141               	movlb	1	; select bank1
  5784  0C68  00A3               	movwf	(_EUSART_packet_data^(0+128)+3)
  5785                           
  5786                           ;EUSART.c: 190: EUSART_packet_data[4] = EUSART_Rx_buffer[4];
  5787  0C69  0143               	movlb	3	; select bank3
  5788  0C6A  0824               	movf	(_EUSART_Rx_buffer^(0+384)+4),w
  5789  0C6B  0140               	movlb	0	; select bank0
  5790  0C6C  00B1               	movwf	??_EUSART_Receive
  5791  0C6D  0831               	movf	??_EUSART_Receive,w
  5792  0C6E  0141               	movlb	1	; select bank1
  5793  0C6F  00A4               	movwf	(_EUSART_packet_data^(0+128)+4)
  5794                           
  5795                           ;EUSART.c: 191: EUSART_packet_data[5] = EUSART_Rx_buffer[5];
  5796  0C70  0143               	movlb	3	; select bank3
  5797  0C71  0825               	movf	(_EUSART_Rx_buffer^(0+384)+5),w
  5798  0C72  0140               	movlb	0	; select bank0
  5799  0C73  00B1               	movwf	??_EUSART_Receive
  5800  0C74  0831               	movf	??_EUSART_Receive,w
  5801  0C75  0141               	movlb	1	; select bank1
  5802  0C76  00A5               	movwf	(_EUSART_packet_data^(0+128)+5)
  5803                           
  5804                           ;EUSART.c: 192: EUSART_packet_data[6] = EUSART_Rx_buffer[6];
  5805  0C77  0143               	movlb	3	; select bank3
  5806  0C78  0826               	movf	(_EUSART_Rx_buffer^(0+384)+6),w
  5807  0C79  0140               	movlb	0	; select bank0
  5808  0C7A  00B1               	movwf	??_EUSART_Receive
  5809  0C7B  0831               	movf	??_EUSART_Receive,w
  5810  0C7C  0141               	movlb	1	; select bank1
  5811  0C7D  00A6               	movwf	(_EUSART_packet_data^(0+128)+6)
  5812                           
  5813                           ;EUSART.c: 193: EUSART_packet_data[7] = EUSART_Rx_buffer[7];
  5814  0C7E  0143               	movlb	3	; select bank3
  5815  0C7F  0827               	movf	(_EUSART_Rx_buffer^(0+384)+7),w
  5816  0C80  0140               	movlb	0	; select bank0
  5817  0C81  00B1               	movwf	??_EUSART_Receive
  5818  0C82  0831               	movf	??_EUSART_Receive,w
  5819  0C83  0141               	movlb	1	; select bank1
  5820  0C84  00A7               	movwf	(_EUSART_packet_data^(0+128)+7)
  5821  0C85                     l4405:	
  5822                           
  5823                           ;EUSART.c: 194: }
  5824                           ;EUSART.c: 195: if(EUSART_packet_data[8] & 0b00000010)
  5825  0C85  1CA8               	btfss	(_EUSART_packet_data^(0+128)+8),1
  5826  0C86  0008               	return
  5827                           
  5828                           ;EUSART.c: 196: {
  5829                           ;EUSART.c: 197: EUSART_packet_data[11] = EUSART_Rx_buffer[11];
  5830  0C87  0143               	movlb	3	; select bank3
  5831  0C88  082B               	movf	(_EUSART_Rx_buffer^(0+384)+11),w
  5832  0C89  0140               	movlb	0	; select bank0
  5833  0C8A  00B1               	movwf	??_EUSART_Receive
  5834  0C8B  0831               	movf	??_EUSART_Receive,w
  5835  0C8C  0141               	movlb	1	; select bank1
  5836  0C8D  00AB               	movwf	(_EUSART_packet_data^(0+128)+11)
  5837                           
  5838                           ;EUSART.c: 198: EUSART_packet_data[12] = EUSART_Rx_buffer[12];
  5839  0C8E  0143               	movlb	3	; select bank3
  5840  0C8F  082C               	movf	(_EUSART_Rx_buffer^(0+384)+12),w
  5841  0C90  0140               	movlb	0	; select bank0
  5842  0C91  00B1               	movwf	??_EUSART_Receive
  5843  0C92  0831               	movf	??_EUSART_Receive,w
  5844  0C93  0141               	movlb	1	; select bank1
  5845  0C94  00AC               	movwf	(_EUSART_packet_data^(0+128)+12)
  5846                           
  5847                           ;EUSART.c: 199: EUSART_packet_data[13] = EUSART_Rx_buffer[13];
  5848  0C95  0143               	movlb	3	; select bank3
  5849  0C96  082D               	movf	(_EUSART_Rx_buffer^(0+384)+13),w
  5850  0C97  0140               	movlb	0	; select bank0
  5851  0C98  00B1               	movwf	??_EUSART_Receive
  5852  0C99  0831               	movf	??_EUSART_Receive,w
  5853  0C9A  0141               	movlb	1	; select bank1
  5854  0C9B  00AD               	movwf	(_EUSART_packet_data^(0+128)+13)
  5855                           
  5856                           ;EUSART.c: 200: }
  5857                           ;EUSART.c: 201: break;
  5858  0C9C  0008               	return
  5859  0C9D                     l4409:	
  5860                           ;EUSART.c: 203: case 0xF0:
  5861                           
  5862                           
  5863                           ;EUSART.c: 204: EUSART_packet_data[EUSART_ADDRESS_BYTE] = 0xF0;
  5864  0C9D  30F0               	movlw	240
  5865  0C9E  0140               	movlb	0	; select bank0
  5866  0C9F  00B1               	movwf	??_EUSART_Receive
  5867  0CA0  0831               	movf	??_EUSART_Receive,w
  5868  0CA1  0141               	movlb	1	; select bank1
  5869  0CA2  00A0               	movwf	_EUSART_packet_data^(0+128)
  5870                           
  5871                           ;EUSART.c: 205: EUSART_packet_data[1] = ((EUSART_Rx_buffer[1] & 0b00000010U) | (EUSART_p
      +                          acket_data[1] & 0b11111101U));
  5872  0CA3  30FD               	movlw	253
  5873  0CA4  0521               	andwf	(_EUSART_packet_data^(0+128)+1),w
  5874  0CA5  0140               	movlb	0	; select bank0
  5875  0CA6  00B1               	movwf	??_EUSART_Receive
  5876  0CA7  0143               	movlb	3	; select bank3
  5877  0CA8  0821               	movf	(_EUSART_Rx_buffer^(0+384)+1),w
  5878  0CA9  3902               	andlw	2
  5879  0CAA  0140               	movlb	0	; select bank0
  5880  0CAB  0431               	iorwf	??_EUSART_Receive,w
  5881  0CAC  00B2               	movwf	??_EUSART_Receive+1
  5882  0CAD  0832               	movf	??_EUSART_Receive+1,w
  5883  0CAE  0141               	movlb	1	; select bank1
  5884  0CAF  00A1               	movwf	(_EUSART_packet_data^(0+128)+1)
  5885                           
  5886                           ;EUSART.c: 206: if(!(EUSART_packet_data[1] & 0b00000001U))
  5887  0CB0  1821               	btfsc	(_EUSART_packet_data^(0+128)+1),0
  5888  0CB1  0008               	return
  5889                           
  5890                           ;EUSART.c: 207: {
  5891                           ;EUSART.c: 208: EUSART_packet_data[2] = EUSART_Rx_buffer[2];
  5892  0CB2  0143               	movlb	3	; select bank3
  5893  0CB3  0822               	movf	(_EUSART_Rx_buffer^(0+384)+2),w
  5894  0CB4  0140               	movlb	0	; select bank0
  5895  0CB5  00B1               	movwf	??_EUSART_Receive
  5896  0CB6  0831               	movf	??_EUSART_Receive,w
  5897  0CB7  0141               	movlb	1	; select bank1
  5898  0CB8  00A2               	movwf	(_EUSART_packet_data^(0+128)+2)
  5899                           
  5900                           ;EUSART.c: 209: EUSART_packet_data[3] = EUSART_Rx_buffer[3];
  5901  0CB9  0143               	movlb	3	; select bank3
  5902  0CBA  0823               	movf	(_EUSART_Rx_buffer^(0+384)+3),w
  5903  0CBB  0140               	movlb	0	; select bank0
  5904  0CBC  00B1               	movwf	??_EUSART_Receive
  5905  0CBD  0831               	movf	??_EUSART_Receive,w
  5906  0CBE  0141               	movlb	1	; select bank1
  5907  0CBF  00A3               	movwf	(_EUSART_packet_data^(0+128)+3)
  5908                           
  5909                           ;EUSART.c: 210: EUSART_packet_data[4] = EUSART_Rx_buffer[4];
  5910  0CC0  0143               	movlb	3	; select bank3
  5911  0CC1  0824               	movf	(_EUSART_Rx_buffer^(0+384)+4),w
  5912  0CC2  0140               	movlb	0	; select bank0
  5913  0CC3  00B1               	movwf	??_EUSART_Receive
  5914  0CC4  0831               	movf	??_EUSART_Receive,w
  5915  0CC5  0141               	movlb	1	; select bank1
  5916  0CC6  00A4               	movwf	(_EUSART_packet_data^(0+128)+4)
  5917                           
  5918                           ;EUSART.c: 211: EUSART_packet_data[5] = EUSART_Rx_buffer[5];
  5919  0CC7  0143               	movlb	3	; select bank3
  5920  0CC8  0825               	movf	(_EUSART_Rx_buffer^(0+384)+5),w
  5921  0CC9  0140               	movlb	0	; select bank0
  5922  0CCA  00B1               	movwf	??_EUSART_Receive
  5923  0CCB  0831               	movf	??_EUSART_Receive,w
  5924  0CCC  0141               	movlb	1	; select bank1
  5925  0CCD  00A5               	movwf	(_EUSART_packet_data^(0+128)+5)
  5926                           
  5927                           ;EUSART.c: 212: }
  5928                           ;EUSART.c: 213: break;
  5929  0CCE  0008               	return
  5930  0CCF                     l4417:	
  5931                           ;EUSART.c: 216: default:
  5932                           
  5933                           ;EUSART.c: 215: case 0x55:
  5934                           
  5935                           
  5936                           ;EUSART.c: 217: EUSART_packet_data[EUSART_ADDRESS_BYTE] = 0x55;
  5937  0CCF  3055               	movlw	85
  5938  0CD0  0140               	movlb	0	; select bank0
  5939  0CD1  00B1               	movwf	??_EUSART_Receive
  5940  0CD2  0831               	movf	??_EUSART_Receive,w
  5941  0CD3  0141               	movlb	1	; select bank1
  5942  0CD4  00A0               	movwf	_EUSART_packet_data^(0+128)
  5943                           
  5944                           ;EUSART.c: 219: EUSART_packet_data[EUSART_MACHINE_STATUS_BYTE] = (EUSART_Rx_buffer[EUSAR
      +                          T_MACHINE_STATUS_BYTE] & 0b00000111)
  5945                           ;EUSART.c: 220: | (EUSART_packet_data[EUSART_MACHINE_STATUS_BYTE] & 0b11111000);
  5946  0CD5  30F8               	movlw	248
  5947  0CD6  0524               	andwf	(_EUSART_packet_data^(0+128)+4),w
  5948  0CD7  0140               	movlb	0	; select bank0
  5949  0CD8  00B1               	movwf	??_EUSART_Receive
  5950  0CD9  0143               	movlb	3	; select bank3
  5951  0CDA  0824               	movf	(_EUSART_Rx_buffer^(0+384)+4),w
  5952  0CDB  3907               	andlw	7
  5953  0CDC  0140               	movlb	0	; select bank0
  5954  0CDD  0431               	iorwf	??_EUSART_Receive,w
  5955  0CDE  00B2               	movwf	??_EUSART_Receive+1
  5956  0CDF  0832               	movf	??_EUSART_Receive+1,w
  5957  0CE0  0141               	movlb	1	; select bank1
  5958  0CE1  00A4               	movwf	(_EUSART_packet_data^(0+128)+4)
  5959                           
  5960                           ;EUSART.c: 221: if((EUSART_packet_data[EUSART_MACHINE_STATUS_BYTE] & 0b00000111U) == 0b0
      +                          0000001U)
  5961  0CE2  3007               	movlw	7
  5962  0CE3  0524               	andwf	(_EUSART_packet_data^(0+128)+4),w
  5963  0CE4  0140               	movlb	0	; select bank0
  5964  0CE5  00B1               	movwf	??_EUSART_Receive
  5965  0CE6  0331               	decf	??_EUSART_Receive,w
  5966  0CE7  1D03               	btfss	3,2
  5967  0CE8  2CF1               	goto	l4429
  5968                           
  5969                           ;EUSART.c: 222: {
  5970                           ;EUSART.c: 223: EUSART_packet_data[EUSART_MACHINE_STATUS_BYTE] &= 0b11111000 & EUSART_mo
      +                          de_status_on; EUSART_packet_data[EUSART_MACHINE_STATUS_BYTE] |= EUSART_mode_status_on;
  5971  0CE9  0141               	movlb	1	; select bank1
  5972  0CEA  01A4               	clrf	(_EUSART_packet_data^(0+128)+4)
  5973  0CEB  1424               	bsf	(_EUSART_packet_data^(0+128)+4),0
  5974                           
  5975                           ;EUSART.c: 224: LED_column_array[0] &= ~0x01;
  5976  0CEC  30FE               	movlw	254
  5977  0CED  0140               	movlb	0	; select bank0
  5978  0CEE  00B1               	movwf	??_EUSART_Receive
  5979  0CEF  0831               	movf	??_EUSART_Receive,w
  5980  0CF0  05CE               	andwf	_LED_column_array,f
  5981  0CF1                     l4429:	
  5982                           
  5983                           ;EUSART.c: 225: }
  5984                           ;EUSART.c: 227: EUSART_packet_data[EUSART_WARNING_BYTE] = (EUSART_Rx_buffer[EUSART_WARNI
      +                          NG_BYTE]& 0b01000000U)
  5985                           ;EUSART.c: 228: | (EUSART_packet_data[EUSART_WARNING_BYTE] & 0b10111111U);
  5986  0CF1  30BF               	movlw	191
  5987  0CF2  0141               	movlb	1	; select bank1
  5988  0CF3  0525               	andwf	(_EUSART_packet_data^(0+128)+5),w
  5989  0CF4  0140               	movlb	0	; select bank0
  5990  0CF5  00B1               	movwf	??_EUSART_Receive
  5991  0CF6  0143               	movlb	3	; select bank3
  5992  0CF7  0825               	movf	(_EUSART_Rx_buffer^(0+384)+5),w
  5993  0CF8  3940               	andlw	64
  5994  0CF9  0140               	movlb	0	; select bank0
  5995  0CFA  0431               	iorwf	??_EUSART_Receive,w
  5996  0CFB  00B2               	movwf	??_EUSART_Receive+1
  5997  0CFC  0832               	movf	??_EUSART_Receive+1,w
  5998  0CFD  0141               	movlb	1	; select bank1
  5999  0CFE  00A5               	movwf	(_EUSART_packet_data^(0+128)+5)
  6000                           
  6001                           ;EUSART.c: 230: EUSART_packet_data[EUSART_SETTINGS_CONTROL_BYTE] = (EUSART_Rx_buffer[EUS
      +                          ART_SETTINGS_CONTROL_BYTE]& 0b11100000U)
  6002                           ;EUSART.c: 231: | (EUSART_packet_data[EUSART_SETTINGS_CONTROL_BYTE] & 0b00011111U);
  6003  0CFF  301F               	movlw	31
  6004  0D00  052B               	andwf	(_EUSART_packet_data^(0+128)+11),w
  6005  0D01  0140               	movlb	0	; select bank0
  6006  0D02  00B1               	movwf	??_EUSART_Receive
  6007  0D03  0143               	movlb	3	; select bank3
  6008  0D04  082B               	movf	(_EUSART_Rx_buffer^(0+384)+11),w
  6009  0D05  39E0               	andlw	224
  6010  0D06  0140               	movlb	0	; select bank0
  6011  0D07  0431               	iorwf	??_EUSART_Receive,w
  6012  0D08  00B2               	movwf	??_EUSART_Receive+1
  6013  0D09  0832               	movf	??_EUSART_Receive+1,w
  6014  0D0A  0141               	movlb	1	; select bank1
  6015  0D0B  00AB               	movwf	(_EUSART_packet_data^(0+128)+11)
  6016                           
  6017                           ;EUSART.c: 232: if(EUSART_packet_data[EUSART_SETTINGS_CONTROL_BYTE]&0b00100000U)
  6018  0D0C  1EAB               	btfss	(_EUSART_packet_data^(0+128)+11),5
  6019  0D0D  0008               	return
  6020                           
  6021                           ;EUSART.c: 233: {
  6022                           ;EUSART.c: 234: EUSART_packet_data[EUSART_SETTINGS_CONTROL_BYTE] &= 0b11001111;
  6023  0D0E  30CF               	movlw	207
  6024  0D0F  0140               	movlb	0	; select bank0
  6025  0D10  00B1               	movwf	??_EUSART_Receive
  6026  0D11  0831               	movf	??_EUSART_Receive,w
  6027  0D12  0141               	movlb	1	; select bank1
  6028  0D13  05AB               	andwf	(_EUSART_packet_data^(0+128)+11),f
  6029                           
  6030                           ;EUSART.c: 235: }
  6031                           ;EUSART.c: 236: }
  6032  0D14  0008               	return
  6033  0D15                     l4437:	
  6034  0D15  0143               	movlb	3	; select bank3
  6035  0D16  0820               	movf	_EUSART_Rx_buffer^(0+384),w
  6036                           
  6037                           ; Switch size 1, requested type "space"
  6038                           ; Number of cases is 3, Range of values is 85 to 240
  6039                           ; switch strategies available:
  6040                           ; Name         Instructions Cycles
  6041                           ; simple_byte           10     6 (average)
  6042                           ; jumptable            263     9 (fixed)
  6043                           ;	Chosen strategy is simple_byte
  6044  0D17  3A55               	xorlw	85	; case 85
  6045  0D18  1903               	skipnz
  6046  0D19  2CCF               	goto	l4417
  6047  0D1A  3A36               	xorlw	54	; case 99
  6048  0D1B  1903               	skipnz
  6049  0D1C  2C39               	goto	l4395
  6050  0D1D  3A93               	xorlw	147	; case 240
  6051  0D1E  1903               	skipnz
  6052  0D1F  2C9D               	goto	l4409
  6053  0D20  2CCF               	goto	l4417
  6054  0D21  0008               	return
  6055  0D22                     __end_of_EUSART_Receive:	
  6056                           ;EUSART.c: 237: }
  6057                           ;EUSART.c: 238: return;
  6058                           
  6059                           
  6060                           	psect	text3
  6061  146F                     __ptext3:	
  6062 ;; *************** function _EUSART_Master_Request *****************
  6063 ;; Defined at:
  6064 ;;		line 244 in file "../src/EUSART.c"
  6065 ;; Parameters:    Size  Location     Type
  6066 ;;		None
  6067 ;; Auto vars:     Size  Location     Type
  6068 ;;  i               2   18[BANK0 ] unsigned int 
  6069 ;; Return value:  Size  Location     Type
  6070 ;;                  1    wreg      void 
  6071 ;; Registers used:
  6072 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6073 ;; Tracked objects:
  6074 ;;		On entry : 0/0
  6075 ;;		On exit  : 0/0
  6076 ;;		Unchanged: 0/0
  6077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6079 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6080 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6081 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6082 ;;Total ram usage:        3 bytes
  6083 ;; Hardware stack levels used:    1
  6084 ;; Hardware stack levels required when called:    5
  6085 ;; This function calls:
  6086 ;;		Nothing
  6087 ;; This function is called by:
  6088 ;;		_update_graphics
  6089 ;; This function uses a non-reentrant model
  6090 ;;
  6091                           
  6092                           
  6093                           ;psect for function _EUSART_Master_Request
  6094  146F                     _EUSART_Master_Request:	
  6095                           
  6096                           ;EUSART.c: 247: EUSART_Tx_buffer_remaining = 0;
  6097                           
  6098                           ;incstack = 0
  6099                           ; Regs used in _EUSART_Master_Request: [wreg+fsr1l+fsr1h+status,2+status,0]
  6100  146F  0141               	movlb	1	; select bank1
  6101  1470  01E5               	clrf	_EUSART_Tx_buffer_remaining^(0+128)
  6102                           
  6103                           ;EUSART.c: 248: EUSART_Tx_head = 0;
  6104  1471  01E6               	clrf	_EUSART_Tx_head^(0+128)
  6105                           
  6106                           ;EUSART.c: 249: EUSART_Tx_tail = 0;
  6107  1472  0140               	movlb	0	; select bank0
  6108  1473  01DD               	clrf	_EUSART_Tx_tail
  6109                           
  6110                           ;EUSART.c: 250: EUSART_Tx_checksum = 0;
  6111  1474  0141               	movlb	1	; select bank1
  6112  1475  01DD               	clrf	_EUSART_Tx_checksum^(0+128)
  6113                           
  6114                           ;EUSART.c: 255: for(unsigned int i=0; i<(27 - 1); ++i)
  6115  1476  0140               	movlb	0	; select bank0
  6116  1477  01B2               	clrf	EUSART_Master_Request@i
  6117  1478  01B3               	clrf	EUSART_Master_Request@i+1
  6118  1479  3000               	movlw	0
  6119  147A  0233               	subwf	EUSART_Master_Request@i+1,w
  6120  147B  301A               	movlw	26
  6121  147C  1903               	skipnz
  6122  147D  0232               	subwf	EUSART_Master_Request@i,w
  6123  147E  1803               	btfsc	3,0
  6124  147F  2CA2               	goto	l4341
  6125  1480                     l4335:	
  6126                           
  6127                           ;EUSART.c: 256: {
  6128                           ;EUSART.c: 257: EUSART_Tx_buffer[i] = EUSART_packet_data[i];
  6129  1480  0832               	movf	EUSART_Master_Request@i,w
  6130  1481  3EA0               	addlw	(low (_EUSART_packet_data| 0))& (0+255)
  6131  1482  0086               	movwf	6
  6132  1483  0187               	clrf	7
  6133  1484  0801               	movf	1,w
  6134  1485  00B1               	movwf	??_EUSART_Master_Request
  6135  1486  0832               	movf	EUSART_Master_Request@i,w
  6136  1487  3E20               	addlw	(low (_EUSART_Tx_buffer| (0+512)))& (0+255)
  6137  1488  0086               	movwf	6
  6138  1489  3002               	movlw	2	; select bank4/5
  6139  148A  0087               	movwf	7
  6140  148B  0831               	movf	??_EUSART_Master_Request,w
  6141  148C  0081               	movwf	1
  6142                           
  6143                           ;EUSART.c: 258: EUSART_Tx_checksum += EUSART_packet_data[i];
  6144  148D  0832               	movf	EUSART_Master_Request@i,w
  6145  148E  3EA0               	addlw	(low (_EUSART_packet_data| 0))& (0+255)
  6146  148F  0086               	movwf	6
  6147  1490  0187               	clrf	7
  6148  1491  0801               	movf	1,w
  6149  1492  00B1               	movwf	??_EUSART_Master_Request
  6150  1493  0831               	movf	??_EUSART_Master_Request,w
  6151  1494  0141               	movlb	1	; select bank1
  6152  1495  07DD               	addwf	_EUSART_Tx_checksum^(0+128),f
  6153  1496  3001               	movlw	1
  6154  1497  0140               	movlb	0	; select bank0
  6155  1498  07B2               	addwf	EUSART_Master_Request@i,f
  6156  1499  3000               	movlw	0
  6157  149A  3DB3               	addwfc	EUSART_Master_Request@i+1,f
  6158  149B  3000               	movlw	0
  6159  149C  0233               	subwf	EUSART_Master_Request@i+1,w
  6160  149D  301A               	movlw	26
  6161  149E  1903               	skipnz
  6162  149F  0232               	subwf	EUSART_Master_Request@i,w
  6163  14A0  1C03               	skipc
  6164  14A1  2C80               	goto	l4335
  6165  14A2                     l4341:	
  6166                           
  6167                           ;EUSART.c: 259: }
  6168                           ;EUSART.c: 262: EUSART_packet_data[27 - 1] = EUSART_Tx_checksum;
  6169  14A2  0141               	movlb	1	; select bank1
  6170  14A3  085D               	movf	_EUSART_Tx_checksum^(0+128),w
  6171  14A4  0140               	movlb	0	; select bank0
  6172  14A5  00B1               	movwf	??_EUSART_Master_Request
  6173  14A6  0831               	movf	??_EUSART_Master_Request,w
  6174  14A7  0141               	movlb	1	; select bank1
  6175  14A8  00BA               	movwf	(_EUSART_packet_data^(0+128)+26)
  6176                           
  6177                           ;EUSART.c: 263: EUSART_Tx_buffer[27 - 1] = EUSART_Tx_checksum;
  6178  14A9  085D               	movf	_EUSART_Tx_checksum^(0+128),w
  6179  14AA  0140               	movlb	0	; select bank0
  6180  14AB  00B1               	movwf	??_EUSART_Master_Request
  6181  14AC  0831               	movf	??_EUSART_Master_Request,w
  6182  14AD  0144               	movlb	4	; select bank4
  6183  14AE  00BA               	movwf	(_EUSART_Tx_buffer^(0+512)+26)
  6184                           
  6185                           ;EUSART.c: 266: PIE3bits.TX1IE = 1;
  6186  14AF  014E               	movlb	14	; select bank14
  6187  14B0  1619               	bsf	25,4	;volatile
  6188  14B1  0008               	return
  6189  14B2                     __end_of_EUSART_Master_Request:	
  6190                           ;EUSART.c: 268: return;
  6191                           
  6192                           
  6193                           	psect	text4
  6194  1744                     __ptext4:	
  6195 ;; *************** function _transmit_can_message_task *****************
  6196 ;; Defined at:
  6197 ;;		line 325 in file "../src/main.c"
  6198 ;; Parameters:    Size  Location     Type
  6199 ;;  can_msg         1    wreg     PTR struct .
  6200 ;;		 -> can_send_message(14), 
  6201 ;; Auto vars:     Size  Location     Type
  6202 ;;  can_msg         1   45[BANK0 ] PTR struct .
  6203 ;;		 -> can_send_message(14), 
  6204 ;; Return value:  Size  Location     Type
  6205 ;;                  1    wreg      void 
  6206 ;; Registers used:
  6207 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6208 ;; Tracked objects:
  6209 ;;		On entry : 0/0
  6210 ;;		On exit  : 0/0
  6211 ;;		Unchanged: 0/0
  6212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6214 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6215 ;;      Temps:          0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6216 ;;      Totals:         0       1       0       0       0       8       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6217 ;;Total ram usage:        9 bytes
  6218 ;; Hardware stack levels used:    1
  6219 ;; Hardware stack levels required when called:   10
  6220 ;; This function calls:
  6221 ;;		_CAN_Tx
  6222 ;;		_EUSART_TO_CAN
  6223 ;; This function is called by:
  6224 ;;		_main
  6225 ;; This function uses a non-reentrant model
  6226 ;;
  6227                           
  6228                           
  6229                           ;psect for function _transmit_can_message_task
  6230  1744                     _transmit_can_message_task:	
  6231                           
  6232                           ;incstack = 0
  6233                           ; Regs used in _transmit_can_message_task: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6234                           ;transmit_can_message_task@can_msg stored from wreg
  6235  1744  0140               	movlb	0	; select bank0
  6236  1745  00CD               	movwf	transmit_can_message_task@can_msg
  6237                           
  6238                           ;main.c: 327: static TIMER_TICK sendSwitchesTimer = 0;
  6239                           ;main.c: 330: if( ( TIMER_TICK )( SYSTEM_tick - sendSwitchesTimer ) >= ( 50000U / 1000U 
      +                          ) )
  6240  1746  0853               	movf	_SYSTEM_tick,w
  6241  1747  0144               	movlb	4	; select bank4
  6242  1748  00CB               	movwf	??_transmit_can_message_task^(0+512)
  6243  1749  0140               	movlb	0	; select bank0
  6244  174A  0854               	movf	_SYSTEM_tick+1,w
  6245  174B  0144               	movlb	4	; select bank4
  6246  174C  00CC               	movwf	(??_transmit_can_message_task^(0+512)+1)
  6247  174D  0140               	movlb	0	; select bank0
  6248  174E  0855               	movf	_SYSTEM_tick+2,w
  6249  174F  0144               	movlb	4	; select bank4
  6250  1750  00CD               	movwf	(??_transmit_can_message_task^(0+512)+2)
  6251  1751  0140               	movlb	0	; select bank0
  6252  1752  0856               	movf	_SYSTEM_tick+3,w
  6253  1753  0144               	movlb	4	; select bank4
  6254  1754  00CE               	movwf	(??_transmit_can_message_task^(0+512)+3)
  6255  1755  0142               	movlb	2	; select bank2
  6256  1756  0929               	comf	transmit_can_message_task@sendSwitchesTimer^(0+256),w
  6257  1757  0144               	movlb	4	; select bank4
  6258  1758  00CF               	movwf	(??_transmit_can_message_task+4)^(0+512)
  6259  1759  0142               	movlb	2	; select bank2
  6260  175A  092A               	comf	(transmit_can_message_task@sendSwitchesTimer+1)^(0+256),w
  6261  175B  0144               	movlb	4	; select bank4
  6262  175C  00D0               	movwf	((??_transmit_can_message_task+4)^(0+512)+1)
  6263  175D  0142               	movlb	2	; select bank2
  6264  175E  092B               	comf	(transmit_can_message_task@sendSwitchesTimer+2)^(0+256),w
  6265  175F  0144               	movlb	4	; select bank4
  6266  1760  00D1               	movwf	((??_transmit_can_message_task+4)^(0+512)+2)
  6267  1761  0142               	movlb	2	; select bank2
  6268  1762  092C               	comf	(transmit_can_message_task@sendSwitchesTimer+3)^(0+256),w
  6269  1763  0144               	movlb	4	; select bank4
  6270  1764  00D2               	movwf	((??_transmit_can_message_task+4)^(0+512)+3)
  6271  1765  0ACF               	incf	(??_transmit_can_message_task+4)^(0+512),f
  6272  1766  1903               	skipnz
  6273  1767  0AD0               	incf	((??_transmit_can_message_task+4)^(0+512)+1),f
  6274  1768  1903               	skipnz
  6275  1769  0AD1               	incf	((??_transmit_can_message_task+4)^(0+512)+2),f
  6276  176A  1903               	skipnz
  6277  176B  0AD2               	incf	((??_transmit_can_message_task+4)^(0+512)+3),f
  6278  176C  084F               	movf	(??_transmit_can_message_task+4)^(0+512),w
  6279  176D  07CB               	addwf	??_transmit_can_message_task^(0+512),f
  6280  176E  0850               	movf	(??_transmit_can_message_task+5)^(0+512),w
  6281  176F  3DCC               	addwfc	(??_transmit_can_message_task^(0+512)+1),f
  6282  1770  0851               	movf	(??_transmit_can_message_task+6)^(0+512),w
  6283  1771  3DCD               	addwfc	(??_transmit_can_message_task^(0+512)+2),f
  6284  1772  0852               	movf	(??_transmit_can_message_task+7)^(0+512),w
  6285  1773  3DCE               	addwfc	(??_transmit_can_message_task^(0+512)+3),f
  6286  1774  084E               	movf	(??_transmit_can_message_task^(0+512)+3),w
  6287  1775  1D03               	btfss	3,2
  6288  1776  2F81               	goto	l6167
  6289  1777  084D               	movf	(??_transmit_can_message_task^(0+512)+2),w
  6290  1778  1D03               	btfss	3,2
  6291  1779  2F81               	goto	l6167
  6292  177A  084C               	movf	(??_transmit_can_message_task^(0+512)+1),w
  6293  177B  1D03               	btfss	3,2
  6294  177C  2F81               	goto	l6167
  6295  177D  3032               	movlw	50
  6296  177E  024B               	subwf	??_transmit_can_message_task^(0+512),w
  6297  177F  1C03               	btfss	3,0
  6298  1780  0008               	return
  6299  1781                     l6167:	
  6300                           
  6301                           ;main.c: 331: {
  6302                           ;main.c: 332: sendSwitchesTimer = SYSTEM_tick;
  6303  1781  0140               	movlb	0	; select bank0
  6304  1782  0856               	movf	_SYSTEM_tick+3,w
  6305  1783  0142               	movlb	2	; select bank2
  6306  1784  00AC               	movwf	(transmit_can_message_task@sendSwitchesTimer+3)^(0+256)
  6307  1785  0140               	movlb	0	; select bank0
  6308  1786  0855               	movf	_SYSTEM_tick+2,w
  6309  1787  0142               	movlb	2	; select bank2
  6310  1788  00AB               	movwf	(transmit_can_message_task@sendSwitchesTimer+2)^(0+256)
  6311  1789  0140               	movlb	0	; select bank0
  6312  178A  0854               	movf	_SYSTEM_tick+1,w
  6313  178B  0142               	movlb	2	; select bank2
  6314  178C  00AA               	movwf	(transmit_can_message_task@sendSwitchesTimer+1)^(0+256)
  6315  178D  0140               	movlb	0	; select bank0
  6316  178E  0853               	movf	_SYSTEM_tick,w
  6317  178F  0142               	movlb	2	; select bank2
  6318  1790  00A9               	movwf	transmit_can_message_task@sendSwitchesTimer^(0+256)
  6319                           
  6320                           ;main.c: 333: EUSART_TO_CAN(can_msg);
  6321  1791  0140               	movlb	0	; select bank0
  6322  1792  084D               	movf	transmit_can_message_task@can_msg,w
  6323  1793  3185  25FE  3197   	fcall	_EUSART_TO_CAN
  6324                           
  6325                           ;main.c: 334: CAN_Tx(&can_send_message);
  6326  1796  30D8               	movlw	low _can_send_message
  6327  1797  0141               	movlb	1	; select bank1
  6328  1798  00E9               	movwf	CAN_Tx@pFrame^(0+128)
  6329  1799  3001               	movlw	high _can_send_message
  6330  179A  00EA               	movwf	(CAN_Tx@pFrame+1)^(0+128)
  6331  179B  3187  2785         	fcall	_CAN_Tx
  6332  179D  0008               	return
  6333  179E                     __end_of_transmit_can_message_task:	
  6334                           
  6335                           	psect	text5
  6336  05FE                     __ptext5:	
  6337 ;; *************** function _EUSART_TO_CAN *****************
  6338 ;; Defined at:
  6339 ;;		line 469 in file "../src/EUSART.c"
  6340 ;; Parameters:    Size  Location     Type
  6341 ;;  message         1    wreg     PTR struct .
  6342 ;;		 -> can_send_message(14), 
  6343 ;; Auto vars:     Size  Location     Type
  6344 ;;  message         1   21[BANK0 ] PTR struct .
  6345 ;;		 -> can_send_message(14), 
  6346 ;; Return value:  Size  Location     Type
  6347 ;;                  1    wreg      void 
  6348 ;; Registers used:
  6349 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6350 ;; Tracked objects:
  6351 ;;		On entry : 0/0
  6352 ;;		On exit  : 0/0
  6353 ;;		Unchanged: 0/0
  6354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6356 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6357 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6358 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6359 ;;Total ram usage:        5 bytes
  6360 ;; Hardware stack levels used:    1
  6361 ;; Hardware stack levels required when called:    5
  6362 ;; This function calls:
  6363 ;;		Nothing
  6364 ;; This function is called by:
  6365 ;;		_transmit_can_message_task
  6366 ;; This function uses a non-reentrant model
  6367 ;;
  6368                           
  6369                           
  6370                           ;psect for function _EUSART_TO_CAN
  6371  05FE                     _EUSART_TO_CAN:	
  6372                           
  6373                           ;incstack = 0
  6374                           ; Regs used in _EUSART_TO_CAN: [wreg-fsr1h+status,2+status,0]
  6375                           ;EUSART_TO_CAN@message stored from wreg
  6376  05FE  0140               	movlb	0	; select bank0
  6377  05FF  00B5               	movwf	EUSART_TO_CAN@message
  6378                           
  6379                           ;EUSART.c: 471: message->id = (message->id & 0xFFFFFF00);
  6380  0600  0835               	movf	EUSART_TO_CAN@message,w
  6381  0601  0086               	movwf	6
  6382  0602  3001               	movlw	1	; select bank2/3
  6383  0603  0087               	movwf	7
  6384  0604  3000               	movlw	0
  6385  0605  0501               	andwf	1,w
  6386  0606  00B1               	movwf	??_EUSART_TO_CAN
  6387  0607  3141               	addfsr 1,1
  6388  0608  30FF               	movlw	255
  6389  0609  0501               	andwf	1,w
  6390  060A  00B2               	movwf	??_EUSART_TO_CAN+1
  6391  060B  3141               	addfsr 1,1
  6392  060C  30FF               	movlw	255
  6393  060D  0501               	andwf	1,w
  6394  060E  00B3               	movwf	??_EUSART_TO_CAN+2
  6395  060F  3141               	addfsr 1,1
  6396  0610  30FF               	movlw	255
  6397  0611  0501               	andwf	1,w
  6398  0612  00B4               	movwf	??_EUSART_TO_CAN+3
  6399  0613  0835               	movf	EUSART_TO_CAN@message,w
  6400  0614  0086               	movwf	6
  6401  0615  3001               	movlw	1	; select bank2/3
  6402  0616  0087               	movwf	7
  6403  0617  0831               	movf	??_EUSART_TO_CAN,w
  6404  0618  3FC0               	movwi [0]fsr1
  6405  0619  0832               	movf	??_EUSART_TO_CAN+1,w
  6406  061A  3FC1               	movwi [1]fsr1
  6407  061B  0833               	movf	??_EUSART_TO_CAN+2,w
  6408  061C  3FC2               	movwi [2]fsr1
  6409  061D  0834               	movf	??_EUSART_TO_CAN+3,w
  6410  061E  3FC3               	movwi [3]fsr1
  6411                           
  6412                           ;EUSART.c: 472: switch(EUSART_packet_data[EUSART_ADDRESS_BYTE])
  6413  061F  2F78               	goto	l5945
  6414  0620                     l5911:	
  6415                           ;EUSART.c: 475: default:
  6416                           
  6417                           ;EUSART.c: 473: {
  6418                           ;EUSART.c: 474: case 0x55:
  6419                           
  6420                           
  6421                           ;EUSART.c: 476: message->id |= 0x81U;
  6422  0620  0140               	movlb	0	; select bank0
  6423  0621  0835               	movf	EUSART_TO_CAN@message,w
  6424  0622  0086               	movwf	6
  6425  0623  3001               	movlw	1	; select bank2/3
  6426  0624  0087               	movwf	7
  6427  0625  3081               	movlw	129
  6428  0626  0481               	iorwf	1,f
  6429  0627  3141               	addfsr 1,1
  6430  0628  3000               	movlw	0
  6431  0629  0481               	iorwf	1,f
  6432  062A  3141               	addfsr 1,1
  6433  062B  3000               	movlw	0
  6434  062C  0481               	iorwf	1,f
  6435  062D  3141               	addfsr 1,1
  6436  062E  3000               	movlw	0
  6437  062F  0481               	iorwf	1,f
  6438                           
  6439                           ;EUSART.c: 477: message->buf[0] = (EUSART_packet_data[EUSART_MACHINE_STATUS_BYTE] & 0b00
      +                          000111U)
  6440                           ;EUSART.c: 478: | (message->buf[7] & 0b10000000);
  6441  0630  0835               	movf	EUSART_TO_CAN@message,w
  6442  0631  3E0D               	addlw	13
  6443  0632  0086               	movwf	6
  6444  0633  3001               	movlw	1	; select bank2/3
  6445  0634  0087               	movwf	7
  6446  0635  3080               	movlw	128
  6447  0636  0501               	andwf	1,w
  6448  0637  00B1               	movwf	??_EUSART_TO_CAN
  6449  0638  0141               	movlb	1	; select bank1
  6450  0639  0824               	movf	(_EUSART_packet_data^(0+128)+4),w
  6451  063A  3907               	andlw	7
  6452  063B  0140               	movlb	0	; select bank0
  6453  063C  0431               	iorwf	??_EUSART_TO_CAN,w
  6454  063D  00B2               	movwf	??_EUSART_TO_CAN+1
  6455  063E  0835               	movf	EUSART_TO_CAN@message,w
  6456  063F  3E06               	addlw	6
  6457  0640  0086               	movwf	6
  6458  0641  3001               	movlw	1	; select bank2/3
  6459  0642  0087               	movwf	7
  6460  0643  0832               	movf	??_EUSART_TO_CAN+1,w
  6461  0644  0081               	movwf	1
  6462                           
  6463                           ;EUSART.c: 479: message->buf[0] |= machine_direction;
  6464  0645  0141               	movlb	1	; select bank1
  6465  0646  0852               	movf	_machine_direction^(0+128),w
  6466  0647  0140               	movlb	0	; select bank0
  6467  0648  00B1               	movwf	??_EUSART_TO_CAN
  6468  0649  0835               	movf	EUSART_TO_CAN@message,w
  6469  064A  3E06               	addlw	6
  6470  064B  0086               	movwf	6
  6471  064C  3001               	movlw	1	; select bank2/3
  6472  064D  0087               	movwf	7
  6473  064E  0831               	movf	??_EUSART_TO_CAN,w
  6474  064F  0481               	iorwf	1,f
  6475                           
  6476                           ;EUSART.c: 480: message->buf[0] |= ((EUSART_packet_data[EUSART_ERROR_BYTE_3] & 0b0001000
      +                          0U) << 1);
  6477  0650  0141               	movlb	1	; select bank1
  6478  0651  0823               	movf	(_EUSART_packet_data^(0+128)+3),w
  6479  0652  3910               	andlw	16
  6480  0653  0709               	addwf	9,w
  6481  0654  0140               	movlb	0	; select bank0
  6482  0655  00B1               	movwf	??_EUSART_TO_CAN
  6483  0656  0835               	movf	EUSART_TO_CAN@message,w
  6484  0657  3E06               	addlw	6
  6485  0658  0086               	movwf	6
  6486  0659  3001               	movlw	1	; select bank2/3
  6487  065A  0087               	movwf	7
  6488  065B  0831               	movf	??_EUSART_TO_CAN,w
  6489  065C  0481               	iorwf	1,f
  6490                           
  6491                           ;EUSART.c: 481: message->buf[0] |= (EUSART_packet_data[EUSART_WARNING_BYTE] & 0b01000000
      +                          U);
  6492  065D  0141               	movlb	1	; select bank1
  6493  065E  0825               	movf	(_EUSART_packet_data^(0+128)+5),w
  6494  065F  3940               	andlw	64
  6495  0660  0140               	movlb	0	; select bank0
  6496  0661  00B1               	movwf	??_EUSART_TO_CAN
  6497  0662  0835               	movf	EUSART_TO_CAN@message,w
  6498  0663  3E06               	addlw	6
  6499  0664  0086               	movwf	6
  6500  0665  3001               	movlw	1	; select bank2/3
  6501  0666  0087               	movwf	7
  6502  0667  0831               	movf	??_EUSART_TO_CAN,w
  6503  0668  0481               	iorwf	1,f
  6504                           
  6505                           ;EUSART.c: 482: message->buf_len = 1;
  6506  0669  0835               	movf	EUSART_TO_CAN@message,w
  6507  066A  3E05               	addlw	5
  6508  066B  0086               	movwf	6
  6509  066C  3001               	movlw	1	; select bank2/3
  6510  066D  0087               	movwf	7
  6511  066E  0181               	clrf	1
  6512  066F  0A81               	incf	1,f
  6513                           
  6514                           ;EUSART.c: 483: break;
  6515  0670  0008               	return
  6516  0671                     l5913:	
  6517                           ;EUSART.c: 484: case 0x63:
  6518                           
  6519                           
  6520                           ;EUSART.c: 485: if(CAN_ID_switch)
  6521  0671  0141               	movlb	1	; select bank1
  6522  0672  0858               	movf	_CAN_ID_switch^(0+128),w
  6523  0673  1903               	btfsc	3,2
  6524  0674  2EE2               	goto	l5929
  6525                           
  6526                           ;EUSART.c: 486: {
  6527                           ;EUSART.c: 487: message->id |= 0x91UL;
  6528  0675  0140               	movlb	0	; select bank0
  6529  0676  0835               	movf	EUSART_TO_CAN@message,w
  6530  0677  0086               	movwf	6
  6531  0678  3001               	movlw	1	; select bank2/3
  6532  0679  0087               	movwf	7
  6533  067A  3091               	movlw	145
  6534  067B  0481               	iorwf	1,f
  6535  067C  3141               	addfsr 1,1
  6536  067D  3000               	movlw	0
  6537  067E  0481               	iorwf	1,f
  6538  067F  3141               	addfsr 1,1
  6539  0680  3000               	movlw	0
  6540  0681  0481               	iorwf	1,f
  6541  0682  3141               	addfsr 1,1
  6542  0683  3000               	movlw	0
  6543  0684  0481               	iorwf	1,f
  6544                           
  6545                           ;EUSART.c: 488: message->buf[0] = EUSART_packet_data[2];
  6546  0685  0141               	movlb	1	; select bank1
  6547  0686  0822               	movf	(_EUSART_packet_data^(0+128)+2),w
  6548  0687  0140               	movlb	0	; select bank0
  6549  0688  00B1               	movwf	??_EUSART_TO_CAN
  6550  0689  0835               	movf	EUSART_TO_CAN@message,w
  6551  068A  3E06               	addlw	6
  6552  068B  0086               	movwf	6
  6553  068C  3001               	movlw	1	; select bank2/3
  6554  068D  0087               	movwf	7
  6555  068E  0831               	movf	??_EUSART_TO_CAN,w
  6556  068F  0081               	movwf	1
  6557                           
  6558                           ;EUSART.c: 489: message->buf[1] = EUSART_packet_data[3];
  6559  0690  0141               	movlb	1	; select bank1
  6560  0691  0823               	movf	(_EUSART_packet_data^(0+128)+3),w
  6561  0692  0140               	movlb	0	; select bank0
  6562  0693  00B1               	movwf	??_EUSART_TO_CAN
  6563  0694  0835               	movf	EUSART_TO_CAN@message,w
  6564  0695  3E07               	addlw	7
  6565  0696  0086               	movwf	6
  6566  0697  3001               	movlw	1	; select bank2/3
  6567  0698  0087               	movwf	7
  6568  0699  0831               	movf	??_EUSART_TO_CAN,w
  6569  069A  0081               	movwf	1
  6570                           
  6571                           ;EUSART.c: 490: message->buf[2] = EUSART_packet_data[4];
  6572  069B  0141               	movlb	1	; select bank1
  6573  069C  0824               	movf	(_EUSART_packet_data^(0+128)+4),w
  6574  069D  0140               	movlb	0	; select bank0
  6575  069E  00B1               	movwf	??_EUSART_TO_CAN
  6576  069F  0835               	movf	EUSART_TO_CAN@message,w
  6577  06A0  3E08               	addlw	8
  6578  06A1  0086               	movwf	6
  6579  06A2  3001               	movlw	1	; select bank2/3
  6580  06A3  0087               	movwf	7
  6581  06A4  0831               	movf	??_EUSART_TO_CAN,w
  6582  06A5  0081               	movwf	1
  6583                           
  6584                           ;EUSART.c: 491: message->buf[3] = EUSART_packet_data[5];
  6585  06A6  0141               	movlb	1	; select bank1
  6586  06A7  0825               	movf	(_EUSART_packet_data^(0+128)+5),w
  6587  06A8  0140               	movlb	0	; select bank0
  6588  06A9  00B1               	movwf	??_EUSART_TO_CAN
  6589  06AA  0835               	movf	EUSART_TO_CAN@message,w
  6590  06AB  3E09               	addlw	9
  6591  06AC  0086               	movwf	6
  6592  06AD  3001               	movlw	1	; select bank2/3
  6593  06AE  0087               	movwf	7
  6594  06AF  0831               	movf	??_EUSART_TO_CAN,w
  6595  06B0  0081               	movwf	1
  6596                           
  6597                           ;EUSART.c: 492: message->buf[4] = EUSART_packet_data[6];
  6598  06B1  0141               	movlb	1	; select bank1
  6599  06B2  0826               	movf	(_EUSART_packet_data^(0+128)+6),w
  6600  06B3  0140               	movlb	0	; select bank0
  6601  06B4  00B1               	movwf	??_EUSART_TO_CAN
  6602  06B5  0835               	movf	EUSART_TO_CAN@message,w
  6603  06B6  3E0A               	addlw	10
  6604  06B7  0086               	movwf	6
  6605  06B8  3001               	movlw	1	; select bank2/3
  6606  06B9  0087               	movwf	7
  6607  06BA  0831               	movf	??_EUSART_TO_CAN,w
  6608  06BB  0081               	movwf	1
  6609                           
  6610                           ;EUSART.c: 493: message->buf[5] = EUSART_packet_data[7];
  6611  06BC  0141               	movlb	1	; select bank1
  6612  06BD  0827               	movf	(_EUSART_packet_data^(0+128)+7),w
  6613  06BE  0140               	movlb	0	; select bank0
  6614  06BF  00B1               	movwf	??_EUSART_TO_CAN
  6615  06C0  0835               	movf	EUSART_TO_CAN@message,w
  6616  06C1  3E0B               	addlw	11
  6617  06C2  0086               	movwf	6
  6618  06C3  3001               	movlw	1	; select bank2/3
  6619  06C4  0087               	movwf	7
  6620  06C5  0831               	movf	??_EUSART_TO_CAN,w
  6621  06C6  0081               	movwf	1
  6622                           
  6623                           ;EUSART.c: 494: if(EUSART_packet_data[1] & 0b00000001)
  6624  06C7  0141               	movlb	1	; select bank1
  6625  06C8  1C21               	btfss	(_EUSART_packet_data^(0+128)+1),0
  6626  06C9  2ECD               	goto	l5921
  6627                           
  6628                           ;EUSART.c: 495: {
  6629                           ;EUSART.c: 496: message->buf[7] = (EUSART_packet_data[1] & 0b00000001U);
  6630  06CA  0821               	movf	(_EUSART_packet_data^(0+128)+1),w
  6631  06CB  3901               	andlw	1
  6632  06CC  2ECE               	goto	L1
  6633  06CD                     l5921:	
  6634                           ;EUSART.c: 497: }
  6635                           
  6636                           
  6637                           ;EUSART.c: 498: else
  6638                           ;EUSART.c: 499: {
  6639                           ;EUSART.c: 500: message->buf[7] = 0x02;
  6640  06CD  3002               	movlw	2
  6641  06CE                     L1:	
  6642  06CE  0140               	movlb	0	; select bank0
  6643  06CF  00B1               	movwf	??_EUSART_TO_CAN
  6644  06D0  0835               	movf	EUSART_TO_CAN@message,w
  6645  06D1  3E0D               	addlw	13
  6646  06D2  0086               	movwf	6
  6647  06D3  3001               	movlw	1	; select bank2/3
  6648  06D4  0087               	movwf	7
  6649  06D5  0831               	movf	??_EUSART_TO_CAN,w
  6650  06D6  0081               	movwf	1
  6651                           
  6652                           ;EUSART.c: 501: }
  6653                           ;EUSART.c: 502: if((EUSART_packet_data[8] & 0b00000011) || !(EUSART_packet_data[1] & 0b0
      +                          0000011))
  6654  06D7  0141               	movlb	1	; select bank1
  6655  06D8  0828               	movf	(_EUSART_packet_data^(0+128)+8),w
  6656  06D9  3903               	andlw	3
  6657  06DA  1D03               	btfss	3,2
  6658  06DB  2EE0               	goto	l5927
  6659  06DC  0821               	movf	(_EUSART_packet_data^(0+128)+1),w
  6660  06DD  3903               	andlw	3
  6661  06DE  1D03               	btfss	3,2
  6662  06DF  0008               	return
  6663  06E0                     l5927:	
  6664                           
  6665                           ;EUSART.c: 503: {
  6666                           ;EUSART.c: 504: CAN_ID_switch = 0;
  6667  06E0  01D8               	clrf	_CAN_ID_switch^(0+128)
  6668                           
  6669                           ;EUSART.c: 505: }
  6670                           ;EUSART.c: 506: }
  6671  06E1  0008               	return
  6672  06E2                     l5929:	
  6673                           
  6674                           ;EUSART.c: 507: else
  6675                           ;EUSART.c: 508: {
  6676                           ;EUSART.c: 509: message->id |= 0xB1UL;
  6677  06E2  0140               	movlb	0	; select bank0
  6678  06E3  0835               	movf	EUSART_TO_CAN@message,w
  6679  06E4  0086               	movwf	6
  6680  06E5  3001               	movlw	1	; select bank2/3
  6681  06E6  0087               	movwf	7
  6682  06E7  30B1               	movlw	177
  6683  06E8  0481               	iorwf	1,f
  6684  06E9  3141               	addfsr 1,1
  6685  06EA  3000               	movlw	0
  6686  06EB  0481               	iorwf	1,f
  6687  06EC  3141               	addfsr 1,1
  6688  06ED  3000               	movlw	0
  6689  06EE  0481               	iorwf	1,f
  6690  06EF  3141               	addfsr 1,1
  6691  06F0  3000               	movlw	0
  6692  06F1  0481               	iorwf	1,f
  6693                           
  6694                           ;EUSART.c: 510: message->buf[0] = EUSART_packet_data[11];
  6695  06F2  0141               	movlb	1	; select bank1
  6696  06F3  082B               	movf	(_EUSART_packet_data^(0+128)+11),w
  6697  06F4  0140               	movlb	0	; select bank0
  6698  06F5  00B1               	movwf	??_EUSART_TO_CAN
  6699  06F6  0835               	movf	EUSART_TO_CAN@message,w
  6700  06F7  3E06               	addlw	6
  6701  06F8  0086               	movwf	6
  6702  06F9  3001               	movlw	1	; select bank2/3
  6703  06FA  0087               	movwf	7
  6704  06FB  0831               	movf	??_EUSART_TO_CAN,w
  6705  06FC  0081               	movwf	1
  6706                           
  6707                           ;EUSART.c: 511: message->buf[1] = EUSART_packet_data[12];
  6708  06FD  0141               	movlb	1	; select bank1
  6709  06FE  082C               	movf	(_EUSART_packet_data^(0+128)+12),w
  6710  06FF  0140               	movlb	0	; select bank0
  6711  0700  00B1               	movwf	??_EUSART_TO_CAN
  6712  0701  0835               	movf	EUSART_TO_CAN@message,w
  6713  0702  3E07               	addlw	7
  6714  0703  0086               	movwf	6
  6715  0704  3001               	movlw	1	; select bank2/3
  6716  0705  0087               	movwf	7
  6717  0706  0831               	movf	??_EUSART_TO_CAN,w
  6718  0707  0081               	movwf	1
  6719                           
  6720                           ;EUSART.c: 512: message->buf[2] = EUSART_packet_data[13];
  6721  0708  0141               	movlb	1	; select bank1
  6722  0709  082D               	movf	(_EUSART_packet_data^(0+128)+13),w
  6723  070A  0140               	movlb	0	; select bank0
  6724  070B  00B1               	movwf	??_EUSART_TO_CAN
  6725  070C  0835               	movf	EUSART_TO_CAN@message,w
  6726  070D  3E08               	addlw	8
  6727  070E  0086               	movwf	6
  6728  070F  3001               	movlw	1	; select bank2/3
  6729  0710  0087               	movwf	7
  6730  0711  0831               	movf	??_EUSART_TO_CAN,w
  6731  0712  0081               	movwf	1
  6732                           
  6733                           ;EUSART.c: 513: if(EUSART_packet_data[8] & 0b00000001)
  6734  0713  0141               	movlb	1	; select bank1
  6735  0714  1C28               	btfss	(_EUSART_packet_data^(0+128)+8),0
  6736  0715  2F19               	goto	l5935
  6737                           
  6738                           ;EUSART.c: 514: {
  6739                           ;EUSART.c: 515: message->buf[7] = (EUSART_packet_data[1] & 0b00000001U);
  6740  0716  0821               	movf	(_EUSART_packet_data^(0+128)+1),w
  6741  0717  3901               	andlw	1
  6742  0718  2F1A               	goto	L2
  6743  0719                     l5935:	
  6744                           ;EUSART.c: 516: }
  6745                           
  6746                           
  6747                           ;EUSART.c: 517: else
  6748                           ;EUSART.c: 518: {
  6749                           ;EUSART.c: 519: message->buf[7] = 0x02;
  6750  0719  3002               	movlw	2
  6751  071A                     L2:	
  6752  071A  0140               	movlb	0	; select bank0
  6753  071B  00B1               	movwf	??_EUSART_TO_CAN
  6754  071C  0835               	movf	EUSART_TO_CAN@message,w
  6755  071D  3E0D               	addlw	13
  6756  071E  0086               	movwf	6
  6757  071F  3001               	movlw	1	; select bank2/3
  6758  0720  0087               	movwf	7
  6759  0721  0831               	movf	??_EUSART_TO_CAN,w
  6760  0722  0081               	movwf	1
  6761                           
  6762                           ;EUSART.c: 520: }
  6763                           ;EUSART.c: 521: if((EUSART_packet_data[1] & 0b00000011) || !(EUSART_packet_data[8] & 0b0
      +                          0000011))
  6764  0723  0141               	movlb	1	; select bank1
  6765  0724  0821               	movf	(_EUSART_packet_data^(0+128)+1),w
  6766  0725  3903               	andlw	3
  6767  0726  1D03               	btfss	3,2
  6768  0727  2F2C               	goto	l1043
  6769  0728  0828               	movf	(_EUSART_packet_data^(0+128)+8),w
  6770  0729  3903               	andlw	3
  6771  072A  1D03               	btfss	3,2
  6772  072B  0008               	return
  6773  072C                     l1043:	
  6774                           
  6775                           ;EUSART.c: 522: {
  6776                           ;EUSART.c: 523: CAN_ID_switch = 1;
  6777  072C  01D8               	clrf	_CAN_ID_switch^(0+128)
  6778  072D  0AD8               	incf	_CAN_ID_switch^(0+128),f
  6779                           
  6780                           ;EUSART.c: 524: }
  6781                           ;EUSART.c: 525: }
  6782                           ;EUSART.c: 526: break;
  6783  072E  0008               	return
  6784  072F                     l5941:	
  6785                           ;EUSART.c: 527: case 0xF0:
  6786                           
  6787                           
  6788                           ;EUSART.c: 528: message->id |= 0xA1UL;
  6789  072F  0140               	movlb	0	; select bank0
  6790  0730  0835               	movf	EUSART_TO_CAN@message,w
  6791  0731  0086               	movwf	6
  6792  0732  3001               	movlw	1	; select bank2/3
  6793  0733  0087               	movwf	7
  6794  0734  30A1               	movlw	161
  6795  0735  0481               	iorwf	1,f
  6796  0736  3141               	addfsr 1,1
  6797  0737  3000               	movlw	0
  6798  0738  0481               	iorwf	1,f
  6799  0739  3141               	addfsr 1,1
  6800  073A  3000               	movlw	0
  6801  073B  0481               	iorwf	1,f
  6802  073C  3141               	addfsr 1,1
  6803  073D  3000               	movlw	0
  6804  073E  0481               	iorwf	1,f
  6805                           
  6806                           ;EUSART.c: 530: message->buf[1] = (EUSART_packet_data[1] & 0b00000010U);
  6807  073F  0141               	movlb	1	; select bank1
  6808  0740  0821               	movf	(_EUSART_packet_data^(0+128)+1),w
  6809  0741  3902               	andlw	2
  6810  0742  0140               	movlb	0	; select bank0
  6811  0743  00B1               	movwf	??_EUSART_TO_CAN
  6812  0744  0835               	movf	EUSART_TO_CAN@message,w
  6813  0745  3E07               	addlw	7
  6814  0746  0086               	movwf	6
  6815  0747  3001               	movlw	1	; select bank2/3
  6816  0748  0087               	movwf	7
  6817  0749  0831               	movf	??_EUSART_TO_CAN,w
  6818  074A  0081               	movwf	1
  6819                           
  6820                           ;EUSART.c: 531: message->buf[2] = EUSART_packet_data[2];
  6821  074B  0141               	movlb	1	; select bank1
  6822  074C  0822               	movf	(_EUSART_packet_data^(0+128)+2),w
  6823  074D  0140               	movlb	0	; select bank0
  6824  074E  00B1               	movwf	??_EUSART_TO_CAN
  6825  074F  0835               	movf	EUSART_TO_CAN@message,w
  6826  0750  3E08               	addlw	8
  6827  0751  0086               	movwf	6
  6828  0752  3001               	movlw	1	; select bank2/3
  6829  0753  0087               	movwf	7
  6830  0754  0831               	movf	??_EUSART_TO_CAN,w
  6831  0755  0081               	movwf	1
  6832                           
  6833                           ;EUSART.c: 532: message->buf[3] = EUSART_packet_data[3];
  6834  0756  0141               	movlb	1	; select bank1
  6835  0757  0823               	movf	(_EUSART_packet_data^(0+128)+3),w
  6836  0758  0140               	movlb	0	; select bank0
  6837  0759  00B1               	movwf	??_EUSART_TO_CAN
  6838  075A  0835               	movf	EUSART_TO_CAN@message,w
  6839  075B  3E09               	addlw	9
  6840  075C  0086               	movwf	6
  6841  075D  3001               	movlw	1	; select bank2/3
  6842  075E  0087               	movwf	7
  6843  075F  0831               	movf	??_EUSART_TO_CAN,w
  6844  0760  0081               	movwf	1
  6845                           
  6846                           ;EUSART.c: 533: message->buf[4] = EUSART_packet_data[4];
  6847  0761  0141               	movlb	1	; select bank1
  6848  0762  0824               	movf	(_EUSART_packet_data^(0+128)+4),w
  6849  0763  0140               	movlb	0	; select bank0
  6850  0764  00B1               	movwf	??_EUSART_TO_CAN
  6851  0765  0835               	movf	EUSART_TO_CAN@message,w
  6852  0766  3E0A               	addlw	10
  6853  0767  0086               	movwf	6
  6854  0768  3001               	movlw	1	; select bank2/3
  6855  0769  0087               	movwf	7
  6856  076A  0831               	movf	??_EUSART_TO_CAN,w
  6857  076B  0081               	movwf	1
  6858                           
  6859                           ;EUSART.c: 534: message->buf[5] = EUSART_packet_data[5];
  6860  076C  0141               	movlb	1	; select bank1
  6861  076D  0825               	movf	(_EUSART_packet_data^(0+128)+5),w
  6862  076E  0140               	movlb	0	; select bank0
  6863  076F  00B1               	movwf	??_EUSART_TO_CAN
  6864  0770  0835               	movf	EUSART_TO_CAN@message,w
  6865  0771  3E0B               	addlw	11
  6866  0772  0086               	movwf	6
  6867  0773  3001               	movlw	1	; select bank2/3
  6868  0774  0087               	movwf	7
  6869  0775  0831               	movf	??_EUSART_TO_CAN,w
  6870  0776  0081               	movwf	1
  6871                           
  6872                           ;EUSART.c: 536: }
  6873                           
  6874                           ;EUSART.c: 535: break;
  6875  0777  0008               	return
  6876  0778                     l5945:	
  6877  0778  0141               	movlb	1	; select bank1
  6878  0779  0820               	movf	_EUSART_packet_data^(0+128),w
  6879                           
  6880                           ; Switch size 1, requested type "space"
  6881                           ; Number of cases is 3, Range of values is 85 to 240
  6882                           ; switch strategies available:
  6883                           ; Name         Instructions Cycles
  6884                           ; simple_byte           10     6 (average)
  6885                           ; jumptable            263     9 (fixed)
  6886                           ;	Chosen strategy is simple_byte
  6887  077A  3A55               	xorlw	85	; case 85
  6888  077B  1903               	skipnz
  6889  077C  2E20               	goto	l5911
  6890  077D  3A36               	xorlw	54	; case 99
  6891  077E  1903               	skipnz
  6892  077F  2E71               	goto	l5913
  6893  0780  3A93               	xorlw	147	; case 240
  6894  0781  1903               	skipnz
  6895  0782  2F2F               	goto	l5941
  6896  0783  2E20               	goto	l5911
  6897  0784  0008               	return
  6898  0785                     __end_of_EUSART_TO_CAN:	
  6899                           
  6900                           	psect	text6
  6901  0785                     __ptext6:	
  6902 ;; *************** function _CAN_Tx *****************
  6903 ;; Defined at:
  6904 ;;		line 503 in file "../src/CAN_SPI_PIC16.c"
  6905 ;; Parameters:    Size  Location     Type
  6906 ;;  pFrame          2    0[BANK1 ] PTR struct .
  6907 ;;		 -> can_send_message(14), J1939_Tx@can(14), 
  6908 ;; Auto vars:     Size  Location     Type
  6909 ;;		None
  6910 ;; Return value:  Size  Location     Type
  6911 ;;                  1    wreg      unsigned char 
  6912 ;; Registers used:
  6913 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6914 ;; Tracked objects:
  6915 ;;		On entry : 0/0
  6916 ;;		On exit  : 0/0
  6917 ;;		Unchanged: 0/0
  6918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6919 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6921 ;;      Temps:          0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6922 ;;      Totals:         0       0       2       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6923 ;;Total ram usage:        6 bytes
  6924 ;; Hardware stack levels used:    1
  6925 ;; Hardware stack levels required when called:    9
  6926 ;; This function calls:
  6927 ;;		_CAN_TxMailbox
  6928 ;;		__EnqueueTxMessage
  6929 ;; This function is called by:
  6930 ;;		_transmit_can_message_task
  6931 ;;		_J1939_Tx
  6932 ;; This function uses a non-reentrant model
  6933 ;;
  6934                           
  6935                           
  6936                           ;psect for function _CAN_Tx
  6937  0785                     _CAN_Tx:	
  6938                           
  6939                           ;CAN_SPI_PIC16.c: 507: if( ( ( ( uint16_t )( ( CAN_txMessageQ.m_putIdx ) - ( CAN_txMessa
      +                          geQ.m_getIdx ) ) ) == 0 ) )
  6940                           
  6941                           ;incstack = 0
  6942                           ; Regs used in _CAN_Tx: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6943  0785  301E               	movlw	30
  6944  0786  0086               	movwf	6
  6945  0787  3027               	movlw	39
  6946  0788  0087               	movwf	7
  6947  0789  0801               	movf	1,w
  6948  078A  0143               	movlb	3	; select bank3
  6949  078B  00EC               	movwf	??_CAN_Tx^(0+384)
  6950  078C  01ED               	clrf	(??_CAN_Tx^(0+384)+1)
  6951  078D  09EC               	comf	??_CAN_Tx^(0+384),f
  6952  078E  09ED               	comf	(??_CAN_Tx^(0+384)+1),f
  6953  078F  0AEC               	incf	??_CAN_Tx^(0+384),f
  6954  0790  1903               	skipnz
  6955  0791  0AED               	incf	(??_CAN_Tx^(0+384)+1),f
  6956  0792  301E               	movlw	30
  6957  0793  0086               	movwf	6
  6958  0794  3027               	movlw	39
  6959  0795  0087               	movwf	7
  6960  0796  3141               	addfsr 1,1
  6961  0797  0801               	movf	1,w
  6962  0798  076C               	addwf	??_CAN_Tx^(0+384),w
  6963  0799  00EE               	movwf	(??_CAN_Tx+2)^(0+384)
  6964  079A  086D               	movf	(??_CAN_Tx+1)^(0+384),w
  6965  079B  1803               	skipnc
  6966  079C  0A6D               	incf	(??_CAN_Tx+1)^(0+384),w
  6967  079D  00EF               	movwf	((??_CAN_Tx+2)^(0+384)+1)
  6968  079E  086E               	movf	(??_CAN_Tx+2)^(0+384),w
  6969  079F  046F               	iorwf	((??_CAN_Tx+2)^(0+384)+1),w
  6970  07A0  1D03               	btfss	3,2
  6971  07A1  2FBF               	goto	l5803
  6972                           
  6973                           ;CAN_SPI_PIC16.c: 508: {
  6974                           ;CAN_SPI_PIC16.c: 509: if( CAN_TxMailbox( pFrame, 0 ) )
  6975  07A2  0141               	movlb	1	; select bank1
  6976  07A3  086A               	movf	(CAN_Tx@pFrame+1)^(0+128),w
  6977  07A4  0140               	movlb	0	; select bank0
  6978  07A5  00C9               	movwf	CAN_TxMailbox@pFrame+1
  6979  07A6  0141               	movlb	1	; select bank1
  6980  07A7  0869               	movf	CAN_Tx@pFrame^(0+128),w
  6981  07A8  0140               	movlb	0	; select bank0
  6982  07A9  00C8               	movwf	CAN_TxMailbox@pFrame
  6983  07AA  3000               	movlw	0
  6984  07AB  00CA               	movwf	CAN_TxMailbox@which
  6985  07AC  00CB               	movwf	CAN_TxMailbox@which+1
  6986  07AD  3195  2590  3187   	fcall	_CAN_TxMailbox
  6987  07B0  3A00               	xorlw	0
  6988  07B1  1903               	skipnz
  6989  07B2  2FF0               	goto	l5811
  6990                           
  6991                           ;CAN_SPI_PIC16.c: 510: {
  6992                           ;CAN_SPI_PIC16.c: 512: _EnqueueTxMessage( pFrame );
  6993  07B3  0141               	movlb	1	; select bank1
  6994  07B4  086A               	movf	(CAN_Tx@pFrame+1)^(0+128),w
  6995  07B5  0140               	movlb	0	; select bank0
  6996  07B6  00C9               	movwf	__EnqueueTxMessage@pFrame+1
  6997  07B7  0141               	movlb	1	; select bank1
  6998  07B8  0869               	movf	CAN_Tx@pFrame^(0+128),w
  6999  07B9  0140               	movlb	0	; select bank0
  7000  07BA  00C8               	movwf	__EnqueueTxMessage@pFrame
  7001  07BB  3194  242C  3187   	fcall	__EnqueueTxMessage
  7002                           
  7003                           ;CAN_SPI_PIC16.c: 513: }
  7004                           ;CAN_SPI_PIC16.c: 514: }
  7005  07BE  2FF0               	goto	l5811
  7006  07BF                     l5803:	
  7007                           
  7008                           ;CAN_SPI_PIC16.c: 515: else if( !( ( ( uint16_t )( ( CAN_txMessageQ.m_putIdx ) - ( CAN_t
      +                          xMessageQ.m_getIdx ) ) ) == ( 16U ) ) )
  7009  07BF  301E               	movlw	30
  7010  07C0  0086               	movwf	6
  7011  07C1  3027               	movlw	39
  7012  07C2  0087               	movwf	7
  7013  07C3  0801               	movf	1,w
  7014  07C4  0143               	movlb	3	; select bank3
  7015  07C5  00EC               	movwf	??_CAN_Tx^(0+384)
  7016  07C6  01ED               	clrf	(??_CAN_Tx^(0+384)+1)
  7017  07C7  09EC               	comf	??_CAN_Tx^(0+384),f
  7018  07C8  09ED               	comf	(??_CAN_Tx^(0+384)+1),f
  7019  07C9  0AEC               	incf	??_CAN_Tx^(0+384),f
  7020  07CA  1903               	skipnz
  7021  07CB  0AED               	incf	(??_CAN_Tx^(0+384)+1),f
  7022  07CC  301E               	movlw	30
  7023  07CD  0086               	movwf	6
  7024  07CE  3027               	movlw	39
  7025  07CF  0087               	movwf	7
  7026  07D0  3141               	addfsr 1,1
  7027  07D1  0801               	movf	1,w
  7028  07D2  076C               	addwf	??_CAN_Tx^(0+384),w
  7029  07D3  00EE               	movwf	(??_CAN_Tx+2)^(0+384)
  7030  07D4  086D               	movf	(??_CAN_Tx+1)^(0+384),w
  7031  07D5  1803               	skipnc
  7032  07D6  0A6D               	incf	(??_CAN_Tx+1)^(0+384),w
  7033  07D7  00EF               	movwf	((??_CAN_Tx+2)^(0+384)+1)
  7034  07D8  3010               	movlw	16
  7035  07D9  066E               	xorwf	(??_CAN_Tx+2)^(0+384),w
  7036  07DA  046F               	iorwf	((??_CAN_Tx+2)^(0+384)+1),w
  7037  07DB  1903               	btfsc	3,2
  7038  07DC  2FE9               	goto	l5807
  7039                           
  7040                           ;CAN_SPI_PIC16.c: 516: {
  7041                           ;CAN_SPI_PIC16.c: 518: _EnqueueTxMessage( pFrame );
  7042  07DD  0141               	movlb	1	; select bank1
  7043  07DE  086A               	movf	(CAN_Tx@pFrame+1)^(0+128),w
  7044  07DF  0140               	movlb	0	; select bank0
  7045  07E0  00C9               	movwf	__EnqueueTxMessage@pFrame+1
  7046  07E1  0141               	movlb	1	; select bank1
  7047  07E2  0869               	movf	CAN_Tx@pFrame^(0+128),w
  7048  07E3  0140               	movlb	0	; select bank0
  7049  07E4  00C8               	movwf	__EnqueueTxMessage@pFrame
  7050  07E5  3194  242C  3187   	fcall	__EnqueueTxMessage
  7051                           
  7052                           ;CAN_SPI_PIC16.c: 519: }
  7053  07E8  2FF0               	goto	l5811
  7054  07E9                     l5807:	
  7055                           
  7056                           ;CAN_SPI_PIC16.c: 520: else
  7057                           ;CAN_SPI_PIC16.c: 521: {
  7058                           ;CAN_SPI_PIC16.c: 523: MCP2515_diag.txQueueOverflows++;
  7059  07E9  3001               	movlw	1
  7060  07EA  0142               	movlb	2	; select bank2
  7061  07EB  07C7               	addwf	(_MCP2515_diag^(0+256)+2),f
  7062  07EC  3000               	movlw	0
  7063  07ED  3DC8               	addwfc	((_MCP2515_diag+1)^(0+256)+2),f
  7064                           
  7065                           ;CAN_SPI_PIC16.c: 524: return 1;
  7066  07EE  3001               	movlw	1
  7067  07EF  0008               	return
  7068  07F0                     l5811:	
  7069                           
  7070                           ;CAN_SPI_PIC16.c: 525: }
  7071                           ;CAN_SPI_PIC16.c: 528: return 0;
  7072  07F0  3000               	movlw	0
  7073  07F1  0008               	return
  7074  07F2                     __end_of_CAN_Tx:	
  7075                           
  7076                           	psect	text7
  7077  142C                     __ptext7:	
  7078 ;; *************** function __EnqueueTxMessage *****************
  7079 ;; Defined at:
  7080 ;;		line 324 in file "../src/CAN_SPI_PIC16.c"
  7081 ;; Parameters:    Size  Location     Type
  7082 ;;  pFrame          2   40[BANK0 ] PTR struct .
  7083 ;;		 -> can_send_message(14), J1939_Tx@can(14), 
  7084 ;; Auto vars:     Size  Location     Type
  7085 ;;  pBuf            2   42[BANK0 ] PTR struct .
  7086 ;;		 -> CAN_txMessageQ.m_entry(208), CAN_txMessageQ(210), 
  7087 ;; Return value:  Size  Location     Type
  7088 ;;                  1    wreg      void 
  7089 ;; Registers used:
  7090 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7091 ;; Tracked objects:
  7092 ;;		On entry : 0/0
  7093 ;;		On exit  : 0/0
  7094 ;;		Unchanged: 0/0
  7095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7096 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7097 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7098 ;;      Temps:          0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7099 ;;      Totals:         0       4       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7100 ;;Total ram usage:       10 bytes
  7101 ;; Hardware stack levels used:    1
  7102 ;; Hardware stack levels required when called:    6
  7103 ;; This function calls:
  7104 ;;		__MessageToTxBuffer
  7105 ;;		___wmul
  7106 ;; This function is called by:
  7107 ;;		_CAN_Tx
  7108 ;; This function uses a non-reentrant model
  7109 ;;
  7110                           
  7111                           
  7112                           ;psect for function __EnqueueTxMessage
  7113  142C                     __EnqueueTxMessage:	
  7114                           
  7115                           ;CAN_SPI_PIC16.c: 326: MessageBuffer_t *pBuf = &( CAN_txMessageQ.m_entry )[ CAN_txMessag
      +                          eQ.m_putIdx & ( ( 16U ) - 1 ) ];
  7116                           
  7117                           ;incstack = 0
  7118                           ; Regs used in __EnqueueTxMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7119  142C  301E               	movlw	30
  7120  142D  0086               	movwf	6
  7121  142E  3027               	movlw	39
  7122  142F  0087               	movwf	7
  7123  1430  3141               	addfsr 1,1
  7124  1431  0801               	movf	1,w
  7125  1432  390F               	andlw	15
  7126  1433  0143               	movlb	3	; select bank3
  7127  1434  00E6               	movwf	??__EnqueueTxMessage^(0+384)
  7128  1435  01E7               	clrf	(??__EnqueueTxMessage^(0+384)+1)
  7129  1436  0866               	movf	??__EnqueueTxMessage^(0+384),w
  7130  1437  0140               	movlb	0	; select bank0
  7131  1438  00B1               	movwf	___wmul@multiplier
  7132  1439  0143               	movlb	3	; select bank3
  7133  143A  0867               	movf	(??__EnqueueTxMessage+1)^(0+384),w
  7134  143B  0140               	movlb	0	; select bank0
  7135  143C  00B2               	movwf	___wmul@multiplier+1
  7136  143D  300D               	movlw	13
  7137  143E  00B3               	movwf	___wmul@multiplicand
  7138  143F  3000               	movlw	0
  7139  1440  00B4               	movwf	___wmul@multiplicand+1
  7140  1441  3192  2205  3194   	fcall	___wmul
  7141  1444  3020               	movlw	32
  7142  1445  0143               	movlb	3	; select bank3
  7143  1446  00E8               	movwf	(??__EnqueueTxMessage+2)^(0+384)
  7144  1447  3027               	movlw	39
  7145  1448  00E9               	movwf	((??__EnqueueTxMessage+2)^(0+384)+1)
  7146  1449  0140               	movlb	0	; select bank0
  7147  144A  0831               	movf	?___wmul,w
  7148  144B  0143               	movlb	3	; select bank3
  7149  144C  0768               	addwf	(??__EnqueueTxMessage+2)^(0+384),w
  7150  144D  00EA               	movwf	(??__EnqueueTxMessage+4)^(0+384)
  7151  144E  0140               	movlb	0	; select bank0
  7152  144F  0832               	movf	?___wmul+1,w
  7153  1450  0143               	movlb	3	; select bank3
  7154  1451  3D69               	addwfc	(??__EnqueueTxMessage+3)^(0+384),w
  7155  1452  00EB               	movwf	(??__EnqueueTxMessage+5)^(0+384)
  7156  1453  086A               	movf	(??__EnqueueTxMessage+4)^(0+384),w
  7157  1454  0140               	movlb	0	; select bank0
  7158  1455  00CA               	movwf	__EnqueueTxMessage@pBuf
  7159  1456  0143               	movlb	3	; select bank3
  7160  1457  086B               	movf	(??__EnqueueTxMessage+5)^(0+384),w
  7161  1458  0140               	movlb	0	; select bank0
  7162  1459  00CB               	movwf	__EnqueueTxMessage@pBuf+1
  7163                           
  7164                           ;CAN_SPI_PIC16.c: 328: _MessageToTxBuffer( pFrame, pBuf );
  7165  145A  0849               	movf	__EnqueueTxMessage@pFrame+1,w
  7166  145B  00B2               	movwf	__MessageToTxBuffer@pFrame+1
  7167  145C  0848               	movf	__EnqueueTxMessage@pFrame,w
  7168  145D  00B1               	movwf	__MessageToTxBuffer@pFrame
  7169  145E  084B               	movf	__EnqueueTxMessage@pBuf+1,w
  7170  145F  00B4               	movwf	__MessageToTxBuffer@pBuf+1
  7171  1460  084A               	movf	__EnqueueTxMessage@pBuf,w
  7172  1461  00B3               	movwf	__MessageToTxBuffer@pBuf
  7173  1462  318A  228D         	fcall	__MessageToTxBuffer
  7174                           
  7175                           ;CAN_SPI_PIC16.c: 330: CAN_txMessageQ.m_putIdx++;
  7176  1464  3001               	movlw	1
  7177  1465  0143               	movlb	3	; select bank3
  7178  1466  00E6               	movwf	??__EnqueueTxMessage^(0+384)
  7179  1467  301E               	movlw	30
  7180  1468  0086               	movwf	6
  7181  1469  3027               	movlw	39
  7182  146A  0087               	movwf	7
  7183  146B  3141               	addfsr 1,1
  7184  146C  0866               	movf	??__EnqueueTxMessage^(0+384),w
  7185  146D  0781               	addwf	1,f
  7186  146E  0008               	return
  7187  146F                     __end_of__EnqueueTxMessage:	
  7188                           
  7189                           	psect	text8
  7190  1590                     __ptext8:	
  7191 ;; *************** function _CAN_TxMailbox *****************
  7192 ;; Defined at:
  7193 ;;		line 539 in file "../src/CAN_SPI_PIC16.c"
  7194 ;; Parameters:    Size  Location     Type
  7195 ;;  pFrame          2   40[BANK0 ] PTR struct .
  7196 ;;		 -> can_send_message(14), J1939_Tx@can(14), 
  7197 ;;  which           2   42[BANK0 ] unsigned int 
  7198 ;; Auto vars:     Size  Location     Type
  7199 ;;  buf            13    3[BANK4 ] struct .
  7200 ;;  bufStatus       1    2[BANK4 ] unsigned char 
  7201 ;;  txBufCtrlAdd    1    1[BANK4 ] unsigned char 
  7202 ;;  result          1    0[BANK4 ] unsigned char 
  7203 ;; Return value:  Size  Location     Type
  7204 ;;                  1    wreg      unsigned char 
  7205 ;; Registers used:
  7206 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7207 ;; Tracked objects:
  7208 ;;		On entry : 0/0
  7209 ;;		On exit  : 0/0
  7210 ;;		Unchanged: 0/0
  7211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7212 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7213 ;;      Locals:         0       0       0       0       0      16       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7214 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7215 ;;      Totals:         0       5       0       0       0      16       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7216 ;;Total ram usage:       21 bytes
  7217 ;; Hardware stack levels used:    1
  7218 ;; Hardware stack levels required when called:    8
  7219 ;; This function calls:
  7220 ;;		__MessageToTxBuffer
  7221 ;;		__Read
  7222 ;;		__SendBuffer
  7223 ;; This function is called by:
  7224 ;;		_CAN_Tx
  7225 ;; This function uses a non-reentrant model
  7226 ;;
  7227                           
  7228                           
  7229                           ;psect for function _CAN_TxMailbox
  7230  1590                     _CAN_TxMailbox:	
  7231                           
  7232                           ;CAN_SPI_PIC16.c: 541: uint8_t txBufCtrlAddress;
  7233                           ;CAN_SPI_PIC16.c: 543: switch( which )
  7234                           
  7235                           ;incstack = 0
  7236                           ; Regs used in _CAN_TxMailbox: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7237  1590  2D9E               	goto	l5587
  7238  1591                     l5575:	
  7239                           ;CAN_SPI_PIC16.c: 544: {
  7240                           ;CAN_SPI_PIC16.c: 545: case 0:
  7241                           
  7242                           
  7243                           ;CAN_SPI_PIC16.c: 546: txBufCtrlAddress = 0x30;
  7244  1591  3030               	movlw	48
  7245  1592  2D96               	goto	L4
  7246  1593                     l5577:	
  7247                           ;CAN_SPI_PIC16.c: 549: case 1:
  7248                           
  7249                           ;CAN_SPI_PIC16.c: 547: break;
  7250                           
  7251                           
  7252                           ;CAN_SPI_PIC16.c: 550: txBufCtrlAddress = 0x40;
  7253  1593  3040               	movlw	64
  7254  1594  2D96               	goto	L4
  7255  1595                     l5579:	
  7256                           ;CAN_SPI_PIC16.c: 553: case 2:
  7257                           
  7258                           ;CAN_SPI_PIC16.c: 551: break;
  7259                           
  7260                           
  7261                           ;CAN_SPI_PIC16.c: 554: txBufCtrlAddress = 0x50;
  7262  1595  3050               	movlw	80
  7263  1596                     L4:	
  7264  1596  0140               	movlb	0	; select bank0
  7265  1597  00CC               	movwf	??_CAN_TxMailbox
  7266  1598  084C               	movf	??_CAN_TxMailbox,w
  7267  1599  0144               	movlb	4	; select bank4
  7268  159A  00BC               	movwf	CAN_TxMailbox@txBufCtrlAddress^(0+512)
  7269                           
  7270                           ;CAN_SPI_PIC16.c: 555: break;
  7271  159B  2DAF               	goto	l277
  7272  159C                     l5581:	
  7273                           ;CAN_SPI_PIC16.c: 557: default:
  7274                           
  7275                           
  7276                           ;CAN_SPI_PIC16.c: 559: ;
  7277                           ;CAN_SPI_PIC16.c: 560: return 1;
  7278  159C  3001               	movlw	1
  7279  159D  0008               	return
  7280  159E                     l5587:	
  7281                           ;CAN_SPI_PIC16.c: 561: }
  7282                           
  7283                           
  7284                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7285                           ; Switch size 1, requested type "space"
  7286                           ; Number of cases is 1, Range of values is 0 to 0
  7287                           ; switch strategies available:
  7288                           ; Name         Instructions Cycles
  7289                           ; simple_byte            4     3 (average)
  7290                           ; direct_byte            8     6 (fixed)
  7291                           ; jumptable            260     6 (fixed)
  7292                           ;	Chosen strategy is simple_byte
  7293  159E  0140               	movlb	0	; select bank0
  7294  159F  084B               	movf	CAN_TxMailbox@which+1,w
  7295  15A0  3A00               	xorlw	0	; case 0
  7296  15A1  1903               	skipnz
  7297  15A2  2DA4               	goto	l6767
  7298  15A3  2D9C               	goto	l5581
  7299  15A4                     l6767:	
  7300                           
  7301                           ; Switch size 1, requested type "space"
  7302                           ; Number of cases is 3, Range of values is 0 to 2
  7303                           ; switch strategies available:
  7304                           ; Name         Instructions Cycles
  7305                           ; simple_byte           10     6 (average)
  7306                           ; direct_byte           12     6 (fixed)
  7307                           ; jumptable            260     6 (fixed)
  7308                           ;	Chosen strategy is simple_byte
  7309  15A4  084A               	movf	CAN_TxMailbox@which,w
  7310  15A5  3A00               	xorlw	0	; case 0
  7311  15A6  1903               	skipnz
  7312  15A7  2D91               	goto	l5575
  7313  15A8  3A01               	xorlw	1	; case 1
  7314  15A9  1903               	skipnz
  7315  15AA  2D93               	goto	l5577
  7316  15AB  3A03               	xorlw	3	; case 2
  7317  15AC  1903               	skipnz
  7318  15AD  2D95               	goto	l5579
  7319  15AE  2D9C               	goto	l5581
  7320  15AF                     l277:	
  7321                           
  7322                           ;CAN_SPI_PIC16.c: 563: PIE0bits.IOCIE = 0;
  7323  15AF  014E               	movlb	14	; select bank14
  7324  15B0  1216               	bcf	22,4	;volatile
  7325                           
  7326                           ;CAN_SPI_PIC16.c: 565: uint8_t bufStatus;
  7327                           ;CAN_SPI_PIC16.c: 566: uint8_t result = 1;
  7328  15B1  0144               	movlb	4	; select bank4
  7329  15B2  01BB               	clrf	CAN_TxMailbox@result^(0+512)
  7330  15B3  0ABB               	incf	CAN_TxMailbox@result^(0+512),f
  7331                           
  7332                           ;CAN_SPI_PIC16.c: 569: _Read( txBufCtrlAddress, &bufStatus, 1 );
  7333  15B4  303D               	movlw	low CAN_TxMailbox@bufStatus
  7334  15B5  0140               	movlb	0	; select bank0
  7335  15B6  00B4               	movwf	__Read@pBuf
  7336  15B7  3002               	movlw	high CAN_TxMailbox@bufStatus
  7337  15B8  00B5               	movwf	__Read@pBuf+1
  7338  15B9  01B6               	clrf	__Read@count
  7339  15BA  0AB6               	incf	__Read@count,f
  7340  15BB  0144               	movlb	4	; select bank4
  7341  15BC  083C               	movf	CAN_TxMailbox@txBufCtrlAddress^(0+512),w
  7342  15BD  3191  219A  3195   	fcall	__Read
  7343                           
  7344                           ;CAN_SPI_PIC16.c: 571: if( 0 == ( bufStatus & 0x08 ) )
  7345  15C0  0144               	movlb	4	; select bank4
  7346  15C1  19BD               	btfsc	CAN_TxMailbox@bufStatus^(0+512),3
  7347  15C2  2DDF               	goto	l5601
  7348                           
  7349                           ;CAN_SPI_PIC16.c: 572: {
  7350                           ;CAN_SPI_PIC16.c: 574: MessageBuffer_t buf;
  7351                           ;CAN_SPI_PIC16.c: 575: _MessageToTxBuffer( pFrame, &buf );
  7352  15C3  0140               	movlb	0	; select bank0
  7353  15C4  0849               	movf	CAN_TxMailbox@pFrame+1,w
  7354  15C5  00B2               	movwf	__MessageToTxBuffer@pFrame+1
  7355  15C6  0848               	movf	CAN_TxMailbox@pFrame,w
  7356  15C7  00B1               	movwf	__MessageToTxBuffer@pFrame
  7357  15C8  303E               	movlw	low CAN_TxMailbox@buf
  7358  15C9  00B3               	movwf	__MessageToTxBuffer@pBuf
  7359  15CA  3002               	movlw	high CAN_TxMailbox@buf
  7360  15CB  00B4               	movwf	__MessageToTxBuffer@pBuf+1
  7361  15CC  318A  228D  3195   	fcall	__MessageToTxBuffer
  7362                           
  7363                           ;CAN_SPI_PIC16.c: 576: _SendBuffer( txBufCtrlAddress, &buf );
  7364  15CF  303E               	movlw	low CAN_TxMailbox@buf
  7365  15D0  0140               	movlb	0	; select bank0
  7366  15D1  00B9               	movwf	__SendBuffer@pBuf
  7367  15D2  3002               	movlw	high CAN_TxMailbox@buf
  7368  15D3  00BA               	movwf	__SendBuffer@pBuf+1
  7369  15D4  0144               	movlb	4	; select bank4
  7370  15D5  083C               	movf	CAN_TxMailbox@txBufCtrlAddress^(0+512),w
  7371  15D6  3192  2221         	fcall	__SendBuffer
  7372                           
  7373                           ;CAN_SPI_PIC16.c: 577: MCP2515_diag.txb0count++;
  7374  15D8  3001               	movlw	1
  7375  15D9  0142               	movlb	2	; select bank2
  7376  15DA  07CF               	addwf	(_MCP2515_diag^(0+256)+10),f
  7377  15DB  3000               	movlw	0
  7378  15DC  3DD0               	addwfc	((_MCP2515_diag+1)^(0+256)+10),f
  7379                           
  7380                           ;CAN_SPI_PIC16.c: 578: result = 0;
  7381  15DD  0144               	movlb	4	; select bank4
  7382  15DE  01BB               	clrf	CAN_TxMailbox@result^(0+512)
  7383  15DF                     l5601:	
  7384                           
  7385                           ;CAN_SPI_PIC16.c: 579: }
  7386                           ;CAN_SPI_PIC16.c: 581: PIE0bits.IOCIE = 1;
  7387  15DF  014E               	movlb	14	; select bank14
  7388  15E0  1616               	bsf	22,4	;volatile
  7389                           
  7390                           ;CAN_SPI_PIC16.c: 583: return result;
  7391  15E1  0144               	movlb	4	; select bank4
  7392  15E2  083B               	movf	CAN_TxMailbox@result^(0+512),w
  7393  15E3  0008               	return
  7394  15E4                     __end_of_CAN_TxMailbox:	
  7395                           
  7396                           	psect	text9
  7397  1221                     __ptext9:	
  7398 ;; *************** function __SendBuffer *****************
  7399 ;; Defined at:
  7400 ;;		line 311 in file "../src/CAN_SPI_PIC16.c"
  7401 ;; Parameters:    Size  Location     Type
  7402 ;;  addr            1    wreg     unsigned char 
  7403 ;;  pBuf            2   25[BANK0 ] PTR struct .
  7404 ;;		 -> CAN_TxMailbox@buf(13), CAN_txMessageQ.m_entry(208), CAN_txMessageQ(210), 
  7405 ;; Auto vars:     Size  Location     Type
  7406 ;;  addr            1   29[BANK0 ] unsigned char 
  7407 ;; Return value:  Size  Location     Type
  7408 ;;                  1    wreg      void 
  7409 ;; Registers used:
  7410 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7411 ;; Tracked objects:
  7412 ;;		On entry : 0/0
  7413 ;;		On exit  : 0/0
  7414 ;;		Unchanged: 0/0
  7415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7416 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7417 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7418 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7419 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7420 ;;Total ram usage:        5 bytes
  7421 ;; Hardware stack levels used:    1
  7422 ;; Hardware stack levels required when called:    7
  7423 ;; This function calls:
  7424 ;;		__Modify
  7425 ;;		__Write
  7426 ;; This function is called by:
  7427 ;;		_CAN_TxMailbox
  7428 ;; This function uses a non-reentrant model
  7429 ;;
  7430                           
  7431                           
  7432                           ;psect for function __SendBuffer
  7433  1221                     __SendBuffer:	
  7434                           
  7435                           ;incstack = 0
  7436                           ; Regs used in __SendBuffer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7437                           ;__SendBuffer@addr stored from wreg
  7438  1221  0140               	movlb	0	; select bank0
  7439  1222  00BD               	movwf	__SendBuffer@addr
  7440                           
  7441                           ;CAN_SPI_PIC16.c: 313: _Write( addr + 1, (uint8_t *)pBuf, sizeof( MessageBuffer_t ) );
  7442  1223  083A               	movf	__SendBuffer@pBuf+1,w
  7443  1224  00B5               	movwf	__Write@pBuf+1
  7444  1225  0839               	movf	__SendBuffer@pBuf,w
  7445  1226  00B4               	movwf	__Write@pBuf
  7446  1227  300D               	movlw	13
  7447  1228  00BB               	movwf	??__SendBuffer
  7448  1229  083B               	movf	??__SendBuffer,w
  7449  122A  00B6               	movwf	__Write@count
  7450  122B  083D               	movf	__SendBuffer@addr,w
  7451  122C  3E01               	addlw	1
  7452  122D  3191  21B4  3192   	fcall	__Write
  7453                           
  7454                           ;CAN_SPI_PIC16.c: 314: _Modify( addr, 0x08, 0x08 );
  7455  1230  3008               	movlw	8
  7456  1231  0140               	movlb	0	; select bank0
  7457  1232  00BB               	movwf	??__SendBuffer
  7458  1233  083B               	movf	??__SendBuffer,w
  7459  1234  00B2               	movwf	__Modify@mask
  7460  1235  3008               	movlw	8
  7461  1236  00BC               	movwf	??__SendBuffer+1
  7462  1237  083C               	movf	??__SendBuffer+1,w
  7463  1238  00B3               	movwf	__Modify@value
  7464  1239  083D               	movf	__SendBuffer@addr,w
  7465  123A  3191  214E         	fcall	__Modify
  7466  123C  0008               	return
  7467  123D                     __end_of__SendBuffer:	
  7468                           
  7469                           	psect	text10
  7470  0A8D                     __ptext10:	
  7471 ;; *************** function __MessageToTxBuffer *****************
  7472 ;; Defined at:
  7473 ;;		line 194 in file "../src/CAN_SPI_PIC16.c"
  7474 ;; Parameters:    Size  Location     Type
  7475 ;;  pFrame          2   17[BANK0 ] PTR struct .
  7476 ;;		 -> can_send_message(14), J1939_Tx@can(14), 
  7477 ;;  pBuf            2   19[BANK0 ] PTR struct .
  7478 ;;		 -> CAN_TxMailbox@buf(13), CAN_txMessageQ.m_entry(208), CAN_txMessageQ(210), 
  7479 ;; Auto vars:     Size  Location     Type
  7480 ;;  id              4   33[BANK0 ] unsigned long 
  7481 ;;  canid           2   38[BANK0 ] unsigned int 
  7482 ;;  ext             1   37[BANK0 ] unsigned char 
  7483 ;;  rtr             1   30[BANK0 ] unsigned char 
  7484 ;; Return value:  Size  Location     Type
  7485 ;;                  1    wreg      void 
  7486 ;; Registers used:
  7487 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7488 ;; Tracked objects:
  7489 ;;		On entry : 0/0
  7490 ;;		On exit  : 0/0
  7491 ;;		Unchanged: 0/0
  7492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7493 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7494 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7495 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7496 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7497 ;;Total ram usage:       23 bytes
  7498 ;; Hardware stack levels used:    1
  7499 ;; Hardware stack levels required when called:    5
  7500 ;; This function calls:
  7501 ;;		Nothing
  7502 ;; This function is called by:
  7503 ;;		__EnqueueTxMessage
  7504 ;;		_CAN_TxMailbox
  7505 ;; This function uses a non-reentrant model
  7506 ;;
  7507                           
  7508                           
  7509                           ;psect for function __MessageToTxBuffer
  7510  0A8D                     __MessageToTxBuffer:	
  7511                           
  7512                           ;CAN_SPI_PIC16.c: 196: bool ext = ( pFrame->id & 0x80000000U ) > 0;
  7513                           
  7514                           ;incstack = 0
  7515                           ; Regs used in __MessageToTxBuffer: [wreg-fsr1h+status,2+status,0]
  7516  0A8D  0140               	movlb	0	; select bank0
  7517  0A8E  0831               	movf	__MessageToTxBuffer@pFrame,w
  7518  0A8F  0086               	movwf	6
  7519  0A90  0832               	movf	__MessageToTxBuffer@pFrame+1,w
  7520  0A91  0087               	movwf	7
  7521  0A92  3F40               	moviw [0]fsr1
  7522  0A93  00B5               	movwf	??__MessageToTxBuffer
  7523  0A94  3F41               	moviw [1]fsr1
  7524  0A95  00B6               	movwf	??__MessageToTxBuffer+1
  7525  0A96  3F42               	moviw [2]fsr1
  7526  0A97  00B7               	movwf	??__MessageToTxBuffer+2
  7527  0A98  3F43               	moviw [3]fsr1
  7528  0A99  00B8               	movwf	??__MessageToTxBuffer+3
  7529  0A9A  1FB8               	btfss	??__MessageToTxBuffer+3,7
  7530  0A9B  2A9E               	goto	u4270
  7531  0A9C  3001               	movlw	1
  7532  0A9D  2A9F               	goto	u4280
  7533  0A9E                     u4270:	
  7534  0A9E  3000               	movlw	0
  7535  0A9F                     u4280:	
  7536  0A9F  00B9               	movwf	??__MessageToTxBuffer+4
  7537  0AA0  0839               	movf	??__MessageToTxBuffer+4,w
  7538  0AA1  00C5               	movwf	__MessageToTxBuffer@ext
  7539                           
  7540                           ;CAN_SPI_PIC16.c: 197: bool rtr = ( pFrame->id & 0x40000000U ) > 0;
  7541  0AA2  0831               	movf	__MessageToTxBuffer@pFrame,w
  7542  0AA3  0086               	movwf	6
  7543  0AA4  0832               	movf	__MessageToTxBuffer@pFrame+1,w
  7544  0AA5  0087               	movwf	7
  7545  0AA6  3F40               	moviw [0]fsr1
  7546  0AA7  00B5               	movwf	??__MessageToTxBuffer
  7547  0AA8  3F41               	moviw [1]fsr1
  7548  0AA9  00B6               	movwf	??__MessageToTxBuffer+1
  7549  0AAA  3F42               	moviw [2]fsr1
  7550  0AAB  00B7               	movwf	??__MessageToTxBuffer+2
  7551  0AAC  3F43               	moviw [3]fsr1
  7552  0AAD  00B8               	movwf	??__MessageToTxBuffer+3
  7553  0AAE  1F38               	btfss	??__MessageToTxBuffer+3,6
  7554  0AAF  2AB2               	goto	u4290
  7555  0AB0  3001               	movlw	1
  7556  0AB1  2AB3               	goto	u4300
  7557  0AB2                     u4290:	
  7558  0AB2  3000               	movlw	0
  7559  0AB3                     u4300:	
  7560  0AB3  00B9               	movwf	??__MessageToTxBuffer+4
  7561  0AB4  0839               	movf	??__MessageToTxBuffer+4,w
  7562  0AB5  00BE               	movwf	__MessageToTxBuffer@rtr
  7563                           
  7564                           ;CAN_SPI_PIC16.c: 199: uint32_t id = ( pFrame->id & ( ext ? 0x1FFFFFFFU : 0x000007FFU ) 
      +                          );
  7565  0AB6  0845               	movf	__MessageToTxBuffer@ext,w
  7566  0AB7  1D03               	btfss	3,2
  7567  0AB8  2ABF               	goto	l5411
  7568  0AB9  3000               	movlw	0
  7569  0ABA  00BD               	movwf	__MessageToTxBuffer$473+3
  7570  0ABB  3000               	movlw	0
  7571  0ABC  00BC               	movwf	__MessageToTxBuffer$473+2
  7572  0ABD  3007               	movlw	7
  7573  0ABE  2AC4               	goto	L5
  7574  0ABF                     l5411:	
  7575  0ABF  301F               	movlw	31
  7576  0AC0  00BD               	movwf	__MessageToTxBuffer$473+3
  7577  0AC1  30FF               	movlw	255
  7578  0AC2  00BC               	movwf	__MessageToTxBuffer$473+2
  7579  0AC3  30FF               	movlw	255
  7580  0AC4                     L5:	
  7581  0AC4  00BB               	movwf	__MessageToTxBuffer$473+1
  7582  0AC5  30FF               	movlw	255
  7583  0AC6  00BA               	movwf	__MessageToTxBuffer$473
  7584  0AC7  0831               	movf	__MessageToTxBuffer@pFrame,w
  7585  0AC8  0086               	movwf	6
  7586  0AC9  0832               	movf	__MessageToTxBuffer@pFrame+1,w
  7587  0ACA  0087               	movwf	7
  7588  0ACB  3F40               	moviw [0]fsr1
  7589  0ACC  00B5               	movwf	??__MessageToTxBuffer
  7590  0ACD  3F41               	moviw [1]fsr1
  7591  0ACE  00B6               	movwf	??__MessageToTxBuffer+1
  7592  0ACF  3F42               	moviw [2]fsr1
  7593  0AD0  00B7               	movwf	??__MessageToTxBuffer+2
  7594  0AD1  3F43               	moviw [3]fsr1
  7595  0AD2  00B8               	movwf	??__MessageToTxBuffer+3
  7596  0AD3  083A               	movf	__MessageToTxBuffer$473,w
  7597  0AD4  0535               	andwf	??__MessageToTxBuffer,w
  7598  0AD5  00C1               	movwf	__MessageToTxBuffer@id
  7599  0AD6  083B               	movf	__MessageToTxBuffer$473+1,w
  7600  0AD7  0536               	andwf	??__MessageToTxBuffer+1,w
  7601  0AD8  00C2               	movwf	__MessageToTxBuffer@id+1
  7602  0AD9  083C               	movf	__MessageToTxBuffer$473+2,w
  7603  0ADA  0537               	andwf	??__MessageToTxBuffer+2,w
  7604  0ADB  00C3               	movwf	__MessageToTxBuffer@id+2
  7605  0ADC  083D               	movf	__MessageToTxBuffer$473+3,w
  7606  0ADD  0538               	andwf	??__MessageToTxBuffer+3,w
  7607  0ADE  00C4               	movwf	__MessageToTxBuffer@id+3
  7608                           
  7609                           ;CAN_SPI_PIC16.c: 200: uint16_t canid = ( uint16_t )( id & 0x0FFFF );
  7610  0ADF  0842               	movf	__MessageToTxBuffer@id+1,w
  7611  0AE0  00C7               	movwf	__MessageToTxBuffer@canid+1
  7612  0AE1  0841               	movf	__MessageToTxBuffer@id,w
  7613  0AE2  00C6               	movwf	__MessageToTxBuffer@canid
  7614                           
  7615                           ;CAN_SPI_PIC16.c: 202: if( ext )
  7616  0AE3  0845               	movf	__MessageToTxBuffer@ext,w
  7617  0AE4  1903               	btfsc	3,2
  7618  0AE5  2B4B               	goto	l5431
  7619                           
  7620                           ;CAN_SPI_PIC16.c: 203: {
  7621                           ;CAN_SPI_PIC16.c: 204: pBuf->eid0 = ( uint8_t )( canid & 0xFF );
  7622  0AE6  0833               	movf	__MessageToTxBuffer@pBuf,w
  7623  0AE7  3E03               	addlw	3
  7624  0AE8  00B5               	movwf	??__MessageToTxBuffer
  7625  0AE9  3000               	movlw	0
  7626  0AEA  3D34               	addwfc	__MessageToTxBuffer@pBuf+1,w
  7627  0AEB  00B6               	movwf	??__MessageToTxBuffer+1
  7628  0AEC  0835               	movf	??__MessageToTxBuffer,w
  7629  0AED  0086               	movwf	6
  7630  0AEE  0836               	movf	??__MessageToTxBuffer+1,w
  7631  0AEF  0087               	movwf	7
  7632  0AF0  0846               	movf	__MessageToTxBuffer@canid,w
  7633  0AF1  0081               	movwf	1
  7634                           
  7635                           ;CAN_SPI_PIC16.c: 205: pBuf->eid8 = ( uint8_t )( canid >> 8 );
  7636  0AF2  0847               	movf	__MessageToTxBuffer@canid+1,w
  7637  0AF3  00B5               	movwf	??__MessageToTxBuffer
  7638  0AF4  0833               	movf	__MessageToTxBuffer@pBuf,w
  7639  0AF5  3E02               	addlw	2
  7640  0AF6  00B6               	movwf	??__MessageToTxBuffer+1
  7641  0AF7  3000               	movlw	0
  7642  0AF8  3D34               	addwfc	__MessageToTxBuffer@pBuf+1,w
  7643  0AF9  00B7               	movwf	??__MessageToTxBuffer+2
  7644  0AFA  0836               	movf	??__MessageToTxBuffer+1,w
  7645  0AFB  0086               	movwf	6
  7646  0AFC  0837               	movf	??__MessageToTxBuffer+2,w
  7647  0AFD  0087               	movwf	7
  7648  0AFE  0835               	movf	??__MessageToTxBuffer,w
  7649  0AFF  0081               	movwf	1
  7650                           
  7651                           ;CAN_SPI_PIC16.c: 206: canid = ( uint16_t )( id >> 16 );
  7652  0B00  0841               	movf	__MessageToTxBuffer@id,w
  7653  0B01  00B5               	movwf	??__MessageToTxBuffer
  7654  0B02  0842               	movf	__MessageToTxBuffer@id+1,w
  7655  0B03  00B6               	movwf	??__MessageToTxBuffer+1
  7656  0B04  0843               	movf	__MessageToTxBuffer@id+2,w
  7657  0B05  00B7               	movwf	??__MessageToTxBuffer+2
  7658  0B06  0844               	movf	__MessageToTxBuffer@id+3,w
  7659  0B07  00B8               	movwf	??__MessageToTxBuffer+3
  7660  0B08  3010               	movlw	16
  7661  0B09                     u4335:	
  7662  0B09  36B8               	lsrf	??__MessageToTxBuffer+3,f
  7663  0B0A  0CB7               	rrf	??__MessageToTxBuffer+2,f
  7664  0B0B  0CB6               	rrf	??__MessageToTxBuffer+1,f
  7665  0B0C  0CB5               	rrf	??__MessageToTxBuffer,f
  7666  0B0D  0B89               	decfsz	9,f
  7667  0B0E  2B09               	goto	u4335
  7668  0B0F  0836               	movf	??__MessageToTxBuffer+1,w
  7669  0B10  00C7               	movwf	__MessageToTxBuffer@canid+1
  7670  0B11  0835               	movf	??__MessageToTxBuffer,w
  7671  0B12  00C6               	movwf	__MessageToTxBuffer@canid
  7672                           
  7673                           ;CAN_SPI_PIC16.c: 207: pBuf->sidl = ( uint8_t )( canid & 0x03 );
  7674  0B13  0846               	movf	__MessageToTxBuffer@canid,w
  7675  0B14  3903               	andlw	3
  7676  0B15  00B5               	movwf	??__MessageToTxBuffer
  7677  0B16  0833               	movf	__MessageToTxBuffer@pBuf,w
  7678  0B17  3E01               	addlw	1
  7679  0B18  00B6               	movwf	??__MessageToTxBuffer+1
  7680  0B19  3000               	movlw	0
  7681  0B1A  3D34               	addwfc	__MessageToTxBuffer@pBuf+1,w
  7682  0B1B  00B7               	movwf	??__MessageToTxBuffer+2
  7683  0B1C  0836               	movf	??__MessageToTxBuffer+1,w
  7684  0B1D  0086               	movwf	6
  7685  0B1E  0837               	movf	??__MessageToTxBuffer+2,w
  7686  0B1F  0087               	movwf	7
  7687  0B20  0835               	movf	??__MessageToTxBuffer,w
  7688  0B21  0081               	movwf	1
  7689                           
  7690                           ;CAN_SPI_PIC16.c: 208: pBuf->sidl += ( uint8_t )( ( canid & 0x1C ) << 3 );
  7691  0B22  0846               	movf	__MessageToTxBuffer@canid,w
  7692  0B23  391C               	andlw	28
  7693  0B24  00B5               	movwf	??__MessageToTxBuffer
  7694  0B25  3002               	movlw	2
  7695  0B26                     u4345:	
  7696  0B26  35B5               	lslf	??__MessageToTxBuffer,f
  7697  0B27  3EFF               	addlw	-1
  7698  0B28  1D03               	skipz
  7699  0B29  2B26               	goto	u4345
  7700  0B2A  3535               	lslf	??__MessageToTxBuffer,w
  7701  0B2B  00B6               	movwf	??__MessageToTxBuffer+1
  7702  0B2C  0833               	movf	__MessageToTxBuffer@pBuf,w
  7703  0B2D  0086               	movwf	6
  7704  0B2E  0834               	movf	__MessageToTxBuffer@pBuf+1,w
  7705  0B2F  0087               	movwf	7
  7706  0B30  3141               	addfsr 1,1
  7707  0B31  0836               	movf	??__MessageToTxBuffer+1,w
  7708  0B32  0781               	addwf	1,f
  7709                           
  7710                           ;CAN_SPI_PIC16.c: 209: pBuf->sidl |= 0x08U;
  7711  0B33  0833               	movf	__MessageToTxBuffer@pBuf,w
  7712  0B34  0086               	movwf	6
  7713  0B35  0834               	movf	__MessageToTxBuffer@pBuf+1,w
  7714  0B36  0087               	movwf	7
  7715  0B37  3141               	addfsr 1,1
  7716  0B38  1581               	bsf	1,3
  7717                           
  7718                           ;CAN_SPI_PIC16.c: 210: pBuf->sidh = ( uint8_t )( canid >> 5 );
  7719  0B39  0847               	movf	__MessageToTxBuffer@canid+1,w
  7720  0B3A  00B6               	movwf	??__MessageToTxBuffer+1
  7721  0B3B  0846               	movf	__MessageToTxBuffer@canid,w
  7722  0B3C  00B5               	movwf	??__MessageToTxBuffer
  7723  0B3D  3005               	movlw	5
  7724  0B3E                     u4355:	
  7725  0B3E  36B6               	lsrf	??__MessageToTxBuffer+1,f
  7726  0B3F  0CB5               	rrf	??__MessageToTxBuffer,f
  7727  0B40  0B89               	decfsz	9,f
  7728  0B41  2B3E               	goto	u4355
  7729  0B42  0835               	movf	??__MessageToTxBuffer,w
  7730  0B43  00B7               	movwf	??__MessageToTxBuffer+2
  7731  0B44  0833               	movf	__MessageToTxBuffer@pBuf,w
  7732  0B45  0086               	movwf	6
  7733  0B46  0834               	movf	__MessageToTxBuffer@pBuf+1,w
  7734  0B47  0087               	movwf	7
  7735  0B48  0837               	movf	??__MessageToTxBuffer+2,w
  7736  0B49  0081               	movwf	1
  7737                           
  7738                           ;CAN_SPI_PIC16.c: 211: }
  7739  0B4A  2B7F               	goto	l5437
  7740  0B4B                     l5431:	
  7741                           
  7742                           ;CAN_SPI_PIC16.c: 212: else
  7743                           ;CAN_SPI_PIC16.c: 213: {
  7744                           ;CAN_SPI_PIC16.c: 214: pBuf->sidh = ( uint8_t )( canid >> 3 );
  7745  0B4B  0847               	movf	__MessageToTxBuffer@canid+1,w
  7746  0B4C  00B6               	movwf	??__MessageToTxBuffer+1
  7747  0B4D  0846               	movf	__MessageToTxBuffer@canid,w
  7748  0B4E  00B5               	movwf	??__MessageToTxBuffer
  7749  0B4F  36B6               	lsrf	??__MessageToTxBuffer+1,f
  7750  0B50  0CB5               	rrf	??__MessageToTxBuffer,f
  7751  0B51  36B6               	lsrf	??__MessageToTxBuffer+1,f
  7752  0B52  0CB5               	rrf	??__MessageToTxBuffer,f
  7753  0B53  36B6               	lsrf	??__MessageToTxBuffer+1,f
  7754  0B54  0CB5               	rrf	??__MessageToTxBuffer,f
  7755  0B55  0835               	movf	??__MessageToTxBuffer,w
  7756  0B56  00B7               	movwf	??__MessageToTxBuffer+2
  7757  0B57  0833               	movf	__MessageToTxBuffer@pBuf,w
  7758  0B58  0086               	movwf	6
  7759  0B59  0834               	movf	__MessageToTxBuffer@pBuf+1,w
  7760  0B5A  0087               	movwf	7
  7761  0B5B  0837               	movf	??__MessageToTxBuffer+2,w
  7762  0B5C  0081               	movwf	1
  7763                           
  7764                           ;CAN_SPI_PIC16.c: 215: pBuf->sidl = ( uint8_t )( ( canid & 0x07 ) << 5 );
  7765  0B5D  0846               	movf	__MessageToTxBuffer@canid,w
  7766  0B5E  3907               	andlw	7
  7767  0B5F  00B5               	movwf	??__MessageToTxBuffer
  7768  0B60  3004               	movlw	4
  7769  0B61                     u4365:	
  7770  0B61  35B5               	lslf	??__MessageToTxBuffer,f
  7771  0B62  3EFF               	addlw	-1
  7772  0B63  1D03               	skipz
  7773  0B64  2B61               	goto	u4365
  7774  0B65  3535               	lslf	??__MessageToTxBuffer,w
  7775  0B66  00B6               	movwf	??__MessageToTxBuffer+1
  7776  0B67  0833               	movf	__MessageToTxBuffer@pBuf,w
  7777  0B68  3E01               	addlw	1
  7778  0B69  00B7               	movwf	??__MessageToTxBuffer+2
  7779  0B6A  3000               	movlw	0
  7780  0B6B  3D34               	addwfc	__MessageToTxBuffer@pBuf+1,w
  7781  0B6C  00B8               	movwf	??__MessageToTxBuffer+3
  7782  0B6D  0837               	movf	??__MessageToTxBuffer+2,w
  7783  0B6E  0086               	movwf	6
  7784  0B6F  0838               	movf	??__MessageToTxBuffer+3,w
  7785  0B70  0087               	movwf	7
  7786  0B71  0836               	movf	??__MessageToTxBuffer+1,w
  7787  0B72  0081               	movwf	1
  7788                           
  7789                           ;CAN_SPI_PIC16.c: 216: pBuf->eid0 = 0;
  7790  0B73  0833               	movf	__MessageToTxBuffer@pBuf,w
  7791  0B74  0086               	movwf	6
  7792  0B75  0834               	movf	__MessageToTxBuffer@pBuf+1,w
  7793  0B76  0087               	movwf	7
  7794  0B77  3143               	addfsr 1,3
  7795  0B78  0181               	clrf	1
  7796                           
  7797                           ;CAN_SPI_PIC16.c: 217: pBuf->eid8 = 0;
  7798  0B79  0833               	movf	__MessageToTxBuffer@pBuf,w
  7799  0B7A  0086               	movwf	6
  7800  0B7B  0834               	movf	__MessageToTxBuffer@pBuf+1,w
  7801  0B7C  0087               	movwf	7
  7802  0B7D  3142               	addfsr 1,2
  7803  0B7E  0181               	clrf	1
  7804  0B7F                     l5437:	
  7805                           
  7806                           ;CAN_SPI_PIC16.c: 218: }
  7807                           ;CAN_SPI_PIC16.c: 221: pBuf->dlc = rtr ? ( pFrame->buf_len | 0x40U ) : pFrame->buf_len;
  7808  0B7F  083E               	movf	__MessageToTxBuffer@rtr,w
  7809  0B80  1D03               	btfss	3,2
  7810  0B81  2B8E               	goto	l5441
  7811  0B82  0831               	movf	__MessageToTxBuffer@pFrame,w
  7812  0B83  0086               	movwf	6
  7813  0B84  0832               	movf	__MessageToTxBuffer@pFrame+1,w
  7814  0B85  0087               	movwf	7
  7815  0B86  3145               	addfsr 1,5
  7816  0B87  0801               	movf	1,w
  7817  0B88  00B5               	movwf	??__MessageToTxBuffer
  7818  0B89  01B6               	clrf	??__MessageToTxBuffer+1
  7819  0B8A  0835               	movf	??__MessageToTxBuffer,w
  7820  0B8B  00BF               	movwf	__MessageToTxBuffer$481
  7821  0B8C  0836               	movf	??__MessageToTxBuffer+1,w
  7822  0B8D  2B97               	goto	L6
  7823  0B8E                     l5441:	
  7824  0B8E  0831               	movf	__MessageToTxBuffer@pFrame,w
  7825  0B8F  0086               	movwf	6
  7826  0B90  0832               	movf	__MessageToTxBuffer@pFrame+1,w
  7827  0B91  0087               	movwf	7
  7828  0B92  3145               	addfsr 1,5
  7829  0B93  3040               	movlw	64
  7830  0B94  0401               	iorwf	1,w
  7831  0B95  00BF               	movwf	__MessageToTxBuffer$481
  7832  0B96  3000               	movlw	0
  7833  0B97                     L6:	
  7834  0B97  00C0               	movwf	__MessageToTxBuffer$481+1
  7835  0B98  0833               	movf	__MessageToTxBuffer@pBuf,w
  7836  0B99  3E04               	addlw	4
  7837  0B9A  00B5               	movwf	??__MessageToTxBuffer
  7838  0B9B  3000               	movlw	0
  7839  0B9C  3D34               	addwfc	__MessageToTxBuffer@pBuf+1,w
  7840  0B9D  00B6               	movwf	??__MessageToTxBuffer+1
  7841  0B9E  0835               	movf	??__MessageToTxBuffer,w
  7842  0B9F  0086               	movwf	6
  7843  0BA0  0836               	movf	??__MessageToTxBuffer+1,w
  7844  0BA1  0087               	movwf	7
  7845  0BA2  083F               	movf	__MessageToTxBuffer$481,w
  7846  0BA3  0081               	movwf	1
  7847                           
  7848                           ;CAN_SPI_PIC16.c: 222: __builtin_memcpy(pBuf->data,pFrame->buf,pFrame->buf_len);
  7849  0BA4  0833               	movf	__MessageToTxBuffer@pBuf,w
  7850  0BA5  0086               	movwf	6
  7851  0BA6  0834               	movf	__MessageToTxBuffer@pBuf+1,w
  7852  0BA7  0087               	movwf	7
  7853  0BA8  3145               	addfsr 1,5
  7854  0BA9  0140               	movlb	0	; select bank0
  7855  0BAA  0831               	movf	__MessageToTxBuffer@pFrame,w
  7856  0BAB  0084               	movwf	4
  7857  0BAC  0832               	movf	__MessageToTxBuffer@pFrame+1,w
  7858  0BAD  0085               	movwf	5
  7859  0BAE  3105               	addfsr 0,5
  7860  0BAF  0800               	movf	0,w
  7861  0BB0  00B5               	movwf	??__MessageToTxBuffer
  7862  0BB1  0835               	movf	??__MessageToTxBuffer,w
  7863  0BB2  1903               	skipnz
  7864  0BB3  0008               	return
  7865  0BB4  0831               	movf	__MessageToTxBuffer@pFrame,w
  7866  0BB5  0084               	movwf	4
  7867  0BB6  0832               	movf	__MessageToTxBuffer@pFrame+1,w
  7868  0BB7  0085               	movwf	5
  7869  0BB8  3106               	addfsr 0,6
  7870  0BB9                     u438m0:	
  7871  0BB9  0012               	moviw fsr0++
  7872  0BBA  001E               	movwi fsr1++
  7873  0BBB  0BB5               	decfsz	??__MessageToTxBuffer,f
  7874  0BBC  2BB9               	goto	u438m0
  7875  0BBD  0008               	return
  7876  0BBE                     __end_of__MessageToTxBuffer:	
  7877                           
  7878                           	psect	text11
  7879  163A                     __ptext11:	
  7880 ;; *************** function _power_down_task *****************
  7881 ;; Defined at:
  7882 ;;		line 292 in file "../src/main.c"
  7883 ;; Parameters:    Size  Location     Type
  7884 ;;		None
  7885 ;; Auto vars:     Size  Location     Type
  7886 ;;		None
  7887 ;; Return value:  Size  Location     Type
  7888 ;;                  1    wreg      void 
  7889 ;; Registers used:
  7890 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7891 ;; Tracked objects:
  7892 ;;		On entry : 0/0
  7893 ;;		On exit  : 0/0
  7894 ;;		Unchanged: 0/0
  7895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7898 ;;      Temps:          0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7899 ;;      Totals:         0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7900 ;;Total ram usage:        8 bytes
  7901 ;; Hardware stack levels used:    1
  7902 ;; Hardware stack levels required when called:   11
  7903 ;; This function calls:
  7904 ;;		_SYSTEM_Sleep
  7905 ;;		__Wakeup
  7906 ;; This function is called by:
  7907 ;;		_main
  7908 ;; This function uses a non-reentrant model
  7909 ;;
  7910                           
  7911                           
  7912                           ;psect for function _power_down_task
  7913  163A                     _power_down_task:	
  7914                           
  7915                           ;main.c: 293: static TIMER_TICK power_down_tick = 0;
  7916                           ;main.c: 295: if( ( TIMER_TICK )( SYSTEM_tick - power_down_tick ) >= 100 ){
  7917                           
  7918                           ;incstack = 0
  7919                           ; Regs used in _power_down_task: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7920  163A  0140               	movlb	0	; select bank0
  7921  163B  0853               	movf	_SYSTEM_tick,w
  7922  163C  0143               	movlb	3	; select bank3
  7923  163D  00E6               	movwf	??_power_down_task^(0+384)
  7924  163E  0140               	movlb	0	; select bank0
  7925  163F  0854               	movf	_SYSTEM_tick+1,w
  7926  1640  0143               	movlb	3	; select bank3
  7927  1641  00E7               	movwf	(??_power_down_task^(0+384)+1)
  7928  1642  0140               	movlb	0	; select bank0
  7929  1643  0855               	movf	_SYSTEM_tick+2,w
  7930  1644  0143               	movlb	3	; select bank3
  7931  1645  00E8               	movwf	(??_power_down_task^(0+384)+2)
  7932  1646  0140               	movlb	0	; select bank0
  7933  1647  0856               	movf	_SYSTEM_tick+3,w
  7934  1648  0143               	movlb	3	; select bank3
  7935  1649  00E9               	movwf	(??_power_down_task^(0+384)+3)
  7936  164A  0142               	movlb	2	; select bank2
  7937  164B  092D               	comf	power_down_task@power_down_tick^(0+256),w
  7938  164C  0143               	movlb	3	; select bank3
  7939  164D  00EA               	movwf	(??_power_down_task+4)^(0+384)
  7940  164E  0142               	movlb	2	; select bank2
  7941  164F  092E               	comf	(power_down_task@power_down_tick+1)^(0+256),w
  7942  1650  0143               	movlb	3	; select bank3
  7943  1651  00EB               	movwf	((??_power_down_task+4)^(0+384)+1)
  7944  1652  0142               	movlb	2	; select bank2
  7945  1653  092F               	comf	(power_down_task@power_down_tick+2)^(0+256),w
  7946  1654  0143               	movlb	3	; select bank3
  7947  1655  00EC               	movwf	((??_power_down_task+4)^(0+384)+2)
  7948  1656  0142               	movlb	2	; select bank2
  7949  1657  0930               	comf	(power_down_task@power_down_tick+3)^(0+256),w
  7950  1658  0143               	movlb	3	; select bank3
  7951  1659  00ED               	movwf	((??_power_down_task+4)^(0+384)+3)
  7952  165A  0AEA               	incf	(??_power_down_task+4)^(0+384),f
  7953  165B  1903               	skipnz
  7954  165C  0AEB               	incf	((??_power_down_task+4)^(0+384)+1),f
  7955  165D  1903               	skipnz
  7956  165E  0AEC               	incf	((??_power_down_task+4)^(0+384)+2),f
  7957  165F  1903               	skipnz
  7958  1660  0AED               	incf	((??_power_down_task+4)^(0+384)+3),f
  7959  1661  086A               	movf	(??_power_down_task+4)^(0+384),w
  7960  1662  07E6               	addwf	??_power_down_task^(0+384),f
  7961  1663  086B               	movf	(??_power_down_task+5)^(0+384),w
  7962  1664  3DE7               	addwfc	(??_power_down_task^(0+384)+1),f
  7963  1665  086C               	movf	(??_power_down_task+6)^(0+384),w
  7964  1666  3DE8               	addwfc	(??_power_down_task^(0+384)+2),f
  7965  1667  086D               	movf	(??_power_down_task+7)^(0+384),w
  7966  1668  3DE9               	addwfc	(??_power_down_task^(0+384)+3),f
  7967  1669  0869               	movf	(??_power_down_task^(0+384)+3),w
  7968  166A  1D03               	btfss	3,2
  7969  166B  2E76               	goto	l6175
  7970  166C  0868               	movf	(??_power_down_task^(0+384)+2),w
  7971  166D  1D03               	btfss	3,2
  7972  166E  2E76               	goto	l6175
  7973  166F  0867               	movf	(??_power_down_task^(0+384)+1),w
  7974  1670  1D03               	btfss	3,2
  7975  1671  2E76               	goto	l6175
  7976  1672  3064               	movlw	100
  7977  1673  0266               	subwf	??_power_down_task^(0+384),w
  7978  1674  1C03               	btfss	3,0
  7979  1675  0008               	return
  7980  1676                     l6175:	
  7981                           
  7982                           ;main.c: 296: power_down_tick = SYSTEM_tick;
  7983  1676  0140               	movlb	0	; select bank0
  7984  1677  0856               	movf	_SYSTEM_tick+3,w
  7985  1678  0142               	movlb	2	; select bank2
  7986  1679  00B0               	movwf	(power_down_task@power_down_tick+3)^(0+256)
  7987  167A  0140               	movlb	0	; select bank0
  7988  167B  0855               	movf	_SYSTEM_tick+2,w
  7989  167C  0142               	movlb	2	; select bank2
  7990  167D  00AF               	movwf	(power_down_task@power_down_tick+2)^(0+256)
  7991  167E  0140               	movlb	0	; select bank0
  7992  167F  0854               	movf	_SYSTEM_tick+1,w
  7993  1680  0142               	movlb	2	; select bank2
  7994  1681  00AE               	movwf	(power_down_task@power_down_tick+1)^(0+256)
  7995  1682  0140               	movlb	0	; select bank0
  7996  1683  0853               	movf	_SYSTEM_tick,w
  7997  1684  0142               	movlb	2	; select bank2
  7998  1685  00AD               	movwf	power_down_task@power_down_tick^(0+256)
  7999  1686                     l6181:	
  8000                           ;main.c: 297: while( 1 == PORTCbits.RC0 )
  8001                           
  8002  1686  0140               	movlb	0	; select bank0
  8003  1687  1C0E               	btfss	14,0	;volatile
  8004  1688  0008               	return
  8005                           
  8006                           ;main.c: 298: {
  8007                           ;main.c: 299: SYSTEM_Sleep();
  8008  1689  3190  205E  3196   	fcall	_SYSTEM_Sleep
  8009                           
  8010                           ;main.c: 302: _Wakeup();
  8011  168C  3193  23A7  3196   	fcall	__Wakeup
  8012  168F  2E86               	goto	l6181
  8013  1690                     __end_of_power_down_task:	
  8014                           
  8015                           	psect	text12
  8016  13A7                     __ptext12:	
  8017 ;; *************** function __Wakeup *****************
  8018 ;; Defined at:
  8019 ;;		line 127 in file "../src/main.c"
  8020 ;; Parameters:    Size  Location     Type
  8021 ;;		None
  8022 ;; Auto vars:     Size  Location     Type
  8023 ;;		None
  8024 ;; Return value:  Size  Location     Type
  8025 ;;                  1    wreg      void 
  8026 ;; Registers used:
  8027 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8028 ;; Tracked objects:
  8029 ;;		On entry : 0/0
  8030 ;;		On exit  : 0/0
  8031 ;;		Unchanged: 0/0
  8032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8037 ;;Total ram usage:        0 bytes
  8038 ;; Hardware stack levels used:    1
  8039 ;; Hardware stack levels required when called:   10
  8040 ;; This function calls:
  8041 ;;		_EUSART_Initialize
  8042 ;;		_SYSTEM_Wakeup
  8043 ;;		_memset
  8044 ;; This function is called by:
  8045 ;;		_main
  8046 ;;		_power_down_task
  8047 ;; This function uses a non-reentrant model
  8048 ;;
  8049                           
  8050                           
  8051                           ;psect for function __Wakeup
  8052  13A7                     __Wakeup:	
  8053                           
  8054                           ;main.c: 129: memset( _switchStates, 0, sizeof( SwitchState_t ) * 5 );
  8055                           
  8056                           ;incstack = 0
  8057                           ; Regs used in __Wakeup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8058  13A7  3000               	movlw	0
  8059  13A8  0140               	movlb	0	; select bank0
  8060  13A9  00B1               	movwf	memset@c
  8061  13AA  00B2               	movwf	memset@c+1
  8062  13AB  300F               	movlw	15
  8063  13AC  00B3               	movwf	memset@n
  8064  13AD  3000               	movlw	0
  8065  13AE  00B4               	movwf	memset@n+1
  8066  13AF  30BB               	movlw	(low (__switchStates| (0+256)))& (0+255)
  8067  13B0  3191  21E9  3193   	fcall	_memset
  8068                           
  8069                           ;main.c: 130: memset( &_extraSwitchState, 0, sizeof( SwitchState_t ) );
  8070  13B3  3000               	movlw	0
  8071  13B4  0140               	movlb	0	; select bank0
  8072  13B5  00B1               	movwf	memset@c
  8073  13B6  00B2               	movwf	memset@c+1
  8074  13B7  3003               	movlw	3
  8075  13B8  00B3               	movwf	memset@n
  8076  13B9  3000               	movlw	0
  8077  13BA  00B4               	movwf	memset@n+1
  8078  13BB  305C               	movlw	(low (__extraSwitchState| (0+256)))& (0+255)
  8079  13BC  3191  21E9  3193   	fcall	_memset
  8080                           
  8081                           ;main.c: 131: memset( &_faultInputState, 0, sizeof( SwitchState_t ) );
  8082  13BF  3000               	movlw	0
  8083  13C0  0140               	movlb	0	; select bank0
  8084  13C1  00B1               	movwf	memset@c
  8085  13C2  00B2               	movwf	memset@c+1
  8086  13C3  3003               	movlw	3
  8087  13C4  00B3               	movwf	memset@n
  8088  13C5  3000               	movlw	0
  8089  13C6  00B4               	movwf	memset@n+1
  8090  13C7  3059               	movlw	(low (__faultInputState| (0+256)))& (0+255)
  8091  13C8  3191  21E9  3193   	fcall	_memset
  8092                           
  8093                           ;main.c: 132: memset( &_enableInputState, 0, sizeof( SwitchState_t ) );
  8094  13CB  3000               	movlw	0
  8095  13CC  0140               	movlb	0	; select bank0
  8096  13CD  00B1               	movwf	memset@c
  8097  13CE  00B2               	movwf	memset@c+1
  8098  13CF  3003               	movlw	3
  8099  13D0  00B3               	movwf	memset@n
  8100  13D1  3000               	movlw	0
  8101  13D2  00B4               	movwf	memset@n+1
  8102  13D3  3056               	movlw	(low (__enableInputState| (0+256)))& (0+255)
  8103  13D4  3191  21E9  3193   	fcall	_memset
  8104                           
  8105                           ;main.c: 133: memset( LED_COL, 0, 5 );
  8106  13D7  3000               	movlw	0
  8107  13D8  0140               	movlb	0	; select bank0
  8108  13D9  00B1               	movwf	memset@c
  8109  13DA  00B2               	movwf	memset@c+1
  8110  13DB  3005               	movlw	5
  8111  13DC  00B3               	movwf	memset@n
  8112  13DD  3000               	movlw	0
  8113  13DE  00B4               	movwf	memset@n+1
  8114  13DF  3051               	movlw	(low (_LED_COL| (0+256)))& (0+255)
  8115  13E0  3191  21E9  3193   	fcall	_memset
  8116                           
  8117                           ;main.c: 136: EUSART_Initialize();
  8118  13E3  3193  23E9  3193   	fcall	_EUSART_Initialize
  8119                           
  8120                           ;main.c: 138: SYSTEM_Wakeup();
  8121  13E6  3190  207C         	fcall	_SYSTEM_Wakeup
  8122  13E8  0008               	return
  8123  13E9                     __end_of__Wakeup:	
  8124                           
  8125                           	psect	text13
  8126  107C                     __ptext13:	
  8127 ;; *************** function _SYSTEM_Wakeup *****************
  8128 ;; Defined at:
  8129 ;;		line 203 in file "../src/system.c"
  8130 ;; Parameters:    Size  Location     Type
  8131 ;;		None
  8132 ;; Auto vars:     Size  Location     Type
  8133 ;;		None
  8134 ;; Return value:  Size  Location     Type
  8135 ;;                  1    wreg      void 
  8136 ;; Registers used:
  8137 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8138 ;; Tracked objects:
  8139 ;;		On entry : 0/0
  8140 ;;		On exit  : 0/0
  8141 ;;		Unchanged: 0/0
  8142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8147 ;;Total ram usage:        0 bytes
  8148 ;; Hardware stack levels used:    1
  8149 ;; Hardware stack levels required when called:    9
  8150 ;; This function calls:
  8151 ;;		_CAN_Wakeup
  8152 ;; This function is called by:
  8153 ;;		__Wakeup
  8154 ;; This function uses a non-reentrant model
  8155 ;;
  8156                           
  8157                           
  8158                           ;psect for function _SYSTEM_Wakeup
  8159  107C                     _SYSTEM_Wakeup:	
  8160                           
  8161                           ;system.c: 206: LATAbits.LATA7 = 1;
  8162                           
  8163                           ;incstack = 0
  8164                           ; Regs used in _SYSTEM_Wakeup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8165  107C  0140               	movlb	0	; select bank0
  8166  107D  1798               	bsf	24,7	;volatile
  8167                           
  8168                           ;system.c: 207: CAN_Wakeup();
  8169  107E  3192  2293         	fcall	_CAN_Wakeup
  8170                           
  8171                           ;system.c: 210: PIR0bits.TMR0IF = 0;
  8172  1080  014E               	movlb	14	; select bank14
  8173  1081  128C               	bcf	12,5	;volatile
  8174                           
  8175                           ;system.c: 211: PIE0bits.TMR0IE = 1;
  8176  1082  1696               	bsf	22,5	;volatile
  8177                           
  8178                           ;system.c: 214: IOCCN = 0x1 | 0x2;
  8179  1083  3003               	movlw	3
  8180  1084  017E               	movlb	62	; select bank62
  8181  1085  00D4               	movwf	84	;volatile
  8182                           
  8183                           ;system.c: 216: PIR0bits.IOCIF = 0;
  8184  1086  014E               	movlb	14	; select bank14
  8185  1087  120C               	bcf	12,4	;volatile
  8186                           
  8187                           ;system.c: 217: PIE0bits.IOCIE = 1;
  8188  1088  1616               	bsf	22,4	;volatile
  8189                           
  8190                           ;system.c: 220: INTCONbits.PEIE = 1;
  8191  1089  170B               	bsf	11,6	;volatile
  8192                           
  8193                           ;system.c: 221: INTCONbits.GIE = 1;
  8194  108A  178B               	bsf	11,7	;volatile
  8195  108B  0008               	return
  8196  108C                     __end_of_SYSTEM_Wakeup:	
  8197                           
  8198                           	psect	text14
  8199  1293                     __ptext14:	
  8200 ;; *************** function _CAN_Wakeup *****************
  8201 ;; Defined at:
  8202 ;;		line 478 in file "../src/CAN_SPI_PIC16.c"
  8203 ;; Parameters:    Size  Location     Type
  8204 ;;		None
  8205 ;; Auto vars:     Size  Location     Type
  8206 ;;		None
  8207 ;; Return value:  Size  Location     Type
  8208 ;;                  1    wreg      void 
  8209 ;; Registers used:
  8210 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8211 ;; Tracked objects:
  8212 ;;		On entry : 0/0
  8213 ;;		On exit  : 0/0
  8214 ;;		Unchanged: 0/0
  8215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8220 ;;Total ram usage:        0 bytes
  8221 ;; Hardware stack levels used:    1
  8222 ;; Hardware stack levels required when called:    8
  8223 ;; This function calls:
  8224 ;;		__SetMode
  8225 ;; This function is called by:
  8226 ;;		_SYSTEM_Wakeup
  8227 ;; This function uses a non-reentrant model
  8228 ;;
  8229                           
  8230                           
  8231                           ;psect for function _CAN_Wakeup
  8232  1293                     _CAN_Wakeup:	
  8233                           
  8234                           ;CAN_SPI_PIC16.c: 480: CAN_rxMessageQ.m_getIdx = CAN_rxMessageQ.m_putIdx = 0;
  8235                           
  8236                           ;incstack = 0
  8237                           ; Regs used in _CAN_Wakeup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8238  1293  304C               	movlw	76
  8239  1294  0086               	movwf	6
  8240  1295  3026               	movlw	38
  8241  1296  0087               	movwf	7
  8242  1297  304C               	movlw	76
  8243  1298  0084               	movwf	4
  8244  1299  3026               	movlw	38
  8245  129A  0085               	movwf	5
  8246  129B  3101               	addfsr 0,1
  8247  129C  3000               	movlw	0
  8248  129D  3F80               	movwi [0]fsr0
  8249  129E  3FC0               	movwi [0]fsr1
  8250                           
  8251                           ;CAN_SPI_PIC16.c: 481: CAN_txMessageQ.m_getIdx = CAN_txMessageQ.m_putIdx = 0;
  8252  129F  301E               	movlw	30
  8253  12A0  0086               	movwf	6
  8254  12A1  3027               	movlw	39
  8255  12A2  0087               	movwf	7
  8256  12A3  301E               	movlw	30
  8257  12A4  0084               	movwf	4
  8258  12A5  3027               	movlw	39
  8259  12A6  0085               	movwf	5
  8260  12A7  3101               	addfsr 0,1
  8261  12A8  3000               	movlw	0
  8262  12A9  3F80               	movwi [0]fsr0
  8263  12AA  3FC0               	movwi [0]fsr1
  8264                           
  8265                           ;CAN_SPI_PIC16.c: 485: LATBbits.LATB5 = 0;
  8266  12AB  0140               	movlb	0	; select bank0
  8267  12AC  1299               	bcf	25,5	;volatile
  8268                           
  8269                           ;CAN_SPI_PIC16.c: 488: _SetMode( CANCTRL_REQOP_NORMAL );
  8270  12AD  3000               	movlw	0
  8271  12AE  3197  279E         	fcall	__SetMode
  8272  12B0  0008               	return
  8273  12B1                     __end_of_CAN_Wakeup:	
  8274                           
  8275                           	psect	text15
  8276  13E9                     __ptext15:	
  8277 ;; *************** function _EUSART_Initialize *****************
  8278 ;; Defined at:
  8279 ;;		line 29 in file "../src/EUSART.c"
  8280 ;; Parameters:    Size  Location     Type
  8281 ;;		None
  8282 ;; Auto vars:     Size  Location     Type
  8283 ;;		None
  8284 ;; Return value:  Size  Location     Type
  8285 ;;                  1    wreg      void 
  8286 ;; Registers used:
  8287 ;;		wreg, status,2
  8288 ;; Tracked objects:
  8289 ;;		On entry : 0/0
  8290 ;;		On exit  : 0/0
  8291 ;;		Unchanged: 0/0
  8292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8295 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8296 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8297 ;;Total ram usage:        1 bytes
  8298 ;; Hardware stack levels used:    1
  8299 ;; Hardware stack levels required when called:    5
  8300 ;; This function calls:
  8301 ;;		Nothing
  8302 ;; This function is called by:
  8303 ;;		__Wakeup
  8304 ;;		_main
  8305 ;; This function uses a non-reentrant model
  8306 ;;
  8307                           
  8308                           
  8309                           ;psect for function _EUSART_Initialize
  8310  13E9                     _EUSART_Initialize:	
  8311                           
  8312                           ;EUSART.c: 32: TRISCbits.TRISC6 = 0;
  8313                           
  8314                           ;incstack = 0
  8315                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  8316  13E9  0140               	movlb	0	; select bank0
  8317  13EA  1314               	bcf	20,6	;volatile
  8318                           
  8319                           ;EUSART.c: 33: TRISCbits.TRISC7 = 1;
  8320  13EB  1794               	bsf	20,7	;volatile
  8321                           
  8322                           ;EUSART.c: 36: EUSART_receive_flag = 0;
  8323  13EC  0141               	movlb	1	; select bank1
  8324  13ED  01D9               	clrf	_EUSART_receive_flag^(0+128)
  8325                           
  8326                           ;EUSART.c: 39: PIE3bits.RC1IE = 0;
  8327  13EE  014E               	movlb	14	; select bank14
  8328  13EF  1299               	bcf	25,5	;volatile
  8329                           
  8330                           ;EUSART.c: 40: PIE3bits.TX1IE = 0;
  8331  13F0  1219               	bcf	25,4	;volatile
  8332                           
  8333                           ;EUSART.c: 43: BAUD1CON = 0x08;
  8334  13F1  3008               	movlw	8
  8335  13F2  0142               	movlb	2	; select bank2
  8336  13F3  009F               	movwf	31	;volatile
  8337                           
  8338                           ;EUSART.c: 46: SP1BRG = 0xCE;
  8339  13F4  3000               	movlw	0
  8340  13F5  009C               	movwf	28	;volatile
  8341  13F6  30CE               	movlw	206
  8342  13F7  009B               	movwf	27	;volatile
  8343                           
  8344                           ;EUSART.c: 47: SP1BRGH = 0x00;
  8345  13F8  019C               	clrf	28	;volatile
  8346                           
  8347                           ;EUSART.c: 50: RC1STA = 0xD0;
  8348  13F9  30D0               	movlw	208
  8349  13FA  009D               	movwf	29	;volatile
  8350                           
  8351                           ;EUSART.c: 53: TX1STA = 0x64;
  8352  13FB  3064               	movlw	100
  8353  13FC  009E               	movwf	30	;volatile
  8354                           
  8355                           ;EUSART.c: 56: EUSART_Tx_head = 0;
  8356  13FD  0141               	movlb	1	; select bank1
  8357  13FE  01E6               	clrf	_EUSART_Tx_head^(0+128)
  8358                           
  8359                           ;EUSART.c: 57: EUSART_Tx_tail = 0;
  8360  13FF  0140               	movlb	0	; select bank0
  8361  1400  01DD               	clrf	_EUSART_Tx_tail
  8362                           
  8363                           ;EUSART.c: 58: EUSART_Tx_buffer_remaining = sizeof(EUSART_Tx_buffer);
  8364  1401  301B               	movlw	27
  8365  1402  00B1               	movwf	??_EUSART_Initialize
  8366  1403  0831               	movf	??_EUSART_Initialize,w
  8367  1404  0141               	movlb	1	; select bank1
  8368  1405  00E5               	movwf	_EUSART_Tx_buffer_remaining^(0+128)
  8369                           
  8370                           ;EUSART.c: 60: EUSART_Rx_head = 0;
  8371  1406  0140               	movlb	0	; select bank0
  8372  1407  01DC               	clrf	_EUSART_Rx_head
  8373                           
  8374                           ;EUSART.c: 61: EUSART_Rx_tail = 0;
  8375  1408  0141               	movlb	1	; select bank1
  8376  1409  01E4               	clrf	_EUSART_Rx_tail^(0+128)
  8377                           
  8378                           ;EUSART.c: 62: EUSART_Rx_count = 0;
  8379  140A  01E3               	clrf	_EUSART_Rx_count^(0+128)
  8380                           
  8381                           ;EUSART.c: 65: PIE3bits.RC1IE = 1;
  8382  140B  014E               	movlb	14	; select bank14
  8383  140C  1699               	bsf	25,5	;volatile
  8384                           
  8385                           ;EUSART.c: 66: EUSART_slave_bad_response = 0x0000;
  8386  140D  0141               	movlb	1	; select bank1
  8387  140E  01CD               	clrf	_EUSART_slave_bad_response^(0+128)
  8388  140F  01CE               	clrf	(_EUSART_slave_bad_response+1)^(0+128)
  8389                           
  8390                           ;EUSART.c: 69: TMR1IF = 0;
  8391  1410  014E               	movlb	14	; select bank14
  8392  1411  1010               	bcf	16,0	;volatile
  8393                           
  8394                           ;EUSART.c: 70: T1CLK = 0b0001;
  8395  1412  3001               	movlw	1
  8396  1413  0144               	movlb	4	; select bank4
  8397  1414  0091               	movwf	17	;volatile
  8398                           
  8399                           ;EUSART.c: 71: T1CON = 0b00100110;
  8400  1415  3026               	movlw	38
  8401  1416  008E               	movwf	14	;volatile
  8402                           
  8403                           ;EUSART.c: 72: TMR1IE = 1;
  8404  1417  014E               	movlb	14	; select bank14
  8405  1418  141A               	bsf	26,0	;volatile
  8406                           
  8407                           ;EUSART.c: 73: T1CONbits.TMR1ON = 1;
  8408  1419  0144               	movlb	4	; select bank4
  8409  141A  140E               	bsf	14,0	;volatile
  8410                           
  8411                           ;EUSART.c: 74: EUSART_packet_data[EUSART_ADDRESS_BYTE] = 0x55;
  8412  141B  3055               	movlw	85
  8413  141C  0140               	movlb	0	; select bank0
  8414  141D  00B1               	movwf	??_EUSART_Initialize
  8415  141E  0831               	movf	??_EUSART_Initialize,w
  8416  141F  0141               	movlb	1	; select bank1
  8417  1420  00A0               	movwf	_EUSART_packet_data^(0+128)
  8418                           
  8419                           ;EUSART.c: 75: current_address_ID = EUSART_packet_data[EUSART_ADDRESS_BYTE];
  8420  1421  0820               	movf	_EUSART_packet_data^(0+128),w
  8421  1422  0140               	movlb	0	; select bank0
  8422  1423  00B1               	movwf	??_EUSART_Initialize
  8423  1424  0831               	movf	??_EUSART_Initialize,w
  8424  1425  0141               	movlb	1	; select bank1
  8425  1426  00E2               	movwf	_current_address_ID^(0+128)
  8426                           
  8427                           ;EUSART.c: 76: EUSART_packet_data[EUSART_MACHINE_STATUS_BYTE] = 0b00000001;
  8428  1427  01A4               	clrf	(_EUSART_packet_data^(0+128)+4)
  8429  1428  0AA4               	incf	(_EUSART_packet_data^(0+128)+4),f
  8430                           
  8431                           ;EUSART.c: 77: CAN_ID_switch = 1;
  8432  1429  01D8               	clrf	_CAN_ID_switch^(0+128)
  8433  142A  0AD8               	incf	_CAN_ID_switch^(0+128),f
  8434  142B  0008               	return
  8435  142C                     __end_of_EUSART_Initialize:	
  8436                           ;EUSART.c: 78: return;
  8437                           
  8438                           
  8439                           	psect	text16
  8440  105E                     __ptext16:	
  8441 ;; *************** function _SYSTEM_Sleep *****************
  8442 ;; Defined at:
  8443 ;;		line 177 in file "../src/system.c"
  8444 ;; Parameters:    Size  Location     Type
  8445 ;;		None
  8446 ;; Auto vars:     Size  Location     Type
  8447 ;;		None
  8448 ;; Return value:  Size  Location     Type
  8449 ;;                  1    wreg      void 
  8450 ;; Registers used:
  8451 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8452 ;; Tracked objects:
  8453 ;;		On entry : 0/0
  8454 ;;		On exit  : 0/0
  8455 ;;		Unchanged: 0/0
  8456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8461 ;;Total ram usage:        0 bytes
  8462 ;; Hardware stack levels used:    1
  8463 ;; Hardware stack levels required when called:    9
  8464 ;; This function calls:
  8465 ;;		_CAN_Sleep
  8466 ;; This function is called by:
  8467 ;;		_power_down_task
  8468 ;; This function uses a non-reentrant model
  8469 ;;
  8470                           
  8471                           
  8472                           ;psect for function _SYSTEM_Sleep
  8473  105E                     _SYSTEM_Sleep:	
  8474                           
  8475                           ;system.c: 180: INTCONbits.PEIE = 0;
  8476                           
  8477                           ;incstack = 0
  8478                           ; Regs used in _SYSTEM_Sleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8479  105E  130B               	bcf	11,6	;volatile
  8480                           
  8481                           ;system.c: 183: IOCCN = 0x1;
  8482  105F  3001               	movlw	1
  8483  1060  017E               	movlb	62	; select bank62
  8484  1061  00D4               	movwf	84	;volatile
  8485                           
  8486                           ;system.c: 184: PIR0bits.IOCIF = 0;
  8487  1062  014E               	movlb	14	; select bank14
  8488  1063  120C               	bcf	12,4	;volatile
  8489                           
  8490                           ;system.c: 185: PIE0bits.IOCIE = 1;
  8491  1064  1616               	bsf	22,4	;volatile
  8492                           
  8493                           ;system.c: 188: LATAbits.LATA7 = 0;
  8494  1065  0140               	movlb	0	; select bank0
  8495  1066  1398               	bcf	24,7	;volatile
  8496                           
  8497                           ;system.c: 191: CPUDOZEbits.IDLEN = 1;
  8498  1067  0151               	movlb	17	; select bank17
  8499  1068  178C               	bsf	12,7	;volatile
  8500                           
  8501                           ;system.c: 195: CAN_Sleep();
  8502  1069  3190  2036         	fcall	_CAN_Sleep
  8503  106B  0063               	sleep	;# 
  8504  106C  0008               	return
  8505  106D                     __end_of_SYSTEM_Sleep:	
  8506                           
  8507                           	psect	text17
  8508  1036                     __ptext17:	
  8509 ;; *************** function _CAN_Sleep *****************
  8510 ;; Defined at:
  8511 ;;		line 466 in file "../src/CAN_SPI_PIC16.c"
  8512 ;; Parameters:    Size  Location     Type
  8513 ;;		None
  8514 ;; Auto vars:     Size  Location     Type
  8515 ;;		None
  8516 ;; Return value:  Size  Location     Type
  8517 ;;                  1    wreg      void 
  8518 ;; Registers used:
  8519 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8520 ;; Tracked objects:
  8521 ;;		On entry : 0/0
  8522 ;;		On exit  : 0/0
  8523 ;;		Unchanged: 0/0
  8524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8529 ;;Total ram usage:        0 bytes
  8530 ;; Hardware stack levels used:    1
  8531 ;; Hardware stack levels required when called:    8
  8532 ;; This function calls:
  8533 ;;		__SetMode
  8534 ;; This function is called by:
  8535 ;;		_SYSTEM_Sleep
  8536 ;; This function uses a non-reentrant model
  8537 ;;
  8538                           
  8539                           
  8540                           ;psect for function _CAN_Sleep
  8541  1036                     _CAN_Sleep:	
  8542                           
  8543                           ;CAN_SPI_PIC16.c: 469: LATBbits.LATB5 = 1;
  8544                           
  8545                           ;incstack = 0
  8546                           ; Regs used in _CAN_Sleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8547  1036  0140               	movlb	0	; select bank0
  8548  1037  1699               	bsf	25,5	;volatile
  8549                           
  8550                           ;CAN_SPI_PIC16.c: 472: _SetMode( CANCTRL_REQOP_SLEEP );
  8551  1038  3020               	movlw	32
  8552  1039  3197  279E         	fcall	__SetMode
  8553  103B  0008               	return
  8554  103C                     __end_of_CAN_Sleep:	
  8555                           
  8556                           	psect	text18
  8557  16EA                     __ptext18:	
  8558 ;; *************** function _led_task *****************
  8559 ;; Defined at:
  8560 ;;		line 238 in file "../src/main.c"
  8561 ;; Parameters:    Size  Location     Type
  8562 ;;		None
  8563 ;; Auto vars:     Size  Location     Type
  8564 ;;		None
  8565 ;; Return value:  Size  Location     Type
  8566 ;;                  1    wreg      void 
  8567 ;; Registers used:
  8568 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8569 ;; Tracked objects:
  8570 ;;		On entry : 0/0
  8571 ;;		On exit  : 0/0
  8572 ;;		Unchanged: 0/0
  8573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8576 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8577 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8578 ;;Total ram usage:        8 bytes
  8579 ;; Hardware stack levels used:    1
  8580 ;; Hardware stack levels required when called:    6
  8581 ;; This function calls:
  8582 ;;		_Update_LEDs
  8583 ;; This function is called by:
  8584 ;;		_main
  8585 ;; This function uses a non-reentrant model
  8586 ;;
  8587                           
  8588                           
  8589                           ;psect for function _led_task
  8590  16EA                     _led_task:	
  8591                           
  8592                           ;main.c: 239: static uint8_t LED_row = 0;
  8593                           ;main.c: 240: static TIMER_TICK led_tick = 0;
  8594                           ;main.c: 242: if( ( TIMER_TICK )( SYSTEM_tick - led_tick ) >= 2 ){
  8595                           
  8596                           ;incstack = 0
  8597                           ; Regs used in _led_task: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8598  16EA  0140               	movlb	0	; select bank0
  8599  16EB  0853               	movf	_SYSTEM_tick,w
  8600  16EC  00B4               	movwf	??_led_task
  8601  16ED  0854               	movf	_SYSTEM_tick+1,w
  8602  16EE  00B5               	movwf	??_led_task+1
  8603  16EF  0855               	movf	_SYSTEM_tick+2,w
  8604  16F0  00B6               	movwf	??_led_task+2
  8605  16F1  0856               	movf	_SYSTEM_tick+3,w
  8606  16F2  00B7               	movwf	??_led_task+3
  8607  16F3  0142               	movlb	2	; select bank2
  8608  16F4  0939               	comf	led_task@led_tick^(0+256),w
  8609  16F5  0140               	movlb	0	; select bank0
  8610  16F6  00B8               	movwf	??_led_task+4
  8611  16F7  0142               	movlb	2	; select bank2
  8612  16F8  093A               	comf	(led_task@led_tick+1)^(0+256),w
  8613  16F9  0140               	movlb	0	; select bank0
  8614  16FA  00B9               	movwf	??_led_task+5
  8615  16FB  0142               	movlb	2	; select bank2
  8616  16FC  093B               	comf	(led_task@led_tick+2)^(0+256),w
  8617  16FD  0140               	movlb	0	; select bank0
  8618  16FE  00BA               	movwf	??_led_task+6
  8619  16FF  0142               	movlb	2	; select bank2
  8620  1700  093C               	comf	(led_task@led_tick+3)^(0+256),w
  8621  1701  0140               	movlb	0	; select bank0
  8622  1702  00BB               	movwf	??_led_task+7
  8623  1703  0AB8               	incf	??_led_task+4,f
  8624  1704  1903               	skipnz
  8625  1705  0AB9               	incf	??_led_task+5,f
  8626  1706  1903               	skipnz
  8627  1707  0ABA               	incf	??_led_task+6,f
  8628  1708  1903               	skipnz
  8629  1709  0ABB               	incf	??_led_task+7,f
  8630  170A  0838               	movf	??_led_task+4,w
  8631  170B  07B4               	addwf	??_led_task,f
  8632  170C  0839               	movf	??_led_task+5,w
  8633  170D  3DB5               	addwfc	??_led_task+1,f
  8634  170E  083A               	movf	??_led_task+6,w
  8635  170F  3DB6               	addwfc	??_led_task+2,f
  8636  1710  083B               	movf	??_led_task+7,w
  8637  1711  3DB7               	addwfc	??_led_task+3,f
  8638  1712  0837               	movf	??_led_task+3,w
  8639  1713  1D03               	btfss	3,2
  8640  1714  2F1F               	goto	l4827
  8641  1715  0836               	movf	??_led_task+2,w
  8642  1716  1D03               	btfss	3,2
  8643  1717  2F1F               	goto	l4827
  8644  1718  0835               	movf	??_led_task+1,w
  8645  1719  1D03               	btfss	3,2
  8646  171A  2F1F               	goto	l4827
  8647  171B  3002               	movlw	2
  8648  171C  0234               	subwf	??_led_task,w
  8649  171D  1C03               	btfss	3,0
  8650  171E  0008               	return
  8651  171F                     l4827:	
  8652                           
  8653                           ;main.c: 243: led_tick = SYSTEM_tick;
  8654  171F  0856               	movf	_SYSTEM_tick+3,w
  8655  1720  0142               	movlb	2	; select bank2
  8656  1721  00BC               	movwf	(led_task@led_tick+3)^(0+256)
  8657  1722  0140               	movlb	0	; select bank0
  8658  1723  0855               	movf	_SYSTEM_tick+2,w
  8659  1724  0142               	movlb	2	; select bank2
  8660  1725  00BB               	movwf	(led_task@led_tick+2)^(0+256)
  8661  1726  0140               	movlb	0	; select bank0
  8662  1727  0854               	movf	_SYSTEM_tick+1,w
  8663  1728  0142               	movlb	2	; select bank2
  8664  1729  00BA               	movwf	(led_task@led_tick+1)^(0+256)
  8665  172A  0140               	movlb	0	; select bank0
  8666  172B  0853               	movf	_SYSTEM_tick,w
  8667  172C  0142               	movlb	2	; select bank2
  8668  172D  00B9               	movwf	led_task@led_tick^(0+256)
  8669                           
  8670                           ;main.c: 244: if(LED_row >= 5)
  8671  172E  3005               	movlw	5
  8672  172F  0141               	movlb	1	; select bank1
  8673  1730  0250               	subwf	led_task@LED_row^(0+128),w
  8674  1731  1803               	btfsc	3,0
  8675                           
  8676                           ;main.c: 245: {
  8677                           ;main.c: 246: LED_row = 0;
  8678  1732  01D0               	clrf	led_task@LED_row^(0+128)
  8679                           
  8680                           ;main.c: 247: }
  8681                           ;main.c: 248: Update_LEDs(LED_row);
  8682  1733  0850               	movf	led_task@LED_row^(0+128),w
  8683  1734  0140               	movlb	0	; select bank0
  8684  1735  00B4               	movwf	??_led_task
  8685  1736  01B5               	clrf	??_led_task+1
  8686  1737  0834               	movf	??_led_task,w
  8687  1738  00B1               	movwf	Update_LEDs@row
  8688  1739  0835               	movf	??_led_task+1,w
  8689  173A  00B2               	movwf	Update_LEDs@row+1
  8690  173B  3192  2276         	fcall	_Update_LEDs
  8691                           
  8692                           ;main.c: 249: LED_row++;
  8693  173D  3001               	movlw	1
  8694  173E  0140               	movlb	0	; select bank0
  8695  173F  00B4               	movwf	??_led_task
  8696  1740  0834               	movf	??_led_task,w
  8697  1741  0141               	movlb	1	; select bank1
  8698  1742  07D0               	addwf	led_task@LED_row^(0+128),f
  8699  1743  0008               	return
  8700  1744                     __end_of_led_task:	
  8701                           
  8702                           	psect	text19
  8703  1276                     __ptext19:	
  8704 ;; *************** function _Update_LEDs *****************
  8705 ;; Defined at:
  8706 ;;		line 75 in file "../src/LED.c"
  8707 ;; Parameters:    Size  Location     Type
  8708 ;;  row             2   17[BANK0 ] unsigned int 
  8709 ;; Auto vars:     Size  Location     Type
  8710 ;;		None
  8711 ;; Return value:  Size  Location     Type
  8712 ;;                  1    wreg      void 
  8713 ;; Registers used:
  8714 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8715 ;; Tracked objects:
  8716 ;;		On entry : 0/0
  8717 ;;		On exit  : 0/0
  8718 ;;		Unchanged: 0/0
  8719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8720 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8722 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8723 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8724 ;;Total ram usage:        3 bytes
  8725 ;; Hardware stack levels used:    1
  8726 ;; Hardware stack levels required when called:    5
  8727 ;; This function calls:
  8728 ;;		Nothing
  8729 ;; This function is called by:
  8730 ;;		_led_task
  8731 ;; This function uses a non-reentrant model
  8732 ;;
  8733                           
  8734                           
  8735                           ;psect for function _Update_LEDs
  8736  1276                     _Update_LEDs:	
  8737                           
  8738                           ;LED.c: 78: LATF &= ~0B00011111U;
  8739                           
  8740                           ;incstack = 0
  8741                           ; Regs used in _Update_LEDs: [wreg+fsr1l+fsr1h+status,2+status,0]
  8742  1276  30E0               	movlw	224
  8743  1277  0140               	movlb	0	; select bank0
  8744  1278  00B3               	movwf	??_Update_LEDs
  8745  1279  0833               	movf	??_Update_LEDs,w
  8746  127A  059D               	andwf	29,f	;volatile
  8747                           
  8748                           ;LED.c: 81: LATA &= (~0B00011111U) | 0b10000000U;
  8749  127B  30E0               	movlw	224
  8750  127C  00B3               	movwf	??_Update_LEDs
  8751  127D  0833               	movf	??_Update_LEDs,w
  8752  127E  0598               	andwf	24,f	;volatile
  8753                           
  8754                           ;LED.c: 84: LATF |= ( LED_column_array[row] & 0B00011111U );
  8755  127F  0831               	movf	Update_LEDs@row,w
  8756  1280  3E4E               	addlw	(low (_LED_column_array| 0))& (0+255)
  8757  1281  0086               	movwf	6
  8758  1282  0187               	clrf	7
  8759  1283  0801               	movf	1,w
  8760  1284  391F               	andlw	31
  8761  1285  00B3               	movwf	??_Update_LEDs
  8762  1286  0833               	movf	??_Update_LEDs,w
  8763  1287  049D               	iorwf	29,f	;volatile
  8764                           
  8765                           ;LED.c: 87: LATA |= ( LED_row_array[row] & (0B00011111U | 0b10000000U));
  8766  1288  0831               	movf	Update_LEDs@row,w
  8767  1289  3E20               	addlw	(low (_LED_row_array| (0+256)))& (0+255)
  8768  128A  0086               	movwf	6
  8769  128B  3001               	movlw	1	; select bank2/3
  8770  128C  0087               	movwf	7
  8771  128D  0801               	movf	1,w
  8772  128E  399F               	andlw	159
  8773  128F  00B3               	movwf	??_Update_LEDs
  8774  1290  0833               	movf	??_Update_LEDs,w
  8775  1291  0498               	iorwf	24,f	;volatile
  8776  1292  0008               	return
  8777  1293                     __end_of_Update_LEDs:	
  8778                           
  8779                           	psect	text20
  8780  1541                     __ptext20:	
  8781 ;; *************** function _handle_can_messages_from_VCU *****************
  8782 ;; Defined at:
  8783 ;;		line 254 in file "../src/main.c"
  8784 ;; Parameters:    Size  Location     Type
  8785 ;;		None
  8786 ;; Auto vars:     Size  Location     Type
  8787 ;;		None
  8788 ;; Return value:  Size  Location     Type
  8789 ;;                  1    wreg      void 
  8790 ;; Registers used:
  8791 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8792 ;; Tracked objects:
  8793 ;;		On entry : 0/0
  8794 ;;		On exit  : 0/0
  8795 ;;		Unchanged: 0/0
  8796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8799 ;;      Temps:          0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8800 ;;      Totals:         0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8801 ;;Total ram usage:        8 bytes
  8802 ;; Hardware stack levels used:    1
  8803 ;; Hardware stack levels required when called:    8
  8804 ;; This function calls:
  8805 ;;		_Receive_CAN_Message
  8806 ;; This function is called by:
  8807 ;;		_main
  8808 ;; This function uses a non-reentrant model
  8809 ;;
  8810                           
  8811                           
  8812                           ;psect for function _handle_can_messages_from_VCU
  8813  1541                     _handle_can_messages_from_VCU:	
  8814                           
  8815                           ;main.c: 255: static TIMER_TICK can_tick = 0;
  8816                           ;main.c: 257: if( ( TIMER_TICK )( SYSTEM_tick - can_tick ) >= 45 ){
  8817                           
  8818                           ;incstack = 0
  8819                           ; Regs used in _handle_can_messages_from_VCU: [wreg-fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  8820  1541  0140               	movlb	0	; select bank0
  8821  1542  0853               	movf	_SYSTEM_tick,w
  8822  1543  0143               	movlb	3	; select bank3
  8823  1544  00E6               	movwf	??_handle_can_messages_from_VCU^(0+384)
  8824  1545  0140               	movlb	0	; select bank0
  8825  1546  0854               	movf	_SYSTEM_tick+1,w
  8826  1547  0143               	movlb	3	; select bank3
  8827  1548  00E7               	movwf	(??_handle_can_messages_from_VCU^(0+384)+1)
  8828  1549  0140               	movlb	0	; select bank0
  8829  154A  0855               	movf	_SYSTEM_tick+2,w
  8830  154B  0143               	movlb	3	; select bank3
  8831  154C  00E8               	movwf	(??_handle_can_messages_from_VCU^(0+384)+2)
  8832  154D  0140               	movlb	0	; select bank0
  8833  154E  0856               	movf	_SYSTEM_tick+3,w
  8834  154F  0143               	movlb	3	; select bank3
  8835  1550  00E9               	movwf	(??_handle_can_messages_from_VCU^(0+384)+3)
  8836  1551  0142               	movlb	2	; select bank2
  8837  1552  0935               	comf	handle_can_messages_from_VCU@can_tick^(0+256),w
  8838  1553  0143               	movlb	3	; select bank3
  8839  1554  00EA               	movwf	(??_handle_can_messages_from_VCU+4)^(0+384)
  8840  1555  0142               	movlb	2	; select bank2
  8841  1556  0936               	comf	(handle_can_messages_from_VCU@can_tick+1)^(0+256),w
  8842  1557  0143               	movlb	3	; select bank3
  8843  1558  00EB               	movwf	((??_handle_can_messages_from_VCU+4)^(0+384)+1)
  8844  1559  0142               	movlb	2	; select bank2
  8845  155A  0937               	comf	(handle_can_messages_from_VCU@can_tick+2)^(0+256),w
  8846  155B  0143               	movlb	3	; select bank3
  8847  155C  00EC               	movwf	((??_handle_can_messages_from_VCU+4)^(0+384)+2)
  8848  155D  0142               	movlb	2	; select bank2
  8849  155E  0938               	comf	(handle_can_messages_from_VCU@can_tick+3)^(0+256),w
  8850  155F  0143               	movlb	3	; select bank3
  8851  1560  00ED               	movwf	((??_handle_can_messages_from_VCU+4)^(0+384)+3)
  8852  1561  0AEA               	incf	(??_handle_can_messages_from_VCU+4)^(0+384),f
  8853  1562  1903               	skipnz
  8854  1563  0AEB               	incf	((??_handle_can_messages_from_VCU+4)^(0+384)+1),f
  8855  1564  1903               	skipnz
  8856  1565  0AEC               	incf	((??_handle_can_messages_from_VCU+4)^(0+384)+2),f
  8857  1566  1903               	skipnz
  8858  1567  0AED               	incf	((??_handle_can_messages_from_VCU+4)^(0+384)+3),f
  8859  1568  086A               	movf	(??_handle_can_messages_from_VCU+4)^(0+384),w
  8860  1569  07E6               	addwf	??_handle_can_messages_from_VCU^(0+384),f
  8861  156A  086B               	movf	(??_handle_can_messages_from_VCU+5)^(0+384),w
  8862  156B  3DE7               	addwfc	(??_handle_can_messages_from_VCU^(0+384)+1),f
  8863  156C  086C               	movf	(??_handle_can_messages_from_VCU+6)^(0+384),w
  8864  156D  3DE8               	addwfc	(??_handle_can_messages_from_VCU^(0+384)+2),f
  8865  156E  086D               	movf	(??_handle_can_messages_from_VCU+7)^(0+384),w
  8866  156F  3DE9               	addwfc	(??_handle_can_messages_from_VCU^(0+384)+3),f
  8867  1570  0869               	movf	(??_handle_can_messages_from_VCU^(0+384)+3),w
  8868  1571  1D03               	btfss	3,2
  8869  1572  2D7D               	goto	l6561
  8870  1573  0868               	movf	(??_handle_can_messages_from_VCU^(0+384)+2),w
  8871  1574  1D03               	btfss	3,2
  8872  1575  2D7D               	goto	l6561
  8873  1576  0867               	movf	(??_handle_can_messages_from_VCU^(0+384)+1),w
  8874  1577  1D03               	btfss	3,2
  8875  1578  2D7D               	goto	l6561
  8876  1579  302D               	movlw	45
  8877  157A  0266               	subwf	??_handle_can_messages_from_VCU^(0+384),w
  8878  157B  1C03               	btfss	3,0
  8879  157C  0008               	return
  8880  157D                     l6561:	
  8881                           
  8882                           ;main.c: 258: can_tick = SYSTEM_tick;
  8883  157D  0140               	movlb	0	; select bank0
  8884  157E  0856               	movf	_SYSTEM_tick+3,w
  8885  157F  0142               	movlb	2	; select bank2
  8886  1580  00B8               	movwf	(handle_can_messages_from_VCU@can_tick+3)^(0+256)
  8887  1581  0140               	movlb	0	; select bank0
  8888  1582  0855               	movf	_SYSTEM_tick+2,w
  8889  1583  0142               	movlb	2	; select bank2
  8890  1584  00B7               	movwf	(handle_can_messages_from_VCU@can_tick+2)^(0+256)
  8891  1585  0140               	movlb	0	; select bank0
  8892  1586  0854               	movf	_SYSTEM_tick+1,w
  8893  1587  0142               	movlb	2	; select bank2
  8894  1588  00B6               	movwf	(handle_can_messages_from_VCU@can_tick+1)^(0+256)
  8895  1589  0140               	movlb	0	; select bank0
  8896  158A  0853               	movf	_SYSTEM_tick,w
  8897  158B  0142               	movlb	2	; select bank2
  8898  158C  00B5               	movwf	handle_can_messages_from_VCU@can_tick^(0+256)
  8899                           
  8900                           ;main.c: 259: Receive_CAN_Message();
  8901  158D  3192  2259         	fcall	_Receive_CAN_Message
  8902  158F  0008               	return
  8903  1590                     __end_of_handle_can_messages_from_VCU:	
  8904                           
  8905                           	psect	text21
  8906  1259                     __ptext21:	
  8907 ;; *************** function _Receive_CAN_Message *****************
  8908 ;; Defined at:
  8909 ;;		line 615 in file "../src/CAN_SPI_PIC16.c"
  8910 ;; Parameters:    Size  Location     Type
  8911 ;;		None
  8912 ;; Auto vars:     Size  Location     Type
  8913 ;;  can            14    1[BANK4 ] struct .
  8914 ;;  result          1    0[BANK4 ] unsigned char 
  8915 ;; Return value:  Size  Location     Type
  8916 ;;                  1    wreg      unsigned char 
  8917 ;; Registers used:
  8918 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8919 ;; Tracked objects:
  8920 ;;		On entry : 0/0
  8921 ;;		On exit  : 0/0
  8922 ;;		Unchanged: 0/0
  8923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8925 ;;      Locals:         0       0       0       0       0      15       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8927 ;;      Totals:         0       0       0       0       0      15       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8928 ;;Total ram usage:       15 bytes
  8929 ;; Hardware stack levels used:    1
  8930 ;; Hardware stack levels required when called:    7
  8931 ;; This function calls:
  8932 ;;		_CAN_Rx
  8933 ;;		_CAN_To_EUSART
  8934 ;; This function is called by:
  8935 ;;		_handle_can_messages_from_VCU
  8936 ;; This function uses a non-reentrant model
  8937 ;;
  8938                           
  8939                           
  8940                           ;psect for function _Receive_CAN_Message
  8941  1259                     _Receive_CAN_Message:	
  8942                           
  8943                           ;CAN_SPI_PIC16.c: 617: can_t can;
  8944                           ;CAN_SPI_PIC16.c: 618: bool result = 0;
  8945                           
  8946                           ;incstack = 0
  8947                           ; Regs used in _Receive_CAN_Message: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8948  1259  0144               	movlb	4	; select bank4
  8949  125A  01BB               	clrf	Receive_CAN_Message@result^(0+512)
  8950  125B                     l6549:	
  8951                           ;CAN_SPI_PIC16.c: 620: while( CAN_Rx( &can ) == 0 )
  8952                           
  8953  125B  303C               	movlw	low Receive_CAN_Message@can
  8954  125C  0140               	movlb	0	; select bank0
  8955  125D  00C3               	movwf	CAN_Rx@ptr
  8956  125E  3002               	movlw	high Receive_CAN_Message@can
  8957  125F  00C4               	movwf	CAN_Rx@ptr+1
  8958  1260  3195  25E4  3192   	fcall	_CAN_Rx
  8959  1263  3A00               	xorlw	0
  8960  1264  1D03               	btfss	3,2
  8961  1265  0008               	return
  8962                           
  8963                           ;CAN_SPI_PIC16.c: 621: {
  8964                           ;CAN_SPI_PIC16.c: 622: result = 1;
  8965  1266  0144               	movlb	4	; select bank4
  8966  1267  01BB               	clrf	Receive_CAN_Message@result^(0+512)
  8967  1268  0ABB               	incf	Receive_CAN_Message@result^(0+512),f
  8968                           
  8969                           ;CAN_SPI_PIC16.c: 623: can.id &= 0x1FFFFFFF;
  8970  1269  30FF               	movlw	255
  8971  126A  05BC               	andwf	Receive_CAN_Message@can^(0+512),f
  8972  126B  30FF               	movlw	255
  8973  126C  05BD               	andwf	(Receive_CAN_Message@can+1)^(0+512),f
  8974  126D  30FF               	movlw	255
  8975  126E  05BE               	andwf	(Receive_CAN_Message@can+2)^(0+512),f
  8976  126F  301F               	movlw	31
  8977  1270  05BF               	andwf	(Receive_CAN_Message@can+3)^(0+512),f
  8978                           
  8979                           ;CAN_SPI_PIC16.c: 624: CAN_To_EUSART(&can);
  8980  1271  303C               	movlw	(low (Receive_CAN_Message@can| (0+512)))& (0+255)
  8981  1272  3180  20D6  3192   	fcall	_CAN_To_EUSART
  8982  1275  2A5B               	goto	l6549
  8983  1276                     __end_of_Receive_CAN_Message:	
  8984                           ;CAN_SPI_PIC16.c: 625: }
  8985                           ;CAN_SPI_PIC16.c: 626: return result;
  8986                           ;	Return value of _Receive_CAN_Message is never used
  8987                           
  8988                           
  8989                           	psect	text22
  8990  00D6                     __ptext22:	
  8991 ;; *************** function _CAN_To_EUSART *****************
  8992 ;; Defined at:
  8993 ;;		line 312 in file "../src/EUSART.c"
  8994 ;; Parameters:    Size  Location     Type
  8995 ;;  message         1    wreg     PTR struct .
  8996 ;;		 -> Receive_CAN_Message@can(14), 
  8997 ;; Auto vars:     Size  Location     Type
  8998 ;;  message         1   23[BANK0 ] PTR struct .
  8999 ;;		 -> Receive_CAN_Message@can(14), 
  9000 ;;  machine_dire    1   22[BANK0 ] unsigned char 
  9001 ;; Return value:  Size  Location     Type
  9002 ;;                  1    wreg      void 
  9003 ;; Registers used:
  9004 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  9005 ;; Tracked objects:
  9006 ;;		On entry : 0/0
  9007 ;;		On exit  : 0/0
  9008 ;;		Unchanged: 0/0
  9009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9011 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9012 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9013 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9014 ;;Total ram usage:        7 bytes
  9015 ;; Hardware stack levels used:    1
  9016 ;; Hardware stack levels required when called:    5
  9017 ;; This function calls:
  9018 ;;		Nothing
  9019 ;; This function is called by:
  9020 ;;		_Receive_CAN_Message
  9021 ;; This function uses a non-reentrant model
  9022 ;;
  9023                           
  9024                           
  9025                           ;psect for function _CAN_To_EUSART
  9026  00D6                     _CAN_To_EUSART:	
  9027                           
  9028                           ;incstack = 0
  9029                           ; Regs used in _CAN_To_EUSART: [wreg-fsr1h+status,2+status,0]
  9030                           ;CAN_To_EUSART@message stored from wreg
  9031  00D6  0140               	movlb	0	; select bank0
  9032  00D7  00B7               	movwf	CAN_To_EUSART@message
  9033                           
  9034                           ;EUSART.c: 314: uint8_t machine_directionA;
  9035                           ;EUSART.c: 317: switch(message->id & 0x0000FFFFU)
  9036  00D8  2BAF               	goto	l5733
  9037  00D9                     l5615:	
  9038                           ;EUSART.c: 318: {
  9039                           ;EUSART.c: 320: case 0x8000U:
  9040                           
  9041                           
  9042                           ;EUSART.c: 321: if(EUSART_packet_data[EUSART_ADDRESS_BYTE] == 0x55)
  9043  00D9  3055               	movlw	85
  9044  00DA  0141               	movlb	1	; select bank1
  9045  00DB  0620               	xorwf	_EUSART_packet_data^(0+128),w
  9046  00DC  1D03               	btfss	3,2
  9047  00DD  2970               	goto	l5627
  9048                           
  9049                           ;EUSART.c: 322: {
  9050                           ;EUSART.c: 323: EUSART_packet_data[EUSART_ERROR_BYTE_1] = message->buf[0];
  9051  00DE  0140               	movlb	0	; select bank0
  9052  00DF  0837               	movf	CAN_To_EUSART@message,w
  9053  00E0  0086               	movwf	6
  9054  00E1  3002               	movlw	2	; select bank4/5
  9055  00E2  0087               	movwf	7
  9056  00E3  3002               	movlw	2	; select bank4/5
  9057  00E4  3F46               	moviw [6]fsr1
  9058  00E5  0141               	movlb	1	; select bank1
  9059  00E6  00A1               	movwf	(_EUSART_packet_data^(0+128)+1)
  9060                           
  9061                           ;EUSART.c: 324: EUSART_packet_data[EUSART_ERROR_BYTE_2] = message->buf[1];
  9062  00E7  0140               	movlb	0	; select bank0
  9063  00E8  0837               	movf	CAN_To_EUSART@message,w
  9064  00E9  0086               	movwf	6
  9065  00EA  3002               	movlw	2	; select bank4/5
  9066  00EB  0087               	movwf	7
  9067  00EC  3002               	movlw	2	; select bank4/5
  9068  00ED  3F47               	moviw [7]fsr1
  9069  00EE  0141               	movlb	1	; select bank1
  9070  00EF  00A2               	movwf	(_EUSART_packet_data^(0+128)+2)
  9071                           
  9072                           ;EUSART.c: 325: EUSART_packet_data[EUSART_ERROR_BYTE_3] = message->buf[2];
  9073  00F0  0140               	movlb	0	; select bank0
  9074  00F1  0837               	movf	CAN_To_EUSART@message,w
  9075  00F2  0086               	movwf	6
  9076  00F3  3002               	movlw	2	; select bank4/5
  9077  00F4  0087               	movwf	7
  9078  00F5  3002               	movlw	2	; select bank4/5
  9079  00F6  3F48               	moviw [8]fsr1
  9080  00F7  0141               	movlb	1	; select bank1
  9081  00F8  00A3               	movwf	(_EUSART_packet_data^(0+128)+3)
  9082                           
  9083                           ;EUSART.c: 328: EUSART_packet_data[EUSART_MACHINE_STATUS_BYTE] = (((message->buf[3] & 0b
      +                          00000111U) << 3)
  9084                           ;EUSART.c: 329: | (EUSART_packet_data[EUSART_MACHINE_STATUS_BYTE] & 0b00000111U));
  9085  00F9  3007               	movlw	7
  9086  00FA  0524               	andwf	(_EUSART_packet_data^(0+128)+4),w
  9087  00FB  0140               	movlb	0	; select bank0
  9088  00FC  00B1               	movwf	??_CAN_To_EUSART
  9089  00FD  0837               	movf	CAN_To_EUSART@message,w
  9090  00FE  3E09               	addlw	9
  9091  00FF  0086               	movwf	6
  9092  0100  3002               	movlw	2	; select bank4/5
  9093  0101  0087               	movwf	7
  9094  0102  0801               	movf	1,w
  9095  0103  3907               	andlw	7
  9096  0104  00B2               	movwf	??_CAN_To_EUSART+1
  9097  0105  3002               	movlw	2
  9098  0106                     u4535:	
  9099  0106  35B2               	lslf	??_CAN_To_EUSART+1,f
  9100  0107  3EFF               	addlw	-1
  9101  0108  1D03               	skipz
  9102  0109  2906               	goto	u4535
  9103  010A  3532               	lslf	??_CAN_To_EUSART+1,w
  9104  010B  0431               	iorwf	??_CAN_To_EUSART,w
  9105  010C  00B3               	movwf	??_CAN_To_EUSART+2
  9106  010D  0833               	movf	??_CAN_To_EUSART+2,w
  9107  010E  0141               	movlb	1	; select bank1
  9108  010F  00A4               	movwf	(_EUSART_packet_data^(0+128)+4)
  9109                           
  9110                           ;EUSART.c: 332: EUSART_packet_data[EUSART_WARNING_BYTE] = (((message->buf[3] >> 3) | (EU
      +                          SART_packet_data[EUSART_WARNING_BYTE] & 0b01000000U))
  9111                           ;EUSART.c: 333: | ((message->buf[2] & 0b10000000U) >> 2));
  9112  0110  0140               	movlb	0	; select bank0
  9113  0111  0837               	movf	CAN_To_EUSART@message,w
  9114  0112  3E08               	addlw	8
  9115  0113  0086               	movwf	6
  9116  0114  3002               	movlw	2	; select bank4/5
  9117  0115  0087               	movwf	7
  9118  0116  0801               	movf	1,w
  9119  0117  00B1               	movwf	??_CAN_To_EUSART
  9120  0118  3002               	movlw	2
  9121  0119                     u4545:	
  9122  0119  36B1               	lsrf	??_CAN_To_EUSART,f
  9123  011A  0B89               	decfsz	9,f
  9124  011B  2919               	goto	u4545
  9125  011C  3020               	movlw	32
  9126  011D  0531               	andwf	??_CAN_To_EUSART,w
  9127  011E  00B2               	movwf	??_CAN_To_EUSART+1
  9128  011F  3040               	movlw	64
  9129  0120  0141               	movlb	1	; select bank1
  9130  0121  0525               	andwf	(_EUSART_packet_data^(0+128)+5),w
  9131  0122  0140               	movlb	0	; select bank0
  9132  0123  00B3               	movwf	??_CAN_To_EUSART+2
  9133  0124  0837               	movf	CAN_To_EUSART@message,w
  9134  0125  3E09               	addlw	9
  9135  0126  0086               	movwf	6
  9136  0127  3002               	movlw	2	; select bank4/5
  9137  0128  0087               	movwf	7
  9138  0129  0801               	movf	1,w
  9139  012A  00B4               	movwf	??_CAN_To_EUSART+3
  9140  012B  3003               	movlw	3
  9141  012C                     u4555:	
  9142  012C  36B4               	lsrf	??_CAN_To_EUSART+3,f
  9143  012D  0B89               	decfsz	9,f
  9144  012E  292C               	goto	u4555
  9145  012F  0834               	movf	??_CAN_To_EUSART+3,w
  9146  0130  0433               	iorwf	??_CAN_To_EUSART+2,w
  9147  0131  0432               	iorwf	??_CAN_To_EUSART+1,w
  9148  0132  00B5               	movwf	??_CAN_To_EUSART+4
  9149  0133  0835               	movf	??_CAN_To_EUSART+4,w
  9150  0134  0141               	movlb	1	; select bank1
  9151  0135  00A5               	movwf	(_EUSART_packet_data^(0+128)+5)
  9152                           
  9153                           ;EUSART.c: 335: EUSART_packet_data[EUSART_BATTERY_BYTE_1] = (message->buf[4] &0b00011111
      +                          )<<2;
  9154  0136  0140               	movlb	0	; select bank0
  9155  0137  0837               	movf	CAN_To_EUSART@message,w
  9156  0138  3E0A               	addlw	10
  9157  0139  0086               	movwf	6
  9158  013A  3002               	movlw	2	; select bank4/5
  9159  013B  0087               	movwf	7
  9160  013C  0801               	movf	1,w
  9161  013D  391F               	andlw	31
  9162  013E  00B1               	movwf	??_CAN_To_EUSART
  9163  013F  3001               	movlw	1
  9164  0140                     u4565:	
  9165  0140  35B1               	lslf	??_CAN_To_EUSART,f
  9166  0141  3EFF               	addlw	-1
  9167  0142  1D03               	skipz
  9168  0143  2940               	goto	u4565
  9169  0144  3531               	lslf	??_CAN_To_EUSART,w
  9170  0145  00B2               	movwf	??_CAN_To_EUSART+1
  9171  0146  0832               	movf	??_CAN_To_EUSART+1,w
  9172  0147  0141               	movlb	1	; select bank1
  9173  0148  00A6               	movwf	(_EUSART_packet_data^(0+128)+6)
  9174                           
  9175                           ;EUSART.c: 337: person_on_machine_flag = (message->buf[4] &0b00100000);
  9176  0149  0140               	movlb	0	; select bank0
  9177  014A  0837               	movf	CAN_To_EUSART@message,w
  9178  014B  3E0A               	addlw	10
  9179  014C  0086               	movwf	6
  9180  014D  3002               	movlw	2	; select bank4/5
  9181  014E  0087               	movwf	7
  9182  014F  0801               	movf	1,w
  9183  0150  3920               	andlw	32
  9184  0151  00B1               	movwf	??_CAN_To_EUSART
  9185  0152  0831               	movf	??_CAN_To_EUSART,w
  9186  0153  0141               	movlb	1	; select bank1
  9187  0154  00D4               	movwf	_person_on_machine_flag^(0+128)
  9188                           
  9189                           ;EUSART.c: 338: EUSART_packet_data[EUSART_HOUR_METER_BYTE_2] = message->buf[5];
  9190  0155  0140               	movlb	0	; select bank0
  9191  0156  0837               	movf	CAN_To_EUSART@message,w
  9192  0157  0086               	movwf	6
  9193  0158  3002               	movlw	2	; select bank4/5
  9194  0159  0087               	movwf	7
  9195  015A  3002               	movlw	2	; select bank4/5
  9196  015B  3F4B               	moviw [11]fsr1
  9197  015C  0141               	movlb	1	; select bank1
  9198  015D  00A9               	movwf	(_EUSART_packet_data^(0+128)+9)
  9199                           
  9200                           ;EUSART.c: 339: EUSART_packet_data[EUSART_HOUR_METER_BYTE_3] = message->buf[6];
  9201  015E  0140               	movlb	0	; select bank0
  9202  015F  0837               	movf	CAN_To_EUSART@message,w
  9203  0160  0086               	movwf	6
  9204  0161  3002               	movlw	2	; select bank4/5
  9205  0162  0087               	movwf	7
  9206  0163  3002               	movlw	2	; select bank4/5
  9207  0164  3F4C               	moviw [12]fsr1
  9208  0165  0141               	movlb	1	; select bank1
  9209  0166  00AA               	movwf	(_EUSART_packet_data^(0+128)+10)
  9210                           
  9211                           ;EUSART.c: 340: EUSART_packet_data[EUSART_BATTERY_BYTE_2] = message->buf[7];
  9212  0167  0140               	movlb	0	; select bank0
  9213  0168  0837               	movf	CAN_To_EUSART@message,w
  9214  0169  0086               	movwf	6
  9215  016A  3002               	movlw	2	; select bank4/5
  9216  016B  0087               	movwf	7
  9217  016C  3002               	movlw	2	; select bank4/5
  9218  016D  3F4D               	moviw [13]fsr1
  9219  016E  0141               	movlb	1	; select bank1
  9220  016F  00A7               	movwf	(_EUSART_packet_data^(0+128)+7)
  9221  0170                     l5627:	
  9222                           
  9223                           ;EUSART.c: 341: }
  9224                           ;EUSART.c: 342: EUSART_packet_data[EUSART_ADDRESS_BYTE] = 0x55;
  9225  0170  3055               	movlw	85
  9226  0171  0140               	movlb	0	; select bank0
  9227  0172  00B1               	movwf	??_CAN_To_EUSART
  9228  0173  0831               	movf	??_CAN_To_EUSART,w
  9229  0174  0141               	movlb	1	; select bank1
  9230  0175  00A0               	movwf	_EUSART_packet_data^(0+128)
  9231                           
  9232                           ;EUSART.c: 343: break;
  9233  0176  0008               	return
  9234  0177                     l5629:	
  9235                           ;EUSART.c: 344: case 0x8002U:
  9236                           
  9237                           
  9238                           ;EUSART.c: 345: machine_directionA = message->buf[0] &0b00011000;
  9239  0177  0140               	movlb	0	; select bank0
  9240  0178  0837               	movf	CAN_To_EUSART@message,w
  9241  0179  3E06               	addlw	6
  9242  017A  0086               	movwf	6
  9243  017B  3002               	movlw	2	; select bank4/5
  9244  017C  0087               	movwf	7
  9245  017D  0801               	movf	1,w
  9246  017E  3918               	andlw	24
  9247  017F  00B1               	movwf	??_CAN_To_EUSART
  9248  0180  0831               	movf	??_CAN_To_EUSART,w
  9249  0181  00B6               	movwf	CAN_To_EUSART@machine_directionA
  9250                           
  9251                           ;EUSART.c: 346: if(machine_directionA == 0b00001000 ){
  9252  0182  3008               	movlw	8
  9253  0183  0636               	xorwf	CAN_To_EUSART@machine_directionA,w
  9254  0184  1D03               	btfss	3,2
  9255  0185  298C               	goto	l5637
  9256                           
  9257                           ;EUSART.c: 347: LED_column_array[1] &= ~0x02;
  9258  0186  30FD               	movlw	253
  9259  0187  00B1               	movwf	??_CAN_To_EUSART
  9260  0188  0831               	movf	??_CAN_To_EUSART,w
  9261  0189  05CF               	andwf	_LED_column_array+1,f
  9262                           
  9263                           ;EUSART.c: 348: LED_column_array[1] |= 0x04;
  9264  018A  154F               	bsf	_LED_column_array+1,2
  9265                           
  9266                           ;EUSART.c: 349: } else if(machine_directionA == 0b00010000 ){
  9267  018B  0008               	return
  9268  018C                     l5637:	
  9269  018C  3010               	movlw	16
  9270  018D  0636               	xorwf	CAN_To_EUSART@machine_directionA,w
  9271  018E  1D03               	btfss	3,2
  9272  018F  2996               	goto	l5643
  9273                           
  9274                           ;EUSART.c: 350: LED_column_array[1] &= ~0x04;
  9275  0190  30FB               	movlw	251
  9276  0191  00B1               	movwf	??_CAN_To_EUSART
  9277  0192  0831               	movf	??_CAN_To_EUSART,w
  9278  0193  05CF               	andwf	_LED_column_array+1,f
  9279                           
  9280                           ;EUSART.c: 351: LED_column_array[1] |= 0x02;
  9281  0194  14CF               	bsf	_LED_column_array+1,1
  9282                           
  9283                           ;EUSART.c: 352: } else {
  9284  0195  0008               	return
  9285  0196                     l5643:	
  9286                           
  9287                           ;EUSART.c: 353: LED_column_array[1] &= ~0x02;
  9288  0196  30FD               	movlw	253
  9289  0197  00B1               	movwf	??_CAN_To_EUSART
  9290  0198  0831               	movf	??_CAN_To_EUSART,w
  9291  0199  05CF               	andwf	_LED_column_array+1,f
  9292                           
  9293                           ;EUSART.c: 354: LED_column_array[1] &= ~0x04;
  9294  019A  30FB               	movlw	251
  9295  019B  00B1               	movwf	??_CAN_To_EUSART
  9296  019C  0831               	movf	??_CAN_To_EUSART,w
  9297  019D  05CF               	andwf	_LED_column_array+1,f
  9298                           
  9299                           ;EUSART.c: 355: if(!person_on_machine_flag)
  9300  019E  0141               	movlb	1	; select bank1
  9301  019F  0854               	movf	_person_on_machine_flag^(0+128),w
  9302  01A0  1D03               	btfss	3,2
  9303  01A1  0008               	return
  9304                           
  9305                           ;EUSART.c: 356: {
  9306                           ;EUSART.c: 357: EUSART_packet_data[EUSART_MACHINE_STATUS_BYTE] &= 0b11111000 & EUSART_mo
      +                          de_status_on; EUSART_packet_data[EUSART_MACHINE_STATUS_BYTE] |= EUSART_mode_status_on;
  9307  01A2  01A4               	clrf	(_EUSART_packet_data^(0+128)+4)
  9308  01A3  1424               	bsf	(_EUSART_packet_data^(0+128)+4),0
  9309                           
  9310                           ;EUSART.c: 358: LED_column_array[0] &= ~0x02;
  9311  01A4  30FD               	movlw	253
  9312  01A5  0140               	movlb	0	; select bank0
  9313  01A6  00B1               	movwf	??_CAN_To_EUSART
  9314  01A7  0831               	movf	??_CAN_To_EUSART,w
  9315  01A8  05CE               	andwf	_LED_column_array,f
  9316                           
  9317                           ;EUSART.c: 359: LED_column_array[4] &= ~0x10;
  9318  01A9  30EF               	movlw	239
  9319  01AA  00B1               	movwf	??_CAN_To_EUSART
  9320  01AB  0831               	movf	??_CAN_To_EUSART,w
  9321  01AC  05D2               	andwf	_LED_column_array+4,f
  9322                           
  9323                           ;EUSART.c: 360: LED_column_array[0] &= ~0x04;
  9324  01AD  30FB               	movlw	251
  9325  01AE  00B1               	movwf	??_CAN_To_EUSART
  9326  01AF  0831               	movf	??_CAN_To_EUSART,w
  9327  01B0  05CE               	andwf	_LED_column_array,f
  9328                           
  9329                           ;EUSART.c: 361: LED_column_array[1] &= ~0x01;
  9330  01B1  30FE               	movlw	254
  9331  01B2  00B1               	movwf	??_CAN_To_EUSART
  9332  01B3  0831               	movf	??_CAN_To_EUSART,w
  9333  01B4  05CF               	andwf	_LED_column_array+1,f
  9334                           
  9335                           ;EUSART.c: 362: LED_column_array[0] &= ~0x01;
  9336  01B5  30FE               	movlw	254
  9337  01B6  00B1               	movwf	??_CAN_To_EUSART
  9338  01B7  0831               	movf	??_CAN_To_EUSART,w
  9339  01B8  05CE               	andwf	_LED_column_array,f
  9340                           
  9341                           ;EUSART.c: 363: }
  9342                           ;EUSART.c: 364: }
  9343                           ;EUSART.c: 365: break;
  9344  01B9  0008               	return
  9345  01BA                     l5659:	
  9346                           ;EUSART.c: 366: case 0x82UL:
  9347                           
  9348                           
  9349                           ;EUSART.c: 367: EUSART_packet_data[EUSART_DRIVE_CURRENT_BYTE_1] = message->buf[0];
  9350  01BA  0837               	movf	CAN_To_EUSART@message,w
  9351  01BB  0086               	movwf	6
  9352  01BC  3002               	movlw	2	; select bank4/5
  9353  01BD  0087               	movwf	7
  9354  01BE  3002               	movlw	2	; select bank4/5
  9355  01BF  3F46               	moviw [6]fsr1
  9356  01C0  0141               	movlb	1	; select bank1
  9357  01C1  00B0               	movwf	(_EUSART_packet_data^(0+128)+16)
  9358                           
  9359                           ;EUSART.c: 368: EUSART_packet_data[EUSART_DRIVE_CURRENT_BYTE_2] = message->buf[1];
  9360  01C2  0140               	movlb	0	; select bank0
  9361  01C3  0837               	movf	CAN_To_EUSART@message,w
  9362  01C4  0086               	movwf	6
  9363  01C5  3002               	movlw	2	; select bank4/5
  9364  01C6  0087               	movwf	7
  9365  01C7  3002               	movlw	2	; select bank4/5
  9366  01C8  3F47               	moviw [7]fsr1
  9367  01C9  0141               	movlb	1	; select bank1
  9368  01CA  00B1               	movwf	(_EUSART_packet_data^(0+128)+17)
  9369                           
  9370                           ;EUSART.c: 369: EUSART_packet_data[EUSART_DRIVE_TEMPERATURE_BYTE_1] = message->buf[2];
  9371  01CB  0140               	movlb	0	; select bank0
  9372  01CC  0837               	movf	CAN_To_EUSART@message,w
  9373  01CD  0086               	movwf	6
  9374  01CE  3002               	movlw	2	; select bank4/5
  9375  01CF  0087               	movwf	7
  9376  01D0  3002               	movlw	2	; select bank4/5
  9377  01D1  3F48               	moviw [8]fsr1
  9378  01D2  0141               	movlb	1	; select bank1
  9379  01D3  00B8               	movwf	(_EUSART_packet_data^(0+128)+24)
  9380                           
  9381                           ;EUSART.c: 370: EUSART_packet_data[EUSART_DRIVE_TEMPERATURE_BYTE_2] = message->buf[3];
  9382  01D4  0140               	movlb	0	; select bank0
  9383  01D5  0837               	movf	CAN_To_EUSART@message,w
  9384  01D6  0086               	movwf	6
  9385  01D7  3002               	movlw	2	; select bank4/5
  9386  01D8  0087               	movwf	7
  9387  01D9  3002               	movlw	2	; select bank4/5
  9388  01DA  3F49               	moviw [9]fsr1
  9389  01DB  0141               	movlb	1	; select bank1
  9390  01DC  00B9               	movwf	(_EUSART_packet_data^(0+128)+25)
  9391                           
  9392                           ;EUSART.c: 371: break;
  9393  01DD  0008               	return
  9394  01DE                     l5661:	
  9395                           ;EUSART.c: 372: case 0x83UL:
  9396                           
  9397                           
  9398                           ;EUSART.c: 373: EUSART_packet_data[EUSART_BRUSH_CURRENT_BYTE_1] = message->buf[0];
  9399  01DE  0140               	movlb	0	; select bank0
  9400  01DF  0837               	movf	CAN_To_EUSART@message,w
  9401  01E0  0086               	movwf	6
  9402  01E1  3002               	movlw	2	; select bank4/5
  9403  01E2  0087               	movwf	7
  9404  01E3  3002               	movlw	2	; select bank4/5
  9405  01E4  3F46               	moviw [6]fsr1
  9406  01E5  0141               	movlb	1	; select bank1
  9407  01E6  00AC               	movwf	(_EUSART_packet_data^(0+128)+12)
  9408                           
  9409                           ;EUSART.c: 374: EUSART_packet_data[EUSART_BRUSH_CURRENT_BYTE_2] = message->buf[1];
  9410  01E7  0140               	movlb	0	; select bank0
  9411  01E8  0837               	movf	CAN_To_EUSART@message,w
  9412  01E9  0086               	movwf	6
  9413  01EA  3002               	movlw	2	; select bank4/5
  9414  01EB  0087               	movwf	7
  9415  01EC  3002               	movlw	2	; select bank4/5
  9416  01ED  3F47               	moviw [7]fsr1
  9417  01EE  0141               	movlb	1	; select bank1
  9418  01EF  00AD               	movwf	(_EUSART_packet_data^(0+128)+13)
  9419                           
  9420                           ;EUSART.c: 375: EUSART_packet_data[EUSART_BRUSH_TEMPERATURE_BYTE_1] = message->buf[2];
  9421  01F0  0140               	movlb	0	; select bank0
  9422  01F1  0837               	movf	CAN_To_EUSART@message,w
  9423  01F2  0086               	movwf	6
  9424  01F3  3002               	movlw	2	; select bank4/5
  9425  01F4  0087               	movwf	7
  9426  01F5  3002               	movlw	2	; select bank4/5
  9427  01F6  3F48               	moviw [8]fsr1
  9428  01F7  0141               	movlb	1	; select bank1
  9429  01F8  00B4               	movwf	(_EUSART_packet_data^(0+128)+20)
  9430                           
  9431                           ;EUSART.c: 376: EUSART_packet_data[EUSART_BRUSH_TEMPERATURE_BYTE_2] = message->buf[3];
  9432  01F9  0140               	movlb	0	; select bank0
  9433  01FA  0837               	movf	CAN_To_EUSART@message,w
  9434  01FB  0086               	movwf	6
  9435  01FC  3002               	movlw	2	; select bank4/5
  9436  01FD  0087               	movwf	7
  9437  01FE  3002               	movlw	2	; select bank4/5
  9438  01FF  3F49               	moviw [9]fsr1
  9439  0200  0141               	movlb	1	; select bank1
  9440  0201  00B5               	movwf	(_EUSART_packet_data^(0+128)+21)
  9441                           
  9442                           ;EUSART.c: 377: break;
  9443  0202  0008               	return
  9444  0203                     l5663:	
  9445                           ;EUSART.c: 378: case 0x84UL:
  9446                           
  9447                           
  9448                           ;EUSART.c: 379: EUSART_packet_data[EUSART_VACUUM_CURRENT_BYTE_1] = message->buf[0];
  9449  0203  0140               	movlb	0	; select bank0
  9450  0204  0837               	movf	CAN_To_EUSART@message,w
  9451  0205  0086               	movwf	6
  9452  0206  3002               	movlw	2	; select bank4/5
  9453  0207  0087               	movwf	7
  9454  0208  3002               	movlw	2	; select bank4/5
  9455  0209  3F46               	moviw [6]fsr1
  9456  020A  0141               	movlb	1	; select bank1
  9457  020B  00B2               	movwf	(_EUSART_packet_data^(0+128)+18)
  9458                           
  9459                           ;EUSART.c: 380: EUSART_packet_data[EUSART_VACUUM_CURRENT_BYTE_2] = message->buf[1];
  9460  020C  0140               	movlb	0	; select bank0
  9461  020D  0837               	movf	CAN_To_EUSART@message,w
  9462  020E  0086               	movwf	6
  9463  020F  3002               	movlw	2	; select bank4/5
  9464  0210  0087               	movwf	7
  9465  0211  3002               	movlw	2	; select bank4/5
  9466  0212  3F47               	moviw [7]fsr1
  9467  0213  0141               	movlb	1	; select bank1
  9468  0214  00B3               	movwf	(_EUSART_packet_data^(0+128)+19)
  9469                           
  9470                           ;EUSART.c: 381: break;
  9471  0215  0008               	return
  9472  0216                     l5665:	
  9473                           ;EUSART.c: 382: case 0x85UL:
  9474                           
  9475                           
  9476                           ;EUSART.c: 383: EUSART_packet_data[EUSART_SIDE_BROOM_CURRENT_BYTE_1] = message->buf[0];
  9477  0216  0140               	movlb	0	; select bank0
  9478  0217  0837               	movf	CAN_To_EUSART@message,w
  9479  0218  0086               	movwf	6
  9480  0219  3002               	movlw	2	; select bank4/5
  9481  021A  0087               	movwf	7
  9482  021B  3002               	movlw	2	; select bank4/5
  9483  021C  3F46               	moviw [6]fsr1
  9484  021D  0141               	movlb	1	; select bank1
  9485  021E  00AE               	movwf	(_EUSART_packet_data^(0+128)+14)
  9486                           
  9487                           ;EUSART.c: 384: EUSART_packet_data[EUSART_SIDE_BROOM_CURRENT_BYTE_2] = message->buf[1];
  9488  021F  0140               	movlb	0	; select bank0
  9489  0220  0837               	movf	CAN_To_EUSART@message,w
  9490  0221  0086               	movwf	6
  9491  0222  3002               	movlw	2	; select bank4/5
  9492  0223  0087               	movwf	7
  9493  0224  3002               	movlw	2	; select bank4/5
  9494  0225  3F47               	moviw [7]fsr1
  9495  0226  0141               	movlb	1	; select bank1
  9496  0227  00AF               	movwf	(_EUSART_packet_data^(0+128)+15)
  9497                           
  9498                           ;EUSART.c: 385: EUSART_packet_data[EUSART_SIDE_BROOM_TEMPERATURE_BYTE_1] = message->buf[
      +                          2];
  9499  0228  0140               	movlb	0	; select bank0
  9500  0229  0837               	movf	CAN_To_EUSART@message,w
  9501  022A  0086               	movwf	6
  9502  022B  3002               	movlw	2	; select bank4/5
  9503  022C  0087               	movwf	7
  9504  022D  3002               	movlw	2	; select bank4/5
  9505  022E  3F48               	moviw [8]fsr1
  9506  022F  0141               	movlb	1	; select bank1
  9507  0230  00B6               	movwf	(_EUSART_packet_data^(0+128)+22)
  9508                           
  9509                           ;EUSART.c: 386: EUSART_packet_data[EUSART_SIDE_BROOM_TEMPERATURE_BYTE_2] = message->buf[
      +                          3];
  9510  0231  0140               	movlb	0	; select bank0
  9511  0232  0837               	movf	CAN_To_EUSART@message,w
  9512  0233  0086               	movwf	6
  9513  0234  3002               	movlw	2	; select bank4/5
  9514  0235  0087               	movwf	7
  9515  0236  3002               	movlw	2	; select bank4/5
  9516  0237  3F49               	moviw [9]fsr1
  9517  0238  0141               	movlb	1	; select bank1
  9518  0239  00B7               	movwf	(_EUSART_packet_data^(0+128)+23)
  9519                           
  9520                           ;EUSART.c: 387: break;
  9521  023A  0008               	return
  9522  023B                     l5667:	
  9523                           ;EUSART.c: 388: case 0x00UL:
  9524                           
  9525                           
  9526                           ;EUSART.c: 389: EUSART_packet_data[EUSART_BATTERY_BYTE_1] = message->buf[0];
  9527  023B  0140               	movlb	0	; select bank0
  9528  023C  0837               	movf	CAN_To_EUSART@message,w
  9529  023D  0086               	movwf	6
  9530  023E  3002               	movlw	2	; select bank4/5
  9531  023F  0087               	movwf	7
  9532  0240  3002               	movlw	2	; select bank4/5
  9533  0241  3F46               	moviw [6]fsr1
  9534  0242  0141               	movlb	1	; select bank1
  9535  0243  00A6               	movwf	(_EUSART_packet_data^(0+128)+6)
  9536                           
  9537                           ;EUSART.c: 390: break;
  9538  0244  0008               	return
  9539  0245                     l5669:	
  9540                           ;EUSART.c: 391: case 0x90UL:
  9541                           
  9542                           
  9543                           ;EUSART.c: 392: EUSART_packet_data[EUSART_ADDRESS_BYTE] = 0x63;
  9544  0245  3063               	movlw	99
  9545  0246  0140               	movlb	0	; select bank0
  9546  0247  00B1               	movwf	??_CAN_To_EUSART
  9547  0248  0831               	movf	??_CAN_To_EUSART,w
  9548  0249  0141               	movlb	1	; select bank1
  9549  024A  00A0               	movwf	_EUSART_packet_data^(0+128)
  9550                           
  9551                           ;EUSART.c: 393: EUSART_packet_data[1] = (((message->buf[0] & 0b00100000U)>> 5) | ((messa
      +                          ge->buf[0] & 0b01000000U)>> 4));
  9552  024B  0140               	movlb	0	; select bank0
  9553  024C  0837               	movf	CAN_To_EUSART@message,w
  9554  024D  3E06               	addlw	6
  9555  024E  0086               	movwf	6
  9556  024F  3002               	movlw	2	; select bank4/5
  9557  0250  0087               	movwf	7
  9558  0251  0801               	movf	1,w
  9559  0252  00B1               	movwf	??_CAN_To_EUSART
  9560  0253  3004               	movlw	4
  9561  0254                     u4605:	
  9562  0254  36B1               	lsrf	??_CAN_To_EUSART,f
  9563  0255  0B89               	decfsz	9,f
  9564  0256  2A54               	goto	u4605
  9565  0257  3004               	movlw	4
  9566  0258  0531               	andwf	??_CAN_To_EUSART,w
  9567  0259  00B2               	movwf	??_CAN_To_EUSART+1
  9568  025A  0837               	movf	CAN_To_EUSART@message,w
  9569  025B  3E06               	addlw	6
  9570  025C  0086               	movwf	6
  9571  025D  3002               	movlw	2	; select bank4/5
  9572  025E  0087               	movwf	7
  9573  025F  0801               	movf	1,w
  9574  0260  00B3               	movwf	??_CAN_To_EUSART+2
  9575  0261  3005               	movlw	5
  9576  0262                     u4615:	
  9577  0262  36B3               	lsrf	??_CAN_To_EUSART+2,f
  9578  0263  0B89               	decfsz	9,f
  9579  0264  2A62               	goto	u4615
  9580  0265  0833               	movf	??_CAN_To_EUSART+2,w
  9581  0266  3901               	andlw	1
  9582  0267  0432               	iorwf	??_CAN_To_EUSART+1,w
  9583  0268  00B4               	movwf	??_CAN_To_EUSART+3
  9584  0269  0834               	movf	??_CAN_To_EUSART+3,w
  9585  026A  0141               	movlb	1	; select bank1
  9586  026B  00A1               	movwf	(_EUSART_packet_data^(0+128)+1)
  9587                           
  9588                           ;EUSART.c: 394: EUSART_packet_data[2] = message->buf[2];
  9589  026C  0140               	movlb	0	; select bank0
  9590  026D  0837               	movf	CAN_To_EUSART@message,w
  9591  026E  0086               	movwf	6
  9592  026F  3002               	movlw	2	; select bank4/5
  9593  0270  0087               	movwf	7
  9594  0271  3002               	movlw	2	; select bank4/5
  9595  0272  3F48               	moviw [8]fsr1
  9596  0273  0141               	movlb	1	; select bank1
  9597  0274  00A2               	movwf	(_EUSART_packet_data^(0+128)+2)
  9598                           
  9599                           ;EUSART.c: 395: EUSART_packet_data[3] = message->buf[3];
  9600  0275  0140               	movlb	0	; select bank0
  9601  0276  0837               	movf	CAN_To_EUSART@message,w
  9602  0277  0086               	movwf	6
  9603  0278  3002               	movlw	2	; select bank4/5
  9604  0279  0087               	movwf	7
  9605  027A  3002               	movlw	2	; select bank4/5
  9606  027B  3F49               	moviw [9]fsr1
  9607  027C  0141               	movlb	1	; select bank1
  9608  027D  00A3               	movwf	(_EUSART_packet_data^(0+128)+3)
  9609                           
  9610                           ;EUSART.c: 396: EUSART_packet_data[4] = message->buf[4];
  9611  027E  0140               	movlb	0	; select bank0
  9612  027F  0837               	movf	CAN_To_EUSART@message,w
  9613  0280  0086               	movwf	6
  9614  0281  3002               	movlw	2	; select bank4/5
  9615  0282  0087               	movwf	7
  9616  0283  3002               	movlw	2	; select bank4/5
  9617  0284  3F4A               	moviw [10]fsr1
  9618  0285  0141               	movlb	1	; select bank1
  9619  0286  00A4               	movwf	(_EUSART_packet_data^(0+128)+4)
  9620                           
  9621                           ;EUSART.c: 397: EUSART_packet_data[5] = message->buf[5];
  9622  0287  0140               	movlb	0	; select bank0
  9623  0288  0837               	movf	CAN_To_EUSART@message,w
  9624  0289  0086               	movwf	6
  9625  028A  3002               	movlw	2	; select bank4/5
  9626  028B  0087               	movwf	7
  9627  028C  3002               	movlw	2	; select bank4/5
  9628  028D  3F4B               	moviw [11]fsr1
  9629  028E  0141               	movlb	1	; select bank1
  9630  028F  00A5               	movwf	(_EUSART_packet_data^(0+128)+5)
  9631                           
  9632                           ;EUSART.c: 398: EUSART_packet_data[6] = message->buf[6];
  9633  0290  0140               	movlb	0	; select bank0
  9634  0291  0837               	movf	CAN_To_EUSART@message,w
  9635  0292  0086               	movwf	6
  9636  0293  3002               	movlw	2	; select bank4/5
  9637  0294  0087               	movwf	7
  9638  0295  3002               	movlw	2	; select bank4/5
  9639  0296  3F4C               	moviw [12]fsr1
  9640  0297  0141               	movlb	1	; select bank1
  9641  0298  00A6               	movwf	(_EUSART_packet_data^(0+128)+6)
  9642                           
  9643                           ;EUSART.c: 399: EUSART_packet_data[7] = message->buf[7];
  9644  0299  0140               	movlb	0	; select bank0
  9645  029A  0837               	movf	CAN_To_EUSART@message,w
  9646  029B  0086               	movwf	6
  9647  029C  3002               	movlw	2	; select bank4/5
  9648  029D  0087               	movwf	7
  9649  029E  3002               	movlw	2	; select bank4/5
  9650  029F  3F4D               	moviw [13]fsr1
  9651  02A0  0141               	movlb	1	; select bank1
  9652  02A1  00A7               	movwf	(_EUSART_packet_data^(0+128)+7)
  9653                           
  9654                           ;EUSART.c: 400: EUSART_packet_data[8] = message->buf[1];
  9655  02A2  0140               	movlb	0	; select bank0
  9656  02A3  0837               	movf	CAN_To_EUSART@message,w
  9657  02A4  0086               	movwf	6
  9658  02A5  3002               	movlw	2	; select bank4/5
  9659  02A6  0087               	movwf	7
  9660  02A7  3002               	movlw	2	; select bank4/5
  9661  02A8  3F47               	moviw [7]fsr1
  9662  02A9  0141               	movlb	1	; select bank1
  9663  02AA  00A8               	movwf	(_EUSART_packet_data^(0+128)+8)
  9664                           
  9665                           ;EUSART.c: 401: EUSART_packet_data[9] = (message->buf[0] & 0b00011111U);
  9666  02AB  0140               	movlb	0	; select bank0
  9667  02AC  0837               	movf	CAN_To_EUSART@message,w
  9668  02AD  3E06               	addlw	6
  9669  02AE  0086               	movwf	6
  9670  02AF  3002               	movlw	2	; select bank4/5
  9671  02B0  0087               	movwf	7
  9672  02B1  0801               	movf	1,w
  9673  02B2  391F               	andlw	31
  9674  02B3  00B1               	movwf	??_CAN_To_EUSART
  9675  02B4  0831               	movf	??_CAN_To_EUSART,w
  9676  02B5  0141               	movlb	1	; select bank1
  9677  02B6  00A9               	movwf	(_EUSART_packet_data^(0+128)+9)
  9678                           
  9679                           ;EUSART.c: 402: break;
  9680  02B7  0008               	return
  9681  02B8                     l1011:	
  9682                           ;EUSART.c: 403: case 0x86UL:
  9683                           
  9684                           
  9685                           ;EUSART.c: 404: EUSART_packet_data[EUSART_WARNING_BYTE] |= 0b00100000;
  9686  02B8  0141               	movlb	1	; select bank1
  9687  02B9  16A5               	bsf	(_EUSART_packet_data^(0+128)+5),5
  9688                           
  9689                           ;EUSART.c: 405: break;
  9690  02BA  0008               	return
  9691  02BB                     l5689:	
  9692                           ;EUSART.c: 406: case 0x96UL:
  9693                           
  9694                           
  9695                           ;EUSART.c: 407: if(EUSART_packet_data[EUSART_ADDRESS_BYTE] == 0x63)
  9696  02BB  3063               	movlw	99
  9697  02BC  0141               	movlb	1	; select bank1
  9698  02BD  0620               	xorwf	_EUSART_packet_data^(0+128),w
  9699  02BE  1D03               	btfss	3,2
  9700  02BF  2B0D               	goto	l1013
  9701                           
  9702                           ;EUSART.c: 408: {
  9703                           ;EUSART.c: 409: if(message->buf[7] == 1)
  9704  02C0  0140               	movlb	0	; select bank0
  9705  02C1  0837               	movf	CAN_To_EUSART@message,w
  9706  02C2  3E0D               	addlw	13
  9707  02C3  0086               	movwf	6
  9708  02C4  3002               	movlw	2	; select bank4/5
  9709  02C5  0087               	movwf	7
  9710  02C6  0301               	decf	1,w
  9711  02C7  1D03               	btfss	3,2
  9712  02C8  2B06               	goto	l5699
  9713                           
  9714                           ;EUSART.c: 410: {
  9715                           ;EUSART.c: 411: EUSART_packet_data[2] = message->buf[0];
  9716  02C9  0837               	movf	CAN_To_EUSART@message,w
  9717  02CA  0086               	movwf	6
  9718  02CB  3002               	movlw	2	; select bank4/5
  9719  02CC  0087               	movwf	7
  9720  02CD  3002               	movlw	2	; select bank4/5
  9721  02CE  3F46               	moviw [6]fsr1
  9722  02CF  0141               	movlb	1	; select bank1
  9723  02D0  00A2               	movwf	(_EUSART_packet_data^(0+128)+2)
  9724                           
  9725                           ;EUSART.c: 412: EUSART_packet_data[3] = message->buf[1];
  9726  02D1  0140               	movlb	0	; select bank0
  9727  02D2  0837               	movf	CAN_To_EUSART@message,w
  9728  02D3  0086               	movwf	6
  9729  02D4  3002               	movlw	2	; select bank4/5
  9730  02D5  0087               	movwf	7
  9731  02D6  3002               	movlw	2	; select bank4/5
  9732  02D7  3F47               	moviw [7]fsr1
  9733  02D8  0141               	movlb	1	; select bank1
  9734  02D9  00A3               	movwf	(_EUSART_packet_data^(0+128)+3)
  9735                           
  9736                           ;EUSART.c: 413: EUSART_packet_data[4] = message->buf[2];
  9737  02DA  0140               	movlb	0	; select bank0
  9738  02DB  0837               	movf	CAN_To_EUSART@message,w
  9739  02DC  0086               	movwf	6
  9740  02DD  3002               	movlw	2	; select bank4/5
  9741  02DE  0087               	movwf	7
  9742  02DF  3002               	movlw	2	; select bank4/5
  9743  02E0  3F48               	moviw [8]fsr1
  9744  02E1  0141               	movlb	1	; select bank1
  9745  02E2  00A4               	movwf	(_EUSART_packet_data^(0+128)+4)
  9746                           
  9747                           ;EUSART.c: 414: EUSART_packet_data[5] = message->buf[3];
  9748  02E3  0140               	movlb	0	; select bank0
  9749  02E4  0837               	movf	CAN_To_EUSART@message,w
  9750  02E5  0086               	movwf	6
  9751  02E6  3002               	movlw	2	; select bank4/5
  9752  02E7  0087               	movwf	7
  9753  02E8  3002               	movlw	2	; select bank4/5
  9754  02E9  3F49               	moviw [9]fsr1
  9755  02EA  0141               	movlb	1	; select bank1
  9756  02EB  00A5               	movwf	(_EUSART_packet_data^(0+128)+5)
  9757                           
  9758                           ;EUSART.c: 415: EUSART_packet_data[6] = message->buf[4];
  9759  02EC  0140               	movlb	0	; select bank0
  9760  02ED  0837               	movf	CAN_To_EUSART@message,w
  9761  02EE  0086               	movwf	6
  9762  02EF  3002               	movlw	2	; select bank4/5
  9763  02F0  0087               	movwf	7
  9764  02F1  3002               	movlw	2	; select bank4/5
  9765  02F2  3F4A               	moviw [10]fsr1
  9766  02F3  0141               	movlb	1	; select bank1
  9767  02F4  00A6               	movwf	(_EUSART_packet_data^(0+128)+6)
  9768                           
  9769                           ;EUSART.c: 416: EUSART_packet_data[7] = message->buf[5];
  9770  02F5  0140               	movlb	0	; select bank0
  9771  02F6  0837               	movf	CAN_To_EUSART@message,w
  9772  02F7  0086               	movwf	6
  9773  02F8  3002               	movlw	2	; select bank4/5
  9774  02F9  0087               	movwf	7
  9775  02FA  3002               	movlw	2	; select bank4/5
  9776  02FB  3F4B               	moviw [11]fsr1
  9777  02FC  0141               	movlb	1	; select bank1
  9778  02FD  00A7               	movwf	(_EUSART_packet_data^(0+128)+7)
  9779                           
  9780                           ;EUSART.c: 417: EUSART_packet_data[1] &= 0b11111101;EUSART_packet_data[1] |= 0b00000001;
  9781  02FE  30FD               	movlw	253
  9782  02FF  0140               	movlb	0	; select bank0
  9783  0300  00B1               	movwf	??_CAN_To_EUSART
  9784  0301  0831               	movf	??_CAN_To_EUSART,w
  9785  0302  0141               	movlb	1	; select bank1
  9786  0303  05A1               	andwf	(_EUSART_packet_data^(0+128)+1),f
  9787  0304  1421               	bsf	(_EUSART_packet_data^(0+128)+1),0
  9788                           
  9789                           ;EUSART.c: 418: }
  9790  0305  2B0D               	goto	l1013
  9791  0306                     l5699:	
  9792                           
  9793                           ;EUSART.c: 419: else
  9794                           ;EUSART.c: 420: {
  9795                           ;EUSART.c: 421: EUSART_packet_data[1] &= 0b11111110;EUSART_packet_data[1] |= 0b00000010;
  9796  0306  30FE               	movlw	254
  9797  0307  0140               	movlb	0	; select bank0
  9798  0308  00B1               	movwf	??_CAN_To_EUSART
  9799  0309  0831               	movf	??_CAN_To_EUSART,w
  9800  030A  0141               	movlb	1	; select bank1
  9801  030B  05A1               	andwf	(_EUSART_packet_data^(0+128)+1),f
  9802  030C  14A1               	bsf	(_EUSART_packet_data^(0+128)+1),1
  9803  030D                     l1013:	
  9804                           
  9805                           ;EUSART.c: 422: }
  9806                           ;EUSART.c: 423: }
  9807                           ;EUSART.c: 424: EUSART_packet_data[8] &= 0b11111110;
  9808  030D  30FE               	movlw	254
  9809  030E  0140               	movlb	0	; select bank0
  9810  030F  00B1               	movwf	??_CAN_To_EUSART
  9811  0310  0831               	movf	??_CAN_To_EUSART,w
  9812  0311  0141               	movlb	1	; select bank1
  9813  0312  05A8               	andwf	(_EUSART_packet_data^(0+128)+8),f
  9814                           
  9815                           ;EUSART.c: 425: EUSART_packet_data[8] &= 0b11111101;
  9816  0313  30FD               	movlw	253
  9817  0314  0140               	movlb	0	; select bank0
  9818  0315  00B1               	movwf	??_CAN_To_EUSART
  9819  0316  0831               	movf	??_CAN_To_EUSART,w
  9820  0317  0141               	movlb	1	; select bank1
  9821  0318  05A8               	andwf	(_EUSART_packet_data^(0+128)+8),f
  9822                           
  9823                           ;EUSART.c: 426: EUSART_packet_data[EUSART_ADDRESS_BYTE] = 0x63;
  9824  0319  3063               	movlw	99
  9825  031A  0140               	movlb	0	; select bank0
  9826  031B  00B1               	movwf	??_CAN_To_EUSART
  9827  031C  0831               	movf	??_CAN_To_EUSART,w
  9828  031D  0141               	movlb	1	; select bank1
  9829  031E  00A0               	movwf	_EUSART_packet_data^(0+128)
  9830                           
  9831                           ;EUSART.c: 427: break;
  9832  031F  0008               	return
  9833  0320                     l5705:	
  9834                           ;EUSART.c: 428: case 0xA6UL:
  9835                           
  9836                           
  9837                           ;EUSART.c: 429: EUSART_packet_data[EUSART_ADDRESS_BYTE] = 0xF0;
  9838  0320  30F0               	movlw	240
  9839  0321  0140               	movlb	0	; select bank0
  9840  0322  00B1               	movwf	??_CAN_To_EUSART
  9841  0323  0831               	movf	??_CAN_To_EUSART,w
  9842  0324  0141               	movlb	1	; select bank1
  9843  0325  00A0               	movwf	_EUSART_packet_data^(0+128)
  9844                           
  9845                           ;EUSART.c: 430: if(message->buf[7] & 0x01)
  9846  0326  0140               	movlb	0	; select bank0
  9847  0327  0837               	movf	CAN_To_EUSART@message,w
  9848  0328  3E0D               	addlw	13
  9849  0329  0086               	movwf	6
  9850  032A  3002               	movlw	2	; select bank4/5
  9851  032B  0087               	movwf	7
  9852  032C  1C01               	btfss	1,0
  9853  032D  0008               	return
  9854                           
  9855                           ;EUSART.c: 431: {
  9856                           ;EUSART.c: 432: EUSART_packet_data[2] = message->buf[1];
  9857  032E  0837               	movf	CAN_To_EUSART@message,w
  9858  032F  0086               	movwf	6
  9859  0330  3002               	movlw	2	; select bank4/5
  9860  0331  0087               	movwf	7
  9861  0332  3002               	movlw	2	; select bank4/5
  9862  0333  3F47               	moviw [7]fsr1
  9863  0334  0141               	movlb	1	; select bank1
  9864  0335  00A2               	movwf	(_EUSART_packet_data^(0+128)+2)
  9865                           
  9866                           ;EUSART.c: 433: EUSART_packet_data[3] = message->buf[2];
  9867  0336  0140               	movlb	0	; select bank0
  9868  0337  0837               	movf	CAN_To_EUSART@message,w
  9869  0338  0086               	movwf	6
  9870  0339  3002               	movlw	2	; select bank4/5
  9871  033A  0087               	movwf	7
  9872  033B  3002               	movlw	2	; select bank4/5
  9873  033C  3F48               	moviw [8]fsr1
  9874  033D  0141               	movlb	1	; select bank1
  9875  033E  00A3               	movwf	(_EUSART_packet_data^(0+128)+3)
  9876                           
  9877                           ;EUSART.c: 434: EUSART_packet_data[4] = message->buf[3];
  9878  033F  0140               	movlb	0	; select bank0
  9879  0340  0837               	movf	CAN_To_EUSART@message,w
  9880  0341  0086               	movwf	6
  9881  0342  3002               	movlw	2	; select bank4/5
  9882  0343  0087               	movwf	7
  9883  0344  3002               	movlw	2	; select bank4/5
  9884  0345  3F49               	moviw [9]fsr1
  9885  0346  0141               	movlb	1	; select bank1
  9886  0347  00A4               	movwf	(_EUSART_packet_data^(0+128)+4)
  9887                           
  9888                           ;EUSART.c: 435: EUSART_packet_data[5] = message->buf[4];
  9889  0348  0140               	movlb	0	; select bank0
  9890  0349  0837               	movf	CAN_To_EUSART@message,w
  9891  034A  0086               	movwf	6
  9892  034B  3002               	movlw	2	; select bank4/5
  9893  034C  0087               	movwf	7
  9894  034D  3002               	movlw	2	; select bank4/5
  9895  034E  3F4A               	moviw [10]fsr1
  9896  034F  0141               	movlb	1	; select bank1
  9897  0350  00A5               	movwf	(_EUSART_packet_data^(0+128)+5)
  9898                           
  9899                           ;EUSART.c: 436: }
  9900                           ;EUSART.c: 437: break;
  9901  0351  0008               	return
  9902  0352                     l5711:	
  9903                           ;EUSART.c: 438: case 0xB6UL:
  9904                           
  9905                           
  9906                           ;EUSART.c: 439: if(EUSART_packet_data[EUSART_ADDRESS_BYTE] == 0x63)
  9907  0352  3063               	movlw	99
  9908  0353  0141               	movlb	1	; select bank1
  9909  0354  0620               	xorwf	_EUSART_packet_data^(0+128),w
  9910  0355  1D03               	btfss	3,2
  9911  0356  2B9C               	goto	l1019
  9912                           
  9913                           ;EUSART.c: 440: {
  9914                           ;EUSART.c: 441: if(message->buf[4] & 0b00000001)
  9915  0357  0140               	movlb	0	; select bank0
  9916  0358  0837               	movf	CAN_To_EUSART@message,w
  9917  0359  3E0A               	addlw	10
  9918  035A  0086               	movwf	6
  9919  035B  3002               	movlw	2	; select bank4/5
  9920  035C  0087               	movwf	7
  9921  035D  1C01               	btfss	1,0
  9922  035E  2B81               	goto	l5721
  9923                           
  9924                           ;EUSART.c: 442: {
  9925                           ;EUSART.c: 443: EUSART_packet_data[11] = message->buf[5];
  9926  035F  0837               	movf	CAN_To_EUSART@message,w
  9927  0360  0086               	movwf	6
  9928  0361  3002               	movlw	2	; select bank4/5
  9929  0362  0087               	movwf	7
  9930  0363  3002               	movlw	2	; select bank4/5
  9931  0364  3F4B               	moviw [11]fsr1
  9932  0365  0141               	movlb	1	; select bank1
  9933  0366  00AB               	movwf	(_EUSART_packet_data^(0+128)+11)
  9934                           
  9935                           ;EUSART.c: 444: EUSART_packet_data[12] = message->buf[6];
  9936  0367  0140               	movlb	0	; select bank0
  9937  0368  0837               	movf	CAN_To_EUSART@message,w
  9938  0369  0086               	movwf	6
  9939  036A  3002               	movlw	2	; select bank4/5
  9940  036B  0087               	movwf	7
  9941  036C  3002               	movlw	2	; select bank4/5
  9942  036D  3F4C               	moviw [12]fsr1
  9943  036E  0141               	movlb	1	; select bank1
  9944  036F  00AC               	movwf	(_EUSART_packet_data^(0+128)+12)
  9945                           
  9946                           ;EUSART.c: 445: EUSART_packet_data[13] = message->buf[7];
  9947  0370  0140               	movlb	0	; select bank0
  9948  0371  0837               	movf	CAN_To_EUSART@message,w
  9949  0372  0086               	movwf	6
  9950  0373  3002               	movlw	2	; select bank4/5
  9951  0374  0087               	movwf	7
  9952  0375  3002               	movlw	2	; select bank4/5
  9953  0376  3F4D               	moviw [13]fsr1
  9954  0377  0141               	movlb	1	; select bank1
  9955  0378  00AD               	movwf	(_EUSART_packet_data^(0+128)+13)
  9956                           
  9957                           ;EUSART.c: 446: EUSART_packet_data[8] &= 0b11111101; EUSART_packet_data[8] |= 0b00000001
      +                          ;
  9958  0379  30FD               	movlw	253
  9959  037A  0140               	movlb	0	; select bank0
  9960  037B  00B1               	movwf	??_CAN_To_EUSART
  9961  037C  0831               	movf	??_CAN_To_EUSART,w
  9962  037D  0141               	movlb	1	; select bank1
  9963  037E  05A8               	andwf	(_EUSART_packet_data^(0+128)+8),f
  9964  037F  1428               	bsf	(_EUSART_packet_data^(0+128)+8),0
  9965                           
  9966                           ;EUSART.c: 447: }
  9967  0380  2B9C               	goto	l1019
  9968  0381                     l5721:	
  9969                           
  9970                           ;EUSART.c: 448: else if (message->buf[4] & 0b00000010)
  9971  0381  0140               	movlb	0	; select bank0
  9972  0382  0837               	movf	CAN_To_EUSART@message,w
  9973  0383  3E0A               	addlw	10
  9974  0384  0086               	movwf	6
  9975  0385  3002               	movlw	2	; select bank4/5
  9976  0386  0087               	movwf	7
  9977  0387  1C81               	btfss	1,1
  9978  0388  2B90               	goto	l5727
  9979                           
  9980                           ;EUSART.c: 449: {
  9981                           ;EUSART.c: 450: EUSART_packet_data[8] &= 0b11111110; EUSART_packet_data[8] |= 0b00000010
      +                          ;
  9982  0389  30FE               	movlw	254
  9983  038A  00B1               	movwf	??_CAN_To_EUSART
  9984  038B  0831               	movf	??_CAN_To_EUSART,w
  9985  038C  0141               	movlb	1	; select bank1
  9986  038D  05A8               	andwf	(_EUSART_packet_data^(0+128)+8),f
  9987  038E  14A8               	bsf	(_EUSART_packet_data^(0+128)+8),1
  9988                           
  9989                           ;EUSART.c: 451: }
  9990  038F  2B9C               	goto	l1019
  9991  0390                     l5727:	
  9992                           
  9993                           ;EUSART.c: 452: else
  9994                           ;EUSART.c: 453: {
  9995                           ;EUSART.c: 454: EUSART_packet_data[8] &= 0b11111110;
  9996  0390  30FE               	movlw	254
  9997  0391  0140               	movlb	0	; select bank0
  9998  0392  00B1               	movwf	??_CAN_To_EUSART
  9999  0393  0831               	movf	??_CAN_To_EUSART,w
 10000  0394  0141               	movlb	1	; select bank1
 10001  0395  05A8               	andwf	(_EUSART_packet_data^(0+128)+8),f
 10002                           
 10003                           ;EUSART.c: 455: EUSART_packet_data[8] &= 0b11111101;
 10004  0396  30FD               	movlw	253
 10005  0397  0140               	movlb	0	; select bank0
 10006  0398  00B1               	movwf	??_CAN_To_EUSART
 10007  0399  0831               	movf	??_CAN_To_EUSART,w
 10008  039A  0141               	movlb	1	; select bank1
 10009  039B  05A8               	andwf	(_EUSART_packet_data^(0+128)+8),f
 10010  039C                     l1019:	
 10011                           
 10012                           ;EUSART.c: 456: }
 10013                           ;EUSART.c: 457: }
 10014                           ;EUSART.c: 458: EUSART_packet_data[1] &= 0b11111110;
 10015  039C  30FE               	movlw	254
 10016  039D  0140               	movlb	0	; select bank0
 10017  039E  00B1               	movwf	??_CAN_To_EUSART
 10018  039F  0831               	movf	??_CAN_To_EUSART,w
 10019  03A0  0141               	movlb	1	; select bank1
 10020  03A1  05A1               	andwf	(_EUSART_packet_data^(0+128)+1),f
 10021                           
 10022                           ;EUSART.c: 459: EUSART_packet_data[1] &= 0b11111101;
 10023  03A2  30FD               	movlw	253
 10024  03A3  0140               	movlb	0	; select bank0
 10025  03A4  00B1               	movwf	??_CAN_To_EUSART
 10026  03A5  0831               	movf	??_CAN_To_EUSART,w
 10027  03A6  0141               	movlb	1	; select bank1
 10028  03A7  05A1               	andwf	(_EUSART_packet_data^(0+128)+1),f
 10029                           
 10030                           ;EUSART.c: 460: EUSART_packet_data[EUSART_ADDRESS_BYTE] = 0x63;
 10031  03A8  3063               	movlw	99
 10032  03A9  0140               	movlb	0	; select bank0
 10033  03AA  00B1               	movwf	??_CAN_To_EUSART
 10034  03AB  0831               	movf	??_CAN_To_EUSART,w
 10035  03AC  0141               	movlb	1	; select bank1
 10036  03AD  00A0               	movwf	_EUSART_packet_data^(0+128)
 10037                           
 10038                           ;EUSART.c: 462: }
 10039                           
 10040                           ;EUSART.c: 461: break;
 10041  03AE  0008               	return
 10042  03AF                     l5733:	
 10043  03AF  0140               	movlb	0	; select bank0
 10044  03B0  0837               	movf	CAN_To_EUSART@message,w
 10045  03B1  0086               	movwf	6
 10046  03B2  3002               	movlw	2	; select bank4/5
 10047  03B3  0087               	movwf	7
 10048  03B4  30FF               	movlw	255
 10049  03B5  0501               	andwf	1,w
 10050  03B6  00B1               	movwf	??_CAN_To_EUSART
 10051  03B7  3141               	addfsr 1,1
 10052  03B8  30FF               	movlw	255
 10053  03B9  0501               	andwf	1,w
 10054  03BA  00B2               	movwf	??_CAN_To_EUSART+1
 10055  03BB  3141               	addfsr 1,1
 10056  03BC  3000               	movlw	0
 10057  03BD  0501               	andwf	1,w
 10058  03BE  00B3               	movwf	??_CAN_To_EUSART+2
 10059  03BF  3141               	addfsr 1,1
 10060  03C0  3000               	movlw	0
 10061  03C1  0501               	andwf	1,w
 10062  03C2  00B4               	movwf	??_CAN_To_EUSART+3
 10063                           
 10064                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 10065                           ; Switch size 1, requested type "space"
 10066                           ; Number of cases is 1, Range of values is 0 to 0
 10067                           ; switch strategies available:
 10068                           ; Name         Instructions Cycles
 10069                           ; simple_byte            4     3 (average)
 10070                           ; direct_byte            8     6 (fixed)
 10071                           ; jumptable            260     6 (fixed)
 10072                           ;	Chosen strategy is simple_byte
 10073  03C3  0834               	movf	??_CAN_To_EUSART+3,w
 10074  03C4  3A00               	xorlw	0	; case 0
 10075  03C5  1903               	skipnz
 10076  03C6  2BF8               	goto	l6771
 10077  03C7  2BFD               	goto	l1024
 10078  03C8                     l6769:	
 10079                           
 10080                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 10081                           ; Switch size 1, requested type "space"
 10082                           ; Number of cases is 2, Range of values is 0 to 128
 10083                           ; switch strategies available:
 10084                           ; Name         Instructions Cycles
 10085                           ; simple_byte            7     4 (average)
 10086                           ; jumptable            260     6 (fixed)
 10087                           ;	Chosen strategy is simple_byte
 10088  03C8  0832               	movf	??_CAN_To_EUSART+1,w
 10089  03C9  3A00               	xorlw	0	; case 0
 10090  03CA  1903               	skipnz
 10091  03CB  2BD0               	goto	l6773
 10092  03CC  3A80               	xorlw	128	; case 128
 10093  03CD  1903               	skipnz
 10094  03CE  2BF0               	goto	l6775
 10095  03CF  2BFD               	goto	l1024
 10096  03D0                     l6773:	
 10097                           
 10098                           ; Switch size 1, requested type "space"
 10099                           ; Number of cases is 10, Range of values is 0 to 182
 10100                           ; switch strategies available:
 10101                           ; Name         Instructions Cycles
 10102                           ; simple_byte           31    16 (average)
 10103                           ; jumptable            260     6 (fixed)
 10104                           ;	Chosen strategy is simple_byte
 10105  03D0  0831               	movf	??_CAN_To_EUSART,w
 10106  03D1  3A00               	xorlw	0	; case 0
 10107  03D2  1903               	skipnz
 10108  03D3  2A3B               	goto	l5667
 10109  03D4  3A82               	xorlw	130	; case 130
 10110  03D5  1903               	skipnz
 10111  03D6  29BA               	goto	l5659
 10112  03D7  3A01               	xorlw	1	; case 131
 10113  03D8  1903               	skipnz
 10114  03D9  29DE               	goto	l5661
 10115  03DA  3A07               	xorlw	7	; case 132
 10116  03DB  1903               	skipnz
 10117  03DC  2A03               	goto	l5663
 10118  03DD  3A01               	xorlw	1	; case 133
 10119  03DE  1903               	skipnz
 10120  03DF  2A16               	goto	l5665
 10121  03E0  3A03               	xorlw	3	; case 134
 10122  03E1  1903               	skipnz
 10123  03E2  2AB8               	goto	l1011
 10124  03E3  3A16               	xorlw	22	; case 144
 10125  03E4  1903               	skipnz
 10126  03E5  2A45               	goto	l5669
 10127  03E6  3A06               	xorlw	6	; case 150
 10128  03E7  1903               	skipnz
 10129  03E8  2ABB               	goto	l5689
 10130  03E9  3A30               	xorlw	48	; case 166
 10131  03EA  1903               	skipnz
 10132  03EB  2B20               	goto	l5705
 10133  03EC  3A10               	xorlw	16	; case 182
 10134  03ED  1903               	skipnz
 10135  03EE  2B52               	goto	l5711
 10136  03EF  2BFD               	goto	l1024
 10137  03F0                     l6775:	
 10138                           
 10139                           ; Switch size 1, requested type "space"
 10140                           ; Number of cases is 2, Range of values is 0 to 2
 10141                           ; switch strategies available:
 10142                           ; Name         Instructions Cycles
 10143                           ; simple_byte            7     4 (average)
 10144                           ; direct_byte           12     6 (fixed)
 10145                           ; jumptable            260     6 (fixed)
 10146                           ;	Chosen strategy is simple_byte
 10147  03F0  0831               	movf	??_CAN_To_EUSART,w
 10148  03F1  3A00               	xorlw	0	; case 0
 10149  03F2  1903               	skipnz
 10150  03F3  28D9               	goto	l5615
 10151  03F4  3A02               	xorlw	2	; case 2
 10152  03F5  1903               	skipnz
 10153  03F6  2977               	goto	l5629
 10154  03F7  2BFD               	goto	l1024
 10155  03F8                     l6771:	
 10156                           
 10157                           ; Switch size 1, requested type "space"
 10158                           ; Number of cases is 1, Range of values is 0 to 0
 10159                           ; switch strategies available:
 10160                           ; Name         Instructions Cycles
 10161                           ; simple_byte            4     3 (average)
 10162                           ; direct_byte            8     6 (fixed)
 10163                           ; jumptable            260     6 (fixed)
 10164                           ;	Chosen strategy is simple_byte
 10165  03F8  0833               	movf	??_CAN_To_EUSART+2,w
 10166  03F9  3A00               	xorlw	0	; case 0
 10167  03FA  1903               	skipnz
 10168  03FB  2BC8               	goto	l6769
 10169  03FC  2BFD               	goto	l1024
 10170  03FD                     l1024:	
 10171  03FD  0008               	return
 10172  03FE                     __end_of_CAN_To_EUSART:	
 10173                           
 10174                           	psect	text23
 10175  15E4                     __ptext23:	
 10176 ;; *************** function _CAN_Rx *****************
 10177 ;; Defined at:
 10178 ;;		line 598 in file "../src/CAN_SPI_PIC16.c"
 10179 ;; Parameters:    Size  Location     Type
 10180 ;;  ptr             2   35[BANK0 ] PTR struct .
 10181 ;;		 -> Receive_CAN_Message@can(14), J1939_CheckRx@can(14), 
 10182 ;; Auto vars:     Size  Location     Type
 10183 ;;  pBuf            2   43[BANK0 ] PTR struct .
 10184 ;;		 -> CAN_rxMessageQ.m_entry(208), CAN_rxMessageQ(210), 
 10185 ;; Return value:  Size  Location     Type
 10186 ;;                  1    wreg      unsigned char 
 10187 ;; Registers used:
 10188 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10189 ;; Tracked objects:
 10190 ;;		On entry : 0/0
 10191 ;;		On exit  : 0/0
 10192 ;;		Unchanged: 0/0
 10193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10194 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10195 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10196 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10197 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10198 ;;Total ram usage:       10 bytes
 10199 ;; Hardware stack levels used:    1
 10200 ;; Hardware stack levels required when called:    6
 10201 ;; This function calls:
 10202 ;;		__RxBufferToMessage
 10203 ;;		___wmul
 10204 ;; This function is called by:
 10205 ;;		_Receive_CAN_Message
 10206 ;;		_J1939_CheckRx
 10207 ;; This function uses a non-reentrant model
 10208 ;;
 10209                           
 10210                           
 10211                           ;psect for function _CAN_Rx
 10212  15E4                     _CAN_Rx:	
 10213                           
 10214                           ;CAN_SPI_PIC16.c: 600: if( !( ( ( uint16_t )( ( CAN_rxMessageQ.m_putIdx ) - ( CAN_rxMess
      +                          ageQ.m_getIdx ) ) ) == 0 ) )
 10215                           
 10216                           ;incstack = 0
 10217                           ; Regs used in _CAN_Rx: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10218  15E4  304C               	movlw	76
 10219  15E5  0086               	movwf	6
 10220  15E6  3026               	movlw	38
 10221  15E7  0087               	movwf	7
 10222  15E8  0801               	movf	1,w
 10223  15E9  0140               	movlb	0	; select bank0
 10224  15EA  00C5               	movwf	??_CAN_Rx
 10225  15EB  01C6               	clrf	??_CAN_Rx+1
 10226  15EC  09C5               	comf	??_CAN_Rx,f
 10227  15ED  09C6               	comf	??_CAN_Rx+1,f
 10228  15EE  0AC5               	incf	??_CAN_Rx,f
 10229  15EF  1903               	skipnz
 10230  15F0  0AC6               	incf	??_CAN_Rx+1,f
 10231  15F1  304C               	movlw	76
 10232  15F2  0086               	movwf	6
 10233  15F3  3026               	movlw	38
 10234  15F4  0087               	movwf	7
 10235  15F5  3141               	addfsr 1,1
 10236  15F6  0801               	movf	1,w
 10237  15F7  0745               	addwf	??_CAN_Rx,w
 10238  15F8  00C7               	movwf	??_CAN_Rx+2
 10239  15F9  0846               	movf	??_CAN_Rx+1,w
 10240  15FA  1803               	skipnc
 10241  15FB  0A46               	incf	??_CAN_Rx+1,w
 10242  15FC  00C8               	movwf	??_CAN_Rx+3
 10243  15FD  0847               	movf	??_CAN_Rx+2,w
 10244  15FE  0448               	iorwf	??_CAN_Rx+3,w
 10245  15FF  1903               	btfsc	3,2
 10246  1600  2E38               	goto	l6539
 10247                           
 10248                           ;CAN_SPI_PIC16.c: 601: {
 10249                           ;CAN_SPI_PIC16.c: 602: MessageBuffer_t *pBuf = &( CAN_rxMessageQ.m_entry )[ CAN_rxMessag
      +                          eQ.m_getIdx & ( ( 16U ) - 1 ) ];
 10250  1601  304C               	movlw	76
 10251  1602  0086               	movwf	6
 10252  1603  3026               	movlw	38
 10253  1604  0087               	movwf	7
 10254  1605  0801               	movf	1,w
 10255  1606  390F               	andlw	15
 10256  1607  00C5               	movwf	??_CAN_Rx
 10257  1608  01C6               	clrf	??_CAN_Rx+1
 10258  1609  0845               	movf	??_CAN_Rx,w
 10259  160A  00B1               	movwf	___wmul@multiplier
 10260  160B  0846               	movf	??_CAN_Rx+1,w
 10261  160C  00B2               	movwf	___wmul@multiplier+1
 10262  160D  300D               	movlw	13
 10263  160E  00B3               	movwf	___wmul@multiplicand
 10264  160F  3000               	movlw	0
 10265  1610  00B4               	movwf	___wmul@multiplicand+1
 10266  1611  3192  2205  3195   	fcall	___wmul
 10267  1614  304E               	movlw	78
 10268  1615  0140               	movlb	0	; select bank0
 10269  1616  00C7               	movwf	??_CAN_Rx+2
 10270  1617  3026               	movlw	38
 10271  1618  00C8               	movwf	??_CAN_Rx+3
 10272  1619  0831               	movf	?___wmul,w
 10273  161A  0747               	addwf	??_CAN_Rx+2,w
 10274  161B  00C9               	movwf	??_CAN_Rx+4
 10275  161C  0832               	movf	?___wmul+1,w
 10276  161D  3D48               	addwfc	??_CAN_Rx+3,w
 10277  161E  00CA               	movwf	??_CAN_Rx+5
 10278  161F  0849               	movf	??_CAN_Rx+4,w
 10279  1620  00CB               	movwf	CAN_Rx@pBuf
 10280  1621  084A               	movf	??_CAN_Rx+5,w
 10281  1622  00CC               	movwf	CAN_Rx@pBuf+1
 10282                           
 10283                           ;CAN_SPI_PIC16.c: 604: _RxBufferToMessage( pBuf, ptr );
 10284  1623  084C               	movf	CAN_Rx@pBuf+1,w
 10285  1624  00B2               	movwf	__RxBufferToMessage@p+1
 10286  1625  084B               	movf	CAN_Rx@pBuf,w
 10287  1626  00B1               	movwf	__RxBufferToMessage@p
 10288  1627  0844               	movf	CAN_Rx@ptr+1,w
 10289  1628  00B4               	movwf	__RxBufferToMessage@pMsg+1
 10290  1629  0843               	movf	CAN_Rx@ptr,w
 10291  162A  00B3               	movwf	__RxBufferToMessage@pMsg
 10292  162B  3188  2090         	fcall	__RxBufferToMessage
 10293                           
 10294                           ;CAN_SPI_PIC16.c: 606: CAN_rxMessageQ.m_getIdx++;
 10295  162D  3001               	movlw	1
 10296  162E  0140               	movlb	0	; select bank0
 10297  162F  00C5               	movwf	??_CAN_Rx
 10298  1630  304C               	movlw	76
 10299  1631  0086               	movwf	6
 10300  1632  3026               	movlw	38
 10301  1633  0087               	movwf	7
 10302  1634  0845               	movf	??_CAN_Rx,w
 10303  1635  0781               	addwf	1,f
 10304                           
 10305                           ;CAN_SPI_PIC16.c: 607: return 0;
 10306  1636  3000               	movlw	0
 10307  1637  0008               	return
 10308  1638                     l6539:	
 10309                           
 10310                           ;CAN_SPI_PIC16.c: 608: }
 10311                           ;CAN_SPI_PIC16.c: 610: return 1;
 10312  1638  3001               	movlw	1
 10313  1639  0008               	return
 10314  163A                     __end_of_CAN_Rx:	
 10315                           
 10316                           	psect	text24
 10317  1205                     __ptext24:	
 10318 ;; *************** function ___wmul *****************
 10319 ;; Defined at:
 10320 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 10321 ;; Parameters:    Size  Location     Type
 10322 ;;  multiplier      2   17[BANK0 ] unsigned int 
 10323 ;;  multiplicand    2   19[BANK0 ] unsigned int 
 10324 ;; Auto vars:     Size  Location     Type
 10325 ;;  product         2   21[BANK0 ] unsigned int 
 10326 ;; Return value:  Size  Location     Type
 10327 ;;                  2   17[BANK0 ] unsigned int 
 10328 ;; Registers used:
 10329 ;;		wreg, status,2, status,0
 10330 ;; Tracked objects:
 10331 ;;		On entry : 0/0
 10332 ;;		On exit  : 0/0
 10333 ;;		Unchanged: 0/0
 10334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10335 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10336 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10338 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10339 ;;Total ram usage:        6 bytes
 10340 ;; Hardware stack levels used:    1
 10341 ;; Hardware stack levels required when called:    5
 10342 ;; This function calls:
 10343 ;;		Nothing
 10344 ;; This function is called by:
 10345 ;;		__EnqueueTxMessage
 10346 ;;		_CAN_Rx
 10347 ;;		_j1939tp_post_cm
 10348 ;; This function uses a non-reentrant model
 10349 ;;
 10350                           
 10351                           
 10352                           ;psect for function ___wmul
 10353  1205                     ___wmul:	
 10354                           
 10355                           ;incstack = 0
 10356                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10357  1205  0140               	movlb	0	; select bank0
 10358  1206  01B5               	clrf	___wmul@product
 10359  1207  01B6               	clrf	___wmul@product+1
 10360  1208                     l5459:	
 10361  1208  1C31               	btfss	___wmul@multiplier,0
 10362  1209  2A0E               	goto	l1255
 10363  120A  0833               	movf	___wmul@multiplicand,w
 10364  120B  07B5               	addwf	___wmul@product,f
 10365  120C  0834               	movf	___wmul@multiplicand+1,w
 10366  120D  3DB6               	addwfc	___wmul@product+1,f
 10367  120E                     l1255:	
 10368  120E  3001               	movlw	1
 10369  120F                     u4405:	
 10370  120F  35B3               	lslf	___wmul@multiplicand,f
 10371  1210  0DB4               	rlf	___wmul@multiplicand+1,f
 10372  1211  0B89               	decfsz	9,f
 10373  1212  2A0F               	goto	u4405
 10374  1213  3001               	movlw	1
 10375  1214                     u4415:	
 10376  1214  36B2               	lsrf	___wmul@multiplier+1,f
 10377  1215  0CB1               	rrf	___wmul@multiplier,f
 10378  1216  0B89               	decfsz	9,f
 10379  1217  2A14               	goto	u4415
 10380  1218  0831               	movf	___wmul@multiplier,w
 10381  1219  0432               	iorwf	___wmul@multiplier+1,w
 10382  121A  1D03               	btfss	3,2
 10383  121B  2A08               	goto	l5459
 10384  121C  0836               	movf	___wmul@product+1,w
 10385  121D  00B2               	movwf	?___wmul+1
 10386  121E  0835               	movf	___wmul@product,w
 10387  121F  00B1               	movwf	?___wmul
 10388  1220  0008               	return
 10389  1221                     __end_of___wmul:	
 10390                           
 10391                           	psect	text25
 10392  0890                     __ptext25:	
 10393 ;; *************** function __RxBufferToMessage *****************
 10394 ;; Defined at:
 10395 ;;		line 157 in file "../src/CAN_SPI_PIC16.c"
 10396 ;; Parameters:    Size  Location     Type
 10397 ;;  p               2   17[BANK0 ] PTR struct .
 10398 ;;		 -> CAN_rxMessageQ.m_entry(208), CAN_rxMessageQ(210), 
 10399 ;;  pMsg            2   19[BANK0 ] PTR struct .
 10400 ;;		 -> Receive_CAN_Message@can(14), J1939_CheckRx@can(14), 
 10401 ;; Auto vars:     Size  Location     Type
 10402 ;;  id              4   31[BANK0 ] unsigned long 
 10403 ;;  dlc             1   30[BANK0 ] unsigned char 
 10404 ;; Return value:  Size  Location     Type
 10405 ;;                  1    wreg      void 
 10406 ;; Registers used:
 10407 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10408 ;; Tracked objects:
 10409 ;;		On entry : 0/0
 10410 ;;		On exit  : 0/0
 10411 ;;		Unchanged: 0/0
 10412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10413 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10414 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10415 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10416 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10417 ;;Total ram usage:       18 bytes
 10418 ;; Hardware stack levels used:    1
 10419 ;; Hardware stack levels required when called:    5
 10420 ;; This function calls:
 10421 ;;		Nothing
 10422 ;; This function is called by:
 10423 ;;		_CAN_Rx
 10424 ;; This function uses a non-reentrant model
 10425 ;;
 10426                           
 10427                           
 10428                           ;psect for function __RxBufferToMessage
 10429  0890                     __RxBufferToMessage:	
 10430                           
 10431                           ;CAN_SPI_PIC16.c: 159: uint32_t id = ( (uint32_t)p->sidh << 3 ) + ( p->sidl >> 5 );
 10432                           
 10433                           ;incstack = 0
 10434                           ; Regs used in __RxBufferToMessage: [wreg-fsr1h+status,2+status,0]
 10435  0890  0140               	movlb	0	; select bank0
 10436  0891  0831               	movf	__RxBufferToMessage@p,w
 10437  0892  0086               	movwf	6
 10438  0893  0832               	movf	__RxBufferToMessage@p+1,w
 10439  0894  0087               	movwf	7
 10440  0895  3141               	addfsr 1,1
 10441  0896  0801               	movf	1,w
 10442  0897  00B5               	movwf	??__RxBufferToMessage
 10443  0898  3005               	movlw	5
 10444  0899                     u4185:	
 10445  0899  36B5               	lsrf	??__RxBufferToMessage,f
 10446  089A  0B89               	decfsz	9,f
 10447  089B  2899               	goto	u4185
 10448  089C  0835               	movf	??__RxBufferToMessage,w
 10449  089D  00B6               	movwf	??__RxBufferToMessage+1
 10450  089E  01B7               	clrf	??__RxBufferToMessage+2
 10451  089F  01B8               	clrf	??__RxBufferToMessage+3
 10452  08A0  01B9               	clrf	??__RxBufferToMessage+4
 10453  08A1  0831               	movf	__RxBufferToMessage@p,w
 10454  08A2  0086               	movwf	6
 10455  08A3  0832               	movf	__RxBufferToMessage@p+1,w
 10456  08A4  0087               	movwf	7
 10457  08A5  0801               	movf	1,w
 10458  08A6  00BA               	movwf	??__RxBufferToMessage+5
 10459  08A7  01BB               	clrf	??__RxBufferToMessage+6
 10460  08A8  01BC               	clrf	??__RxBufferToMessage+7
 10461  08A9  01BD               	clrf	??__RxBufferToMessage+8
 10462  08AA  3003               	movlw	3
 10463  08AB                     u4195:	
 10464  08AB  35BA               	lslf	??__RxBufferToMessage+5,f
 10465  08AC  0DBB               	rlf	??__RxBufferToMessage+6,f
 10466  08AD  0DBC               	rlf	??__RxBufferToMessage+7,f
 10467  08AE  0DBD               	rlf	??__RxBufferToMessage+8,f
 10468  08AF  0B89               	decfsz	9,f
 10469  08B0  28AB               	goto	u4195
 10470  08B1  083A               	movf	??__RxBufferToMessage+5,w
 10471  08B2  07B6               	addwf	??__RxBufferToMessage+1,f
 10472  08B3  083B               	movf	??__RxBufferToMessage+6,w
 10473  08B4  3DB7               	addwfc	??__RxBufferToMessage+2,f
 10474  08B5  083C               	movf	??__RxBufferToMessage+7,w
 10475  08B6  3DB8               	addwfc	??__RxBufferToMessage+3,f
 10476  08B7  083D               	movf	??__RxBufferToMessage+8,w
 10477  08B8  3DB9               	addwfc	??__RxBufferToMessage+4,f
 10478  08B9  0839               	movf	??__RxBufferToMessage+4,w
 10479  08BA  00C2               	movwf	__RxBufferToMessage@id+3
 10480  08BB  0838               	movf	??__RxBufferToMessage+3,w
 10481  08BC  00C1               	movwf	__RxBufferToMessage@id+2
 10482  08BD  0837               	movf	??__RxBufferToMessage+2,w
 10483  08BE  00C0               	movwf	__RxBufferToMessage@id+1
 10484  08BF  0836               	movf	??__RxBufferToMessage+1,w
 10485  08C0  00BF               	movwf	__RxBufferToMessage@id
 10486                           
 10487                           ;CAN_SPI_PIC16.c: 161: if( ( p->sidl & 0x08U ) == 0x08U )
 10488  08C1  0831               	movf	__RxBufferToMessage@p,w
 10489  08C2  0086               	movwf	6
 10490  08C3  0832               	movf	__RxBufferToMessage@p+1,w
 10491  08C4  0087               	movwf	7
 10492  08C5  3141               	addfsr 1,1
 10493  08C6  1D81               	btfss	1,3
 10494  08C7  2945               	goto	l5389
 10495                           
 10496                           ;CAN_SPI_PIC16.c: 162: {
 10497                           ;CAN_SPI_PIC16.c: 163: id = ( id << 2 ) + ( p->sidl & 0x03 );
 10498  08C8  0831               	movf	__RxBufferToMessage@p,w
 10499  08C9  0086               	movwf	6
 10500  08CA  0832               	movf	__RxBufferToMessage@p+1,w
 10501  08CB  0087               	movwf	7
 10502  08CC  3141               	addfsr 1,1
 10503  08CD  0801               	movf	1,w
 10504  08CE  3903               	andlw	3
 10505  08CF  00B5               	movwf	??__RxBufferToMessage
 10506  08D0  01B6               	clrf	??__RxBufferToMessage+1
 10507  08D1  01B7               	clrf	??__RxBufferToMessage+2
 10508  08D2  01B8               	clrf	??__RxBufferToMessage+3
 10509  08D3  083F               	movf	__RxBufferToMessage@id,w
 10510  08D4  00B9               	movwf	??__RxBufferToMessage+4
 10511  08D5  0840               	movf	__RxBufferToMessage@id+1,w
 10512  08D6  00BA               	movwf	??__RxBufferToMessage+5
 10513  08D7  0841               	movf	__RxBufferToMessage@id+2,w
 10514  08D8  00BB               	movwf	??__RxBufferToMessage+6
 10515  08D9  0842               	movf	__RxBufferToMessage@id+3,w
 10516  08DA  00BC               	movwf	??__RxBufferToMessage+7
 10517  08DB  3002               	movlw	2
 10518  08DC                     u4215:	
 10519  08DC  35B9               	lslf	??__RxBufferToMessage+4,f
 10520  08DD  0DBA               	rlf	??__RxBufferToMessage+5,f
 10521  08DE  0DBB               	rlf	??__RxBufferToMessage+6,f
 10522  08DF  0DBC               	rlf	??__RxBufferToMessage+7,f
 10523  08E0  0B89               	decfsz	9,f
 10524  08E1  28DC               	goto	u4215
 10525  08E2  0839               	movf	??__RxBufferToMessage+4,w
 10526  08E3  07B5               	addwf	??__RxBufferToMessage,f
 10527  08E4  083A               	movf	??__RxBufferToMessage+5,w
 10528  08E5  3DB6               	addwfc	??__RxBufferToMessage+1,f
 10529  08E6  083B               	movf	??__RxBufferToMessage+6,w
 10530  08E7  3DB7               	addwfc	??__RxBufferToMessage+2,f
 10531  08E8  083C               	movf	??__RxBufferToMessage+7,w
 10532  08E9  3DB8               	addwfc	??__RxBufferToMessage+3,f
 10533  08EA  0838               	movf	??__RxBufferToMessage+3,w
 10534  08EB  00C2               	movwf	__RxBufferToMessage@id+3
 10535  08EC  0837               	movf	??__RxBufferToMessage+2,w
 10536  08ED  00C1               	movwf	__RxBufferToMessage@id+2
 10537  08EE  0836               	movf	??__RxBufferToMessage+1,w
 10538  08EF  00C0               	movwf	__RxBufferToMessage@id+1
 10539  08F0  0835               	movf	??__RxBufferToMessage,w
 10540  08F1  00BF               	movwf	__RxBufferToMessage@id
 10541                           
 10542                           ;CAN_SPI_PIC16.c: 164: id = ( id << 8 ) + p->eid8;
 10543  08F2  0831               	movf	__RxBufferToMessage@p,w
 10544  08F3  0086               	movwf	6
 10545  08F4  0832               	movf	__RxBufferToMessage@p+1,w
 10546  08F5  0087               	movwf	7
 10547  08F6  3142               	addfsr 1,2
 10548  08F7  0801               	movf	1,w
 10549  08F8  00B5               	movwf	??__RxBufferToMessage
 10550  08F9  01B6               	clrf	??__RxBufferToMessage+1
 10551  08FA  01B7               	clrf	??__RxBufferToMessage+2
 10552  08FB  01B8               	clrf	??__RxBufferToMessage+3
 10553  08FC  083F               	movf	__RxBufferToMessage@id,w
 10554  08FD  00B9               	movwf	??__RxBufferToMessage+4
 10555  08FE  0840               	movf	__RxBufferToMessage@id+1,w
 10556  08FF  00BA               	movwf	??__RxBufferToMessage+5
 10557  0900  0841               	movf	__RxBufferToMessage@id+2,w
 10558  0901  00BB               	movwf	??__RxBufferToMessage+6
 10559  0902  0842               	movf	__RxBufferToMessage@id+3,w
 10560  0903  00BC               	movwf	??__RxBufferToMessage+7
 10561  0904  3008               	movlw	8
 10562  0905                     u4225:	
 10563  0905  35B9               	lslf	??__RxBufferToMessage+4,f
 10564  0906  0DBA               	rlf	??__RxBufferToMessage+5,f
 10565  0907  0DBB               	rlf	??__RxBufferToMessage+6,f
 10566  0908  0DBC               	rlf	??__RxBufferToMessage+7,f
 10567  0909  0B89               	decfsz	9,f
 10568  090A  2905               	goto	u4225
 10569  090B  0839               	movf	??__RxBufferToMessage+4,w
 10570  090C  07B5               	addwf	??__RxBufferToMessage,f
 10571  090D  083A               	movf	??__RxBufferToMessage+5,w
 10572  090E  3DB6               	addwfc	??__RxBufferToMessage+1,f
 10573  090F  083B               	movf	??__RxBufferToMessage+6,w
 10574  0910  3DB7               	addwfc	??__RxBufferToMessage+2,f
 10575  0911  083C               	movf	??__RxBufferToMessage+7,w
 10576  0912  3DB8               	addwfc	??__RxBufferToMessage+3,f
 10577  0913  0838               	movf	??__RxBufferToMessage+3,w
 10578  0914  00C2               	movwf	__RxBufferToMessage@id+3
 10579  0915  0837               	movf	??__RxBufferToMessage+2,w
 10580  0916  00C1               	movwf	__RxBufferToMessage@id+2
 10581  0917  0836               	movf	??__RxBufferToMessage+1,w
 10582  0918  00C0               	movwf	__RxBufferToMessage@id+1
 10583  0919  0835               	movf	??__RxBufferToMessage,w
 10584  091A  00BF               	movwf	__RxBufferToMessage@id
 10585                           
 10586                           ;CAN_SPI_PIC16.c: 165: id = ( id << 8 ) + p->eid0;
 10587  091B  0831               	movf	__RxBufferToMessage@p,w
 10588  091C  0086               	movwf	6
 10589  091D  0832               	movf	__RxBufferToMessage@p+1,w
 10590  091E  0087               	movwf	7
 10591  091F  3143               	addfsr 1,3
 10592  0920  0801               	movf	1,w
 10593  0921  00B5               	movwf	??__RxBufferToMessage
 10594  0922  01B6               	clrf	??__RxBufferToMessage+1
 10595  0923  01B7               	clrf	??__RxBufferToMessage+2
 10596  0924  01B8               	clrf	??__RxBufferToMessage+3
 10597  0925  083F               	movf	__RxBufferToMessage@id,w
 10598  0926  00B9               	movwf	??__RxBufferToMessage+4
 10599  0927  0840               	movf	__RxBufferToMessage@id+1,w
 10600  0928  00BA               	movwf	??__RxBufferToMessage+5
 10601  0929  0841               	movf	__RxBufferToMessage@id+2,w
 10602  092A  00BB               	movwf	??__RxBufferToMessage+6
 10603  092B  0842               	movf	__RxBufferToMessage@id+3,w
 10604  092C  00BC               	movwf	??__RxBufferToMessage+7
 10605  092D  3008               	movlw	8
 10606  092E                     u4235:	
 10607  092E  35B9               	lslf	??__RxBufferToMessage+4,f
 10608  092F  0DBA               	rlf	??__RxBufferToMessage+5,f
 10609  0930  0DBB               	rlf	??__RxBufferToMessage+6,f
 10610  0931  0DBC               	rlf	??__RxBufferToMessage+7,f
 10611  0932  0B89               	decfsz	9,f
 10612  0933  292E               	goto	u4235
 10613  0934  0839               	movf	??__RxBufferToMessage+4,w
 10614  0935  07B5               	addwf	??__RxBufferToMessage,f
 10615  0936  083A               	movf	??__RxBufferToMessage+5,w
 10616  0937  3DB6               	addwfc	??__RxBufferToMessage+1,f
 10617  0938  083B               	movf	??__RxBufferToMessage+6,w
 10618  0939  3DB7               	addwfc	??__RxBufferToMessage+2,f
 10619  093A  083C               	movf	??__RxBufferToMessage+7,w
 10620  093B  3DB8               	addwfc	??__RxBufferToMessage+3,f
 10621  093C  0838               	movf	??__RxBufferToMessage+3,w
 10622  093D  00C2               	movwf	__RxBufferToMessage@id+3
 10623  093E  0837               	movf	??__RxBufferToMessage+2,w
 10624  093F  00C1               	movwf	__RxBufferToMessage@id+2
 10625  0940  0836               	movf	??__RxBufferToMessage+1,w
 10626  0941  00C0               	movwf	__RxBufferToMessage@id+1
 10627  0942  0835               	movf	??__RxBufferToMessage,w
 10628  0943  00BF               	movwf	__RxBufferToMessage@id
 10629                           
 10630                           ;CAN_SPI_PIC16.c: 167: id |= 0x80000000U;
 10631  0944  17C2               	bsf	__RxBufferToMessage@id+3,7
 10632  0945                     l5389:	
 10633                           
 10634                           ;CAN_SPI_PIC16.c: 168: }
 10635                           ;CAN_SPI_PIC16.c: 170: uint8_t dlc = p->dlc & 0x0FU;
 10636  0945  0831               	movf	__RxBufferToMessage@p,w
 10637  0946  0086               	movwf	6
 10638  0947  0832               	movf	__RxBufferToMessage@p+1,w
 10639  0948  0087               	movwf	7
 10640  0949  3144               	addfsr 1,4
 10641  094A  0801               	movf	1,w
 10642  094B  390F               	andlw	15
 10643  094C  00B5               	movwf	??__RxBufferToMessage
 10644  094D  0835               	movf	??__RxBufferToMessage,w
 10645  094E  00BE               	movwf	__RxBufferToMessage@dlc
 10646                           
 10647                           ;CAN_SPI_PIC16.c: 171: if( dlc > 8 )
 10648  094F  3009               	movlw	9
 10649  0950  023E               	subwf	__RxBufferToMessage@dlc,w
 10650  0951  1C03               	skipc
 10651  0952  2957               	goto	l5395
 10652                           
 10653                           ;CAN_SPI_PIC16.c: 172: {
 10654                           ;CAN_SPI_PIC16.c: 174: dlc = 8;
 10655  0953  3008               	movlw	8
 10656  0954  00B5               	movwf	??__RxBufferToMessage
 10657  0955  0835               	movf	??__RxBufferToMessage,w
 10658  0956  00BE               	movwf	__RxBufferToMessage@dlc
 10659  0957                     l5395:	
 10660                           
 10661                           ;CAN_SPI_PIC16.c: 175: }
 10662                           ;CAN_SPI_PIC16.c: 178: if( p->dlc & 0x40U )
 10663  0957  0831               	movf	__RxBufferToMessage@p,w
 10664  0958  0086               	movwf	6
 10665  0959  0832               	movf	__RxBufferToMessage@p+1,w
 10666  095A  0087               	movwf	7
 10667  095B  3144               	addfsr 1,4
 10668  095C  1B01               	btfsc	1,6
 10669                           
 10670                           ;CAN_SPI_PIC16.c: 179: {
 10671                           ;CAN_SPI_PIC16.c: 180: id |= 0x40000000U;
 10672  095D  1742               	bsf	__RxBufferToMessage@id+3,6
 10673                           
 10674                           ;CAN_SPI_PIC16.c: 181: }
 10675                           ;CAN_SPI_PIC16.c: 183: pMsg->id = id;
 10676  095E  0833               	movf	__RxBufferToMessage@pMsg,w
 10677  095F  0086               	movwf	6
 10678  0960  0834               	movf	__RxBufferToMessage@pMsg+1,w
 10679  0961  0087               	movwf	7
 10680  0962  083F               	movf	__RxBufferToMessage@id,w
 10681  0963  3FC0               	movwi [0]fsr1
 10682  0964  0840               	movf	__RxBufferToMessage@id+1,w
 10683  0965  3FC1               	movwi [1]fsr1
 10684  0966  0841               	movf	__RxBufferToMessage@id+2,w
 10685  0967  3FC2               	movwi [2]fsr1
 10686  0968  0842               	movf	__RxBufferToMessage@id+3,w
 10687  0969  3FC3               	movwi [3]fsr1
 10688                           
 10689                           ;CAN_SPI_PIC16.c: 184: pMsg->buf_len = dlc;
 10690  096A  0833               	movf	__RxBufferToMessage@pMsg,w
 10691  096B  3E05               	addlw	5
 10692  096C  00B5               	movwf	??__RxBufferToMessage
 10693  096D  3000               	movlw	0
 10694  096E  3D34               	addwfc	__RxBufferToMessage@pMsg+1,w
 10695  096F  00B6               	movwf	??__RxBufferToMessage+1
 10696  0970  0835               	movf	??__RxBufferToMessage,w
 10697  0971  0086               	movwf	6
 10698  0972  0836               	movf	??__RxBufferToMessage+1,w
 10699  0973  0087               	movwf	7
 10700  0974  083E               	movf	__RxBufferToMessage@dlc,w
 10701  0975  0081               	movwf	1
 10702                           
 10703                           ;CAN_SPI_PIC16.c: 185: __builtin_memcpy(pMsg->buf,p->data,dlc);
 10704  0976  0833               	movf	__RxBufferToMessage@pMsg,w
 10705  0977  0086               	movwf	6
 10706  0978  0834               	movf	__RxBufferToMessage@pMsg+1,w
 10707  0979  0087               	movwf	7
 10708  097A  3146               	addfsr 1,6
 10709  097B  0140               	movlb	0	; select bank0
 10710  097C  0831               	movf	__RxBufferToMessage@p,w
 10711  097D  0084               	movwf	4
 10712  097E  0832               	movf	__RxBufferToMessage@p+1,w
 10713  097F  0085               	movwf	5
 10714  0980  3105               	addfsr 0,5
 10715  0981  083E               	movf	__RxBufferToMessage@dlc,w
 10716  0982  00B5               	movwf	??__RxBufferToMessage
 10717  0983  0835               	movf	??__RxBufferToMessage,w
 10718  0984  1903               	skipnz
 10719  0985  0008               	return
 10720  0986                     u426m0:	
 10721  0986  0012               	moviw fsr0++
 10722  0987  001E               	movwi fsr1++
 10723  0988  0BB5               	decfsz	??__RxBufferToMessage,f
 10724  0989  2986               	goto	u426m0
 10725  098A  0008               	return
 10726  098B                     __end_of__RxBufferToMessage:	
 10727                           
 10728                           	psect	text26
 10729  1690                     __ptext26:	
 10730 ;; *************** function _direction_message_task *****************
 10731 ;; Defined at:
 10732 ;;		line 270 in file "../src/main.c"
 10733 ;; Parameters:    Size  Location     Type
 10734 ;;		None
 10735 ;; Auto vars:     Size  Location     Type
 10736 ;;		None
 10737 ;; Return value:  Size  Location     Type
 10738 ;;                  1    wreg      void 
 10739 ;; Registers used:
 10740 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10741 ;; Tracked objects:
 10742 ;;		On entry : 0/0
 10743 ;;		On exit  : 0/0
 10744 ;;		Unchanged: 0/0
 10745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10748 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10749 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10750 ;;Total ram usage:        8 bytes
 10751 ;; Hardware stack levels used:    1
 10752 ;; Hardware stack levels required when called:    5
 10753 ;; This function calls:
 10754 ;;		Nothing
 10755 ;; This function is called by:
 10756 ;;		_main
 10757 ;; This function uses a non-reentrant model
 10758 ;;
 10759                           
 10760                           
 10761                           ;psect for function _direction_message_task
 10762  1690                     _direction_message_task:	
 10763                           
 10764                           ;main.c: 271: static TIMER_TICK direction_tick = 0;
 10765                           ;main.c: 272: static uint8_t direction_state = NO_DIRECTION;
 10766                           ;main.c: 274: if( ( TIMER_TICK )( SYSTEM_tick - direction_tick ) >= 1000 ){
 10767                           
 10768                           ;incstack = 0
 10769                           ; Regs used in _direction_message_task: [wreg-fsr0h+status,2+status,0]
 10770  1690  0140               	movlb	0	; select bank0
 10771  1691  0853               	movf	_SYSTEM_tick,w
 10772  1692  00B1               	movwf	??_direction_message_task
 10773  1693  0854               	movf	_SYSTEM_tick+1,w
 10774  1694  00B2               	movwf	??_direction_message_task+1
 10775  1695  0855               	movf	_SYSTEM_tick+2,w
 10776  1696  00B3               	movwf	??_direction_message_task+2
 10777  1697  0856               	movf	_SYSTEM_tick+3,w
 10778  1698  00B4               	movwf	??_direction_message_task+3
 10779  1699  0142               	movlb	2	; select bank2
 10780  169A  0931               	comf	direction_message_task@direction_tick^(0+256),w
 10781  169B  0140               	movlb	0	; select bank0
 10782  169C  00B5               	movwf	??_direction_message_task+4
 10783  169D  0142               	movlb	2	; select bank2
 10784  169E  0932               	comf	(direction_message_task@direction_tick+1)^(0+256),w
 10785  169F  0140               	movlb	0	; select bank0
 10786  16A0  00B6               	movwf	??_direction_message_task+5
 10787  16A1  0142               	movlb	2	; select bank2
 10788  16A2  0933               	comf	(direction_message_task@direction_tick+2)^(0+256),w
 10789  16A3  0140               	movlb	0	; select bank0
 10790  16A4  00B7               	movwf	??_direction_message_task+6
 10791  16A5  0142               	movlb	2	; select bank2
 10792  16A6  0934               	comf	(direction_message_task@direction_tick+3)^(0+256),w
 10793  16A7  0140               	movlb	0	; select bank0
 10794  16A8  00B8               	movwf	??_direction_message_task+7
 10795  16A9  0AB5               	incf	??_direction_message_task+4,f
 10796  16AA  1903               	skipnz
 10797  16AB  0AB6               	incf	??_direction_message_task+5,f
 10798  16AC  1903               	skipnz
 10799  16AD  0AB7               	incf	??_direction_message_task+6,f
 10800  16AE  1903               	skipnz
 10801  16AF  0AB8               	incf	??_direction_message_task+7,f
 10802  16B0  0835               	movf	??_direction_message_task+4,w
 10803  16B1  07B1               	addwf	??_direction_message_task,f
 10804  16B2  0836               	movf	??_direction_message_task+5,w
 10805  16B3  3DB2               	addwfc	??_direction_message_task+1,f
 10806  16B4  0837               	movf	??_direction_message_task+6,w
 10807  16B5  3DB3               	addwfc	??_direction_message_task+2,f
 10808  16B6  0838               	movf	??_direction_message_task+7,w
 10809  16B7  3DB4               	addwfc	??_direction_message_task+3,f
 10810  16B8  0834               	movf	??_direction_message_task+3,w
 10811  16B9  1D03               	btfss	3,2
 10812  16BA  2EC4               	goto	l4863
 10813  16BB  0833               	movf	??_direction_message_task+2,w
 10814  16BC  1D03               	btfss	3,2
 10815  16BD  2EC4               	goto	l4863
 10816  16BE  30E8               	movlw	232
 10817  16BF  0231               	subwf	??_direction_message_task,w
 10818  16C0  3003               	movlw	3
 10819  16C1  3B32               	subwfb	??_direction_message_task+1,w
 10820  16C2  1C03               	btfss	3,0
 10821  16C3  0008               	return
 10822  16C4                     l4863:	
 10823                           
 10824                           ;main.c: 275: direction_tick = SYSTEM_tick;
 10825  16C4  0856               	movf	_SYSTEM_tick+3,w
 10826  16C5  0142               	movlb	2	; select bank2
 10827  16C6  00B4               	movwf	(direction_message_task@direction_tick+3)^(0+256)
 10828  16C7  0140               	movlb	0	; select bank0
 10829  16C8  0855               	movf	_SYSTEM_tick+2,w
 10830  16C9  0142               	movlb	2	; select bank2
 10831  16CA  00B3               	movwf	(direction_message_task@direction_tick+2)^(0+256)
 10832  16CB  0140               	movlb	0	; select bank0
 10833  16CC  0854               	movf	_SYSTEM_tick+1,w
 10834  16CD  0142               	movlb	2	; select bank2
 10835  16CE  00B2               	movwf	(direction_message_task@direction_tick+1)^(0+256)
 10836  16CF  0140               	movlb	0	; select bank0
 10837  16D0  0853               	movf	_SYSTEM_tick,w
 10838  16D1  0142               	movlb	2	; select bank2
 10839  16D2  00B1               	movwf	direction_message_task@direction_tick^(0+256)
 10840                           
 10841                           ;main.c: 276: switch(direction_state){
 10842  16D3  2EE0               	goto	l4875
 10843  16D4                     l4865:	
 10844                           ;main.c: 277: case NO_DIRECTION:
 10845                           
 10846                           
 10847                           ;main.c: 278: if(machine_direction != 0x00)
 10848  16D4  0141               	movlb	1	; select bank1
 10849  16D5  0852               	movf	_machine_direction^(0+128),w
 10850  16D6  1903               	btfsc	3,2
 10851  16D7  0008               	return
 10852                           
 10853                           ;main.c: 279: direction_state = DIRECTION;
 10854  16D8  01CF               	clrf	direction_message_task@direction_state^(0+128)
 10855  16D9  0ACF               	incf	direction_message_task@direction_state^(0+128),f
 10856                           
 10857                           ;main.c: 280: break;
 10858  16DA  0008               	return
 10859  16DB                     l4869:	
 10860                           ;main.c: 281: case DIRECTION:
 10861                           
 10862                           
 10863                           ;main.c: 282: machine_direction = 0x00;
 10864  16DB  01D2               	clrf	_machine_direction^(0+128)
 10865                           
 10866                           ;main.c: 283: direction_state = NO_DIRECTION;
 10867  16DC  01CF               	clrf	direction_message_task@direction_state^(0+128)
 10868                           
 10869                           ;main.c: 284: break;
 10870  16DD  0008               	return
 10871  16DE                     l4871:	
 10872                           ;main.c: 285: default:
 10873                           
 10874                           
 10875                           ;main.c: 286: direction_state = NO_DIRECTION;
 10876  16DE  01CF               	clrf	direction_message_task@direction_state^(0+128)
 10877                           
 10878                           ;main.c: 288: }
 10879                           
 10880                           ;main.c: 287: break;
 10881  16DF  0008               	return
 10882  16E0                     l4875:	
 10883  16E0  0141               	movlb	1	; select bank1
 10884  16E1  084F               	movf	direction_message_task@direction_state^(0+128),w
 10885                           
 10886                           ; Switch size 1, requested type "space"
 10887                           ; Number of cases is 2, Range of values is 0 to 1
 10888                           ; switch strategies available:
 10889                           ; Name         Instructions Cycles
 10890                           ; simple_byte            7     4 (average)
 10891                           ; direct_byte           10     6 (fixed)
 10892                           ; jumptable            260     6 (fixed)
 10893                           ;	Chosen strategy is simple_byte
 10894  16E2  3A00               	xorlw	0	; case 0
 10895  16E3  1903               	skipnz
 10896  16E4  2ED4               	goto	l4865
 10897  16E5  3A01               	xorlw	1	; case 1
 10898  16E6  1903               	skipnz
 10899  16E7  2EDB               	goto	l4869
 10900  16E8  2EDE               	goto	l4871
 10901  16E9  0008               	return
 10902  16EA                     __end_of_direction_message_task:	
 10903                           
 10904                           	psect	text27
 10905  082D                     __ptext27:	
 10906 ;; *************** function _button_task *****************
 10907 ;; Defined at:
 10908 ;;		line 222 in file "../src/main.c"
 10909 ;; Parameters:    Size  Location     Type
 10910 ;;  can_msg         1    wreg     PTR struct .
 10911 ;;		 -> can_send_message(14), 
 10912 ;; Auto vars:     Size  Location     Type
 10913 ;;  can_msg         1   31[BANK0 ] PTR struct .
 10914 ;;		 -> can_send_message(14), 
 10915 ;; Return value:  Size  Location     Type
 10916 ;;                  1    wreg      void 
 10917 ;; Registers used:
 10918 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10919 ;; Tracked objects:
 10920 ;;		On entry : 0/0
 10921 ;;		On exit  : 0/0
 10922 ;;		Unchanged: 0/0
 10923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10925 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10926 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10927 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10928 ;;Total ram usage:        9 bytes
 10929 ;; Hardware stack levels used:    1
 10930 ;; Hardware stack levels required when called:    7
 10931 ;; This function calls:
 10932 ;;		_Buttons_Update
 10933 ;; This function is called by:
 10934 ;;		_main
 10935 ;; This function uses a non-reentrant model
 10936 ;;
 10937                           
 10938                           
 10939                           ;psect for function _button_task
 10940  082D                     _button_task:	
 10941                           
 10942                           ;incstack = 0
 10943                           ; Regs used in _button_task: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10944                           ;button_task@can_msg stored from wreg
 10945  082D  0140               	movlb	0	; select bank0
 10946  082E  00BF               	movwf	button_task@can_msg
 10947                           
 10948                           ;main.c: 223: static TIMER_TICK button_tick = 0;
 10949                           ;main.c: 225: if( ( TIMER_TICK )( SYSTEM_tick - button_tick ) >= 10 ){
 10950  082F  0853               	movf	_SYSTEM_tick,w
 10951  0830  00B7               	movwf	??_button_task
 10952  0831  0854               	movf	_SYSTEM_tick+1,w
 10953  0832  00B8               	movwf	??_button_task+1
 10954  0833  0855               	movf	_SYSTEM_tick+2,w
 10955  0834  00B9               	movwf	??_button_task+2
 10956  0835  0856               	movf	_SYSTEM_tick+3,w
 10957  0836  00BA               	movwf	??_button_task+3
 10958  0837  0142               	movlb	2	; select bank2
 10959  0838  093D               	comf	button_task@button_tick^(0+256),w
 10960  0839  0140               	movlb	0	; select bank0
 10961  083A  00BB               	movwf	??_button_task+4
 10962  083B  0142               	movlb	2	; select bank2
 10963  083C  093E               	comf	(button_task@button_tick+1)^(0+256),w
 10964  083D  0140               	movlb	0	; select bank0
 10965  083E  00BC               	movwf	??_button_task+5
 10966  083F  0142               	movlb	2	; select bank2
 10967  0840  093F               	comf	(button_task@button_tick+2)^(0+256),w
 10968  0841  0140               	movlb	0	; select bank0
 10969  0842  00BD               	movwf	??_button_task+6
 10970  0843  0142               	movlb	2	; select bank2
 10971  0844  0940               	comf	(button_task@button_tick+3)^(0+256),w
 10972  0845  0140               	movlb	0	; select bank0
 10973  0846  00BE               	movwf	??_button_task+7
 10974  0847  0ABB               	incf	??_button_task+4,f
 10975  0848  1903               	skipnz
 10976  0849  0ABC               	incf	??_button_task+5,f
 10977  084A  1903               	skipnz
 10978  084B  0ABD               	incf	??_button_task+6,f
 10979  084C  1903               	skipnz
 10980  084D  0ABE               	incf	??_button_task+7,f
 10981  084E  083B               	movf	??_button_task+4,w
 10982  084F  07B7               	addwf	??_button_task,f
 10983  0850  083C               	movf	??_button_task+5,w
 10984  0851  3DB8               	addwfc	??_button_task+1,f
 10985  0852  083D               	movf	??_button_task+6,w
 10986  0853  3DB9               	addwfc	??_button_task+2,f
 10987  0854  083E               	movf	??_button_task+7,w
 10988  0855  3DBA               	addwfc	??_button_task+3,f
 10989  0856  083A               	movf	??_button_task+3,w
 10990  0857  1D03               	btfss	3,2
 10991  0858  2863               	goto	l4813
 10992  0859  0839               	movf	??_button_task+2,w
 10993  085A  1D03               	btfss	3,2
 10994  085B  2863               	goto	l4813
 10995  085C  0838               	movf	??_button_task+1,w
 10996  085D  1D03               	btfss	3,2
 10997  085E  2863               	goto	l4813
 10998  085F  300A               	movlw	10
 10999  0860  0237               	subwf	??_button_task,w
 11000  0861  1C03               	btfss	3,0
 11001  0862  0008               	return
 11002  0863                     l4813:	
 11003                           
 11004                           ;main.c: 226: button_tick = SYSTEM_tick;
 11005  0863  0856               	movf	_SYSTEM_tick+3,w
 11006  0864  0142               	movlb	2	; select bank2
 11007  0865  00C0               	movwf	(button_task@button_tick+3)^(0+256)
 11008  0866  0140               	movlb	0	; select bank0
 11009  0867  0855               	movf	_SYSTEM_tick+2,w
 11010  0868  0142               	movlb	2	; select bank2
 11011  0869  00BF               	movwf	(button_task@button_tick+2)^(0+256)
 11012  086A  0140               	movlb	0	; select bank0
 11013  086B  0854               	movf	_SYSTEM_tick+1,w
 11014  086C  0142               	movlb	2	; select bank2
 11015  086D  00BE               	movwf	(button_task@button_tick+1)^(0+256)
 11016  086E  0140               	movlb	0	; select bank0
 11017  086F  0853               	movf	_SYSTEM_tick,w
 11018  0870  0142               	movlb	2	; select bank2
 11019  0871  00BD               	movwf	button_task@button_tick^(0+256)
 11020                           
 11021                           ;main.c: 227: if(SW_row >= 5){
 11022  0872  3005               	movlw	5
 11023  0873  0140               	movlb	0	; select bank0
 11024  0874  0257               	subwf	_SW_row,w
 11025  0875  1803               	btfsc	3,0
 11026                           
 11027                           ;main.c: 228: SW_row = 0;
 11028  0876  01D7               	clrf	_SW_row
 11029                           
 11030                           ;main.c: 229: }
 11031                           ;main.c: 230: Buttons_Update(SW_row,can_msg);
 11032  0877  083F               	movf	button_task@can_msg,w
 11033  0878  00B7               	movwf	??_button_task
 11034  0879  0837               	movf	??_button_task,w
 11035  087A  00B4               	movwf	Buttons_Update@switch_state
 11036  087B  0857               	movf	_SW_row,w
 11037  087C  318E  268F         	fcall	_Buttons_Update
 11038                           
 11039                           ;main.c: 231: LATD = ( LATD & ~0b00011111U );
 11040  087E  0140               	movlb	0	; select bank0
 11041  087F  081B               	movf	27,w	;volatile
 11042  0880  39E0               	andlw	224
 11043  0881  009B               	movwf	27	;volatile
 11044                           
 11045                           ;main.c: 233: LATD |= SW_ROW_ARRAY[ SW_row ];
 11046  0882  0857               	movf	_SW_row,w
 11047  0883  3E69               	addlw	(low (_SW_ROW_ARRAY| (0+256)))& (0+255)
 11048  0884  0086               	movwf	6
 11049  0885  3001               	movlw	1	; select bank2/3
 11050  0886  0087               	movwf	7
 11051  0887  0801               	movf	1,w
 11052  0888  00B7               	movwf	??_button_task
 11053  0889  0837               	movf	??_button_task,w
 11054  088A  049B               	iorwf	27,f	;volatile
 11055                           
 11056                           ;main.c: 234: SW_row++;
 11057  088B  3001               	movlw	1
 11058  088C  00B7               	movwf	??_button_task
 11059  088D  0837               	movf	??_button_task,w
 11060  088E  07D7               	addwf	_SW_row,f
 11061  088F  0008               	return
 11062  0890                     __end_of_button_task:	
 11063                           
 11064                           	psect	text28
 11065  0E8F                     __ptext28:	
 11066 ;; *************** function _Buttons_Update *****************
 11067 ;; Defined at:
 11068 ;;		line 68 in file "../src/buttons.c"
 11069 ;; Parameters:    Size  Location     Type
 11070 ;;  SW_row          1    wreg     unsigned char 
 11071 ;;  switch_state    1   20[BANK0 ] PTR struct .
 11072 ;;		 -> can_send_message(14), 
 11073 ;; Auto vars:     Size  Location     Type
 11074 ;;  SW_row          1   22[BANK0 ] unsigned char 
 11075 ;; Return value:  Size  Location     Type
 11076 ;;                  1    wreg      void 
 11077 ;; Registers used:
 11078 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11079 ;; Tracked objects:
 11080 ;;		On entry : 0/0
 11081 ;;		On exit  : 0/0
 11082 ;;		Unchanged: 0/0
 11083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11084 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11085 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11086 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11087 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11088 ;;Total ram usage:        3 bytes
 11089 ;; Hardware stack levels used:    1
 11090 ;; Hardware stack levels required when called:    6
 11091 ;; This function calls:
 11092 ;;		_Button_Debounce
 11093 ;;		_Get_Settings_Lock_Status
 11094 ;; This function is called by:
 11095 ;;		_button_task
 11096 ;; This function uses a non-reentrant model
 11097 ;;
 11098                           
 11099                           
 11100                           ;psect for function _Buttons_Update
 11101  0E8F                     _Buttons_Update:	
 11102                           
 11103                           ;incstack = 0
 11104                           ; Regs used in _Buttons_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11105                           ;Buttons_Update@SW_row stored from wreg
 11106  0E8F  0140               	movlb	0	; select bank0
 11107  0E90  00B6               	movwf	Buttons_Update@SW_row
 11108                           
 11109                           ;buttons.c: 70: Button_Debounce();
 11110  0E91  3194  24B2  318E   	fcall	_Button_Debounce
 11111                           
 11112                           ;buttons.c: 74: switch(SW_row)
 11113  0E94  2FEA               	goto	l4305
 11114  0E95                     l4131:	
 11115                           ;buttons.c: 75: {
 11116                           ;buttons.c: 78: case 1:
 11117                           
 11118                           
 11119                           ;buttons.c: 79: if(!button_column_1)
 11120  0E95  0140               	movlb	0	; select bank0
 11121  0E96  085B               	movf	_button_column_1,w
 11122  0E97  1D03               	btfss	3,2
 11123  0E98  2EA0               	goto	l4137
 11124                           
 11125                           ;buttons.c: 80: {
 11126                           ;buttons.c: 81: EUSART_packet_data[EUSART_SETTINGS_CONTROL_BYTE] &= 0b11110000; EUSART_p
      +                          acket_data[EUSART_SETTINGS_CONTROL_BYTE] |= 0b00000001;
 11127  0E99  30F0               	movlw	240
 11128  0E9A  00B5               	movwf	??_Buttons_Update
 11129  0E9B  0835               	movf	??_Buttons_Update,w
 11130  0E9C  0141               	movlb	1	; select bank1
 11131  0E9D  05AB               	andwf	(_EUSART_packet_data^(0+128)+11),f
 11132  0E9E  142B               	bsf	(_EUSART_packet_data^(0+128)+11),0
 11133                           
 11134                           ;buttons.c: 82: }
 11135  0E9F  2FF6               	goto	l4307
 11136  0EA0                     l4137:	
 11137                           
 11138                           ;buttons.c: 83: else if(!button_column_2)
 11139  0EA0  0140               	movlb	0	; select bank0
 11140  0EA1  085A               	movf	_button_column_2,w
 11141  0EA2  1D03               	btfss	3,2
 11142  0EA3  2EAB               	goto	l4143
 11143                           
 11144                           ;buttons.c: 84: {
 11145                           ;buttons.c: 85: EUSART_packet_data[EUSART_SETTINGS_CONTROL_BYTE] &= 0b11110000; EUSART_p
      +                          acket_data[EUSART_SETTINGS_CONTROL_BYTE] |= 0b00000010;
 11146  0EA4  30F0               	movlw	240
 11147  0EA5  00B5               	movwf	??_Buttons_Update
 11148  0EA6  0835               	movf	??_Buttons_Update,w
 11149  0EA7  0141               	movlb	1	; select bank1
 11150  0EA8  05AB               	andwf	(_EUSART_packet_data^(0+128)+11),f
 11151  0EA9  14AB               	bsf	(_EUSART_packet_data^(0+128)+11),1
 11152                           
 11153                           ;buttons.c: 86: }
 11154  0EAA  2FF6               	goto	l4307
 11155  0EAB                     l4143:	
 11156                           
 11157                           ;buttons.c: 87: else if(!button_column_3)
 11158  0EAB  0140               	movlb	0	; select bank0
 11159  0EAC  0859               	movf	_button_column_3,w
 11160  0EAD  1D03               	btfss	3,2
 11161  0EAE  2EB6               	goto	l4149
 11162                           
 11163                           ;buttons.c: 88: {
 11164                           ;buttons.c: 89: EUSART_packet_data[EUSART_SETTINGS_CONTROL_BYTE] &= 0b11110000; EUSART_p
      +                          acket_data[EUSART_SETTINGS_CONTROL_BYTE] |= 0b00001000;
 11165  0EAF  30F0               	movlw	240
 11166  0EB0  00B5               	movwf	??_Buttons_Update
 11167  0EB1  0835               	movf	??_Buttons_Update,w
 11168  0EB2  0141               	movlb	1	; select bank1
 11169  0EB3  05AB               	andwf	(_EUSART_packet_data^(0+128)+11),f
 11170  0EB4  15AB               	bsf	(_EUSART_packet_data^(0+128)+11),3
 11171                           
 11172                           ;buttons.c: 90: }
 11173  0EB5  2FF6               	goto	l4307
 11174  0EB6                     l4149:	
 11175                           
 11176                           ;buttons.c: 91: else if(!button_column_4)
 11177  0EB6  0140               	movlb	0	; select bank0
 11178  0EB7  0858               	movf	_button_column_4,w
 11179  0EB8  1D03               	btfss	3,2
 11180  0EB9  2EC1               	goto	l4155
 11181                           
 11182                           ;buttons.c: 92: {
 11183                           ;buttons.c: 93: EUSART_packet_data[EUSART_SETTINGS_CONTROL_BYTE] &= 0b11110000; EUSART_p
      +                          acket_data[EUSART_SETTINGS_CONTROL_BYTE] |= 0b00000100;
 11184  0EBA  30F0               	movlw	240
 11185  0EBB  00B5               	movwf	??_Buttons_Update
 11186  0EBC  0835               	movf	??_Buttons_Update,w
 11187  0EBD  0141               	movlb	1	; select bank1
 11188  0EBE  05AB               	andwf	(_EUSART_packet_data^(0+128)+11),f
 11189  0EBF  152B               	bsf	(_EUSART_packet_data^(0+128)+11),2
 11190                           
 11191                           ;buttons.c: 94: }
 11192  0EC0  2FF6               	goto	l4307
 11193  0EC1                     l4155:	
 11194                           
 11195                           ;buttons.c: 95: else
 11196                           ;buttons.c: 96: {
 11197                           ;buttons.c: 97: EUSART_packet_data[EUSART_SETTINGS_CONTROL_BYTE] &= 0b11110000;
 11198  0EC1  30F0               	movlw	240
 11199  0EC2  0140               	movlb	0	; select bank0
 11200  0EC3  00B5               	movwf	??_Buttons_Update
 11201  0EC4  0835               	movf	??_Buttons_Update,w
 11202  0EC5  0141               	movlb	1	; select bank1
 11203  0EC6  05AB               	andwf	(_EUSART_packet_data^(0+128)+11),f
 11204                           
 11205                           ;buttons.c: 98: }
 11206                           ;buttons.c: 99: break;
 11207  0EC7  2FF6               	goto	l4307
 11208  0EC8                     l4157:	
 11209                           ;buttons.c: 100: case 2:
 11210                           
 11211                           
 11212                           ;buttons.c: 101: if(!EUSART_packet_data[EUSART_ERROR_BYTE_1] && !EUSART_packet_data[EUSA
      +                          RT_ERROR_BYTE_1] && !EUSART_packet_data[EUSART_ERROR_BYTE_1])
 11213  0EC8  0141               	movlb	1	; select bank1
 11214  0EC9  0821               	movf	(_EUSART_packet_data^(0+128)+1),w
 11215  0ECA  1D03               	btfss	3,2
 11216  0ECB  2F53               	goto	l803
 11217  0ECC  0821               	movf	(_EUSART_packet_data^(0+128)+1),w
 11218  0ECD  1D03               	btfss	3,2
 11219  0ECE  2F53               	goto	l803
 11220  0ECF  0821               	movf	(_EUSART_packet_data^(0+128)+1),w
 11221  0ED0  1D03               	btfss	3,2
 11222  0ED1  2F53               	goto	l803
 11223                           
 11224                           ;buttons.c: 102: {
 11225                           ;buttons.c: 103: if(!button_column_1)
 11226  0ED2  0140               	movlb	0	; select bank0
 11227  0ED3  085B               	movf	_button_column_1,w
 11228  0ED4  1D03               	btfss	3,2
 11229  0ED5  2F01               	goto	l4187
 11230                           
 11231                           ;buttons.c: 104: {
 11232                           ;buttons.c: 105: if(((EUSART_packet_data[EUSART_MACHINE_STATUS_BYTE] & 0b00000111)== EUS
      +                          ART_mode_status_settings)
 11233                           ;buttons.c: 106: && !(EUSART_packet_data[EUSART_SETTINGS_CONTROL_BYTE]&0b00110000))
 11234  0ED6  3007               	movlw	7
 11235  0ED7  0141               	movlb	1	; select bank1
 11236  0ED8  0524               	andwf	(_EUSART_packet_data^(0+128)+4),w
 11237  0ED9  0140               	movlb	0	; select bank0
 11238  0EDA  00B5               	movwf	??_Buttons_Update
 11239  0EDB  3002               	movlw	2
 11240  0EDC  0635               	xorwf	??_Buttons_Update,w
 11241  0EDD  1D03               	btfss	3,2
 11242  0EDE  2EE6               	goto	l4171
 11243  0EDF  0141               	movlb	1	; select bank1
 11244  0EE0  082B               	movf	(_EUSART_packet_data^(0+128)+11),w
 11245  0EE1  3930               	andlw	48
 11246  0EE2  1D03               	btfss	3,2
 11247  0EE3  2EE6               	goto	l4171
 11248                           
 11249                           ;buttons.c: 107: {
 11250                           ;buttons.c: 108: EUSART_packet_data[EUSART_SETTINGS_CONTROL_BYTE] |= 0b00010000;
 11251  0EE4  162B               	bsf	(_EUSART_packet_data^(0+128)+11),4
 11252                           
 11253                           ;buttons.c: 109: }
 11254  0EE5  2EEC               	goto	l4173
 11255  0EE6                     l4171:	
 11256                           
 11257                           ;buttons.c: 110: else
 11258                           ;buttons.c: 111: {
 11259                           ;buttons.c: 112: EUSART_packet_data[EUSART_SETTINGS_CONTROL_BYTE] &= 0b11001111;
 11260  0EE6  30CF               	movlw	207
 11261  0EE7  0140               	movlb	0	; select bank0
 11262  0EE8  00B5               	movwf	??_Buttons_Update
 11263  0EE9  0835               	movf	??_Buttons_Update,w
 11264  0EEA  0141               	movlb	1	; select bank1
 11265  0EEB  05AB               	andwf	(_EUSART_packet_data^(0+128)+11),f
 11266  0EEC                     l4173:	
 11267                           
 11268                           ;buttons.c: 113: }
 11269                           ;buttons.c: 114: EUSART_packet_data[EUSART_MACHINE_STATUS_BYTE] &= 0b11111000 & EUSART_m
      +                          ode_status_settings; EUSART_packet_data[EUSART_MACHINE_STATUS_BYTE] |= EUSART_mode_statu
      +                          s_settings;
 11270  0EEC  01A4               	clrf	(_EUSART_packet_data^(0+128)+4)
 11271  0EED  14A4               	bsf	(_EUSART_packet_data^(0+128)+4),1
 11272                           
 11273                           ;buttons.c: 115: LED_column_array[0] &= ~0x02;
 11274  0EEE  30FD               	movlw	253
 11275  0EEF  0140               	movlb	0	; select bank0
 11276  0EF0  00B5               	movwf	??_Buttons_Update
 11277  0EF1  0835               	movf	??_Buttons_Update,w
 11278  0EF2  05CE               	andwf	_LED_column_array,f
 11279                           
 11280                           ;buttons.c: 116: LED_column_array[4] &= ~0x10;
 11281  0EF3  30EF               	movlw	239
 11282  0EF4  00B5               	movwf	??_Buttons_Update
 11283  0EF5  0835               	movf	??_Buttons_Update,w
 11284  0EF6  05D2               	andwf	_LED_column_array+4,f
 11285                           
 11286                           ;buttons.c: 117: LED_column_array[0] &= ~0x04;
 11287  0EF7  30FB               	movlw	251
 11288  0EF8  00B5               	movwf	??_Buttons_Update
 11289  0EF9  0835               	movf	??_Buttons_Update,w
 11290  0EFA  05CE               	andwf	_LED_column_array,f
 11291                           
 11292                           ;buttons.c: 118: LED_column_array[1] &= ~0x01;
 11293  0EFB  30FE               	movlw	254
 11294  0EFC  00B5               	movwf	??_Buttons_Update
 11295  0EFD  0835               	movf	??_Buttons_Update,w
 11296  0EFE  05CF               	andwf	_LED_column_array+1,f
 11297                           
 11298                           ;buttons.c: 119: LED_column_array[0] |= 0x01;
 11299  0EFF  144E               	bsf	_LED_column_array,0
 11300                           
 11301                           ;buttons.c: 120: }
 11302  0F00  2FF6               	goto	l4307
 11303  0F01                     l4187:	
 11304                           
 11305                           ;buttons.c: 121: else if(!button_column_2 && !Get_Settings_Lock_Status())
 11306  0F01  085A               	movf	_button_column_2,w
 11307  0F02  1D03               	btfss	3,2
 11308  0F03  2F19               	goto	l4205
 11309  0F04  3190  2032  318E   	fcall	_Get_Settings_Lock_Status
 11310  0F07  3A00               	xorlw	0
 11311  0F08  1D03               	skipz
 11312  0F09  2F19               	goto	l4205
 11313                           
 11314                           ;buttons.c: 122: {
 11315                           ;buttons.c: 123: EUSART_packet_data[EUSART_MACHINE_STATUS_BYTE] &= 0b11111000 & EUSART_m
      +                          ode_status_transport; EUSART_packet_data[EUSART_MACHINE_STATUS_BYTE] |= EUSART_mode_stat
      +                          us_transport;
 11316  0F0A  0141               	movlb	1	; select bank1
 11317  0F0B  01A4               	clrf	(_EUSART_packet_data^(0+128)+4)
 11318  0F0C  3003               	movlw	3
 11319  0F0D  0140               	movlb	0	; select bank0
 11320  0F0E  00B5               	movwf	??_Buttons_Update
 11321  0F0F  0835               	movf	??_Buttons_Update,w
 11322  0F10  0141               	movlb	1	; select bank1
 11323  0F11  04A4               	iorwf	(_EUSART_packet_data^(0+128)+4),f
 11324                           
 11325                           ;buttons.c: 124: LED_column_array[0] |= 0x02;
 11326  0F12  0140               	movlb	0	; select bank0
 11327  0F13  14CE               	bsf	_LED_column_array,1
 11328                           
 11329                           ;buttons.c: 125: LED_column_array[4] &= ~0x10;
 11330  0F14  30EF               	movlw	239
 11331  0F15  00B5               	movwf	??_Buttons_Update
 11332  0F16  0835               	movf	??_Buttons_Update,w
 11333  0F17  05D2               	andwf	_LED_column_array+4,f
 11334  0F18  2F46               	goto	L9
 11335  0F19                     l4205:	
 11336                           ;buttons.c: 129: }
 11337                           
 11338                           ;buttons.c: 128: LED_column_array[0] &= ~0x01;
 11339                           
 11340                           ;buttons.c: 127: LED_column_array[1] &= ~0x01;
 11341                           
 11342                           ;buttons.c: 126: LED_column_array[0] &= ~0x04;
 11343                           
 11344                           
 11345                           ;buttons.c: 130: else if(!button_column_3 && !Get_Settings_Lock_Status())
 11346  0F19  0140               	movlb	0	; select bank0
 11347  0F1A  0859               	movf	_button_column_3,w
 11348  0F1B  1D03               	btfss	3,2
 11349  0F1C  2F2E               	goto	l4223
 11350  0F1D  3190  2032  318E   	fcall	_Get_Settings_Lock_Status
 11351  0F20  3A00               	xorlw	0
 11352  0F21  1D03               	skipz
 11353  0F22  2F2E               	goto	l4223
 11354                           
 11355                           ;buttons.c: 131: {
 11356                           ;buttons.c: 132: EUSART_packet_data[EUSART_MACHINE_STATUS_BYTE] &= 0b11111000 & EUSART_m
      +                          ode_status_deep; EUSART_packet_data[EUSART_MACHINE_STATUS_BYTE] |= EUSART_mode_status_de
      +                          ep;
 11357  0F23  0141               	movlb	1	; select bank1
 11358  0F24  01A4               	clrf	(_EUSART_packet_data^(0+128)+4)
 11359  0F25  1524               	bsf	(_EUSART_packet_data^(0+128)+4),2
 11360                           
 11361                           ;buttons.c: 133: LED_column_array[0] |= 0x04;
 11362  0F26  0140               	movlb	0	; select bank0
 11363  0F27  154E               	bsf	_LED_column_array,2
 11364                           
 11365                           ;buttons.c: 134: LED_column_array[4] &= ~0x10;
 11366  0F28  30EF               	movlw	239
 11367  0F29  00B5               	movwf	??_Buttons_Update
 11368  0F2A  0835               	movf	??_Buttons_Update,w
 11369  0F2B  05D2               	andwf	_LED_column_array+4,f
 11370                           
 11371                           ;buttons.c: 135: LED_column_array[0] &= ~0x02;
 11372  0F2C  30FD               	movlw	253
 11373  0F2D  2F47               	goto	L8
 11374  0F2E                     l4223:	
 11375                           ;buttons.c: 138: }
 11376                           
 11377                           ;buttons.c: 137: LED_column_array[0] &= ~0x01;
 11378                           
 11379                           ;buttons.c: 136: LED_column_array[1] &= ~0x01;
 11380                           
 11381                           
 11382                           ;buttons.c: 139: else if(!button_column_4 && !Get_Settings_Lock_Status())
 11383  0F2E  0140               	movlb	0	; select bank0
 11384  0F2F  0858               	movf	_button_column_4,w
 11385  0F30  1D03               	btfss	3,2
 11386  0F31  2FF6               	goto	l4307
 11387  0F32  3190  2032  318E   	fcall	_Get_Settings_Lock_Status
 11388  0F35  3A00               	xorlw	0
 11389  0F36  1D03               	skipz
 11390  0F37  2FF6               	goto	l4307
 11391                           
 11392                           ;buttons.c: 140: {
 11393                           ;buttons.c: 141: EUSART_packet_data[EUSART_MACHINE_STATUS_BYTE] &= 0b11111000 & EUSART_m
      +                          ode_status_eco; EUSART_packet_data[EUSART_MACHINE_STATUS_BYTE] |= EUSART_mode_status_eco
      +                          ;
 11394  0F38  0141               	movlb	1	; select bank1
 11395  0F39  01A4               	clrf	(_EUSART_packet_data^(0+128)+4)
 11396  0F3A  3005               	movlw	5
 11397  0F3B  0140               	movlb	0	; select bank0
 11398  0F3C  00B5               	movwf	??_Buttons_Update
 11399  0F3D  0835               	movf	??_Buttons_Update,w
 11400  0F3E  0141               	movlb	1	; select bank1
 11401  0F3F  04A4               	iorwf	(_EUSART_packet_data^(0+128)+4),f
 11402                           
 11403                           ;buttons.c: 142: LED_column_array[4] |= 0x10;
 11404  0F40  0140               	movlb	0	; select bank0
 11405  0F41  1652               	bsf	_LED_column_array+4,4
 11406                           
 11407                           ;buttons.c: 143: LED_column_array[0] &= ~0x02;
 11408  0F42  30FD               	movlw	253
 11409  0F43  00B5               	movwf	??_Buttons_Update
 11410  0F44  0835               	movf	??_Buttons_Update,w
 11411  0F45  05CE               	andwf	_LED_column_array,f
 11412  0F46                     L9:	
 11413                           
 11414                           ;buttons.c: 144: LED_column_array[0] &= ~0x04;
 11415  0F46  30FB               	movlw	251
 11416  0F47                     L8:	
 11417  0F47  00B5               	movwf	??_Buttons_Update
 11418  0F48  0835               	movf	??_Buttons_Update,w
 11419  0F49  05CE               	andwf	_LED_column_array,f
 11420                           
 11421                           ;buttons.c: 145: LED_column_array[1] &= ~0x01;
 11422  0F4A  30FE               	movlw	254
 11423  0F4B  00B5               	movwf	??_Buttons_Update
 11424  0F4C  0835               	movf	??_Buttons_Update,w
 11425  0F4D  05CF               	andwf	_LED_column_array+1,f
 11426                           
 11427                           ;buttons.c: 146: LED_column_array[0] &= ~0x01;
 11428  0F4E  30FE               	movlw	254
 11429  0F4F  00B5               	movwf	??_Buttons_Update
 11430  0F50  0835               	movf	??_Buttons_Update,w
 11431  0F51  05CE               	andwf	_LED_column_array,f
 11432                           
 11433                           ;buttons.c: 147: }
 11434                           ;buttons.c: 148: }
 11435  0F52  2FF6               	goto	l4307
 11436  0F53                     l803:	
 11437                           
 11438                           ;buttons.c: 149: else
 11439                           ;buttons.c: 150: {
 11440                           ;buttons.c: 151: LED_column_array[4] |= 0x10;
 11441  0F53  0140               	movlb	0	; select bank0
 11442  0F54  1652               	bsf	_LED_column_array+4,4
 11443                           
 11444                           ;buttons.c: 152: LED_column_array[0] |= 0x02;
 11445  0F55  14CE               	bsf	_LED_column_array,1
 11446                           
 11447                           ;buttons.c: 153: LED_column_array[0] |= 0x04;
 11448  0F56  154E               	bsf	_LED_column_array,2
 11449                           
 11450                           ;buttons.c: 154: LED_column_array[1] |= 0x01;
 11451  0F57  144F               	bsf	_LED_column_array+1,0
 11452                           
 11453                           ;buttons.c: 155: LED_column_array[0] |= 0x01;
 11454  0F58  144E               	bsf	_LED_column_array,0
 11455                           
 11456                           ;buttons.c: 156: LED_column_array[1] &= ~0x02;
 11457  0F59  30FD               	movlw	253
 11458  0F5A  00B5               	movwf	??_Buttons_Update
 11459  0F5B  0835               	movf	??_Buttons_Update,w
 11460  0F5C  05CF               	andwf	_LED_column_array+1,f
 11461                           
 11462                           ;buttons.c: 157: LED_column_array[1] &= ~0x04;
 11463  0F5D  30FB               	movlw	251
 11464  0F5E  00B5               	movwf	??_Buttons_Update
 11465  0F5F  0835               	movf	??_Buttons_Update,w
 11466  0F60  05CF               	andwf	_LED_column_array+1,f
 11467  0F61  2FE7               	goto	l4301
 11468  0F62                     l4245:	
 11469                           ;buttons.c: 161: case 3:
 11470                           
 11471                           ;buttons.c: 159: }
 11472                           ;buttons.c: 160: break;
 11473                           
 11474                           ;buttons.c: 158: machine_direction = 0x00;
 11475                           
 11476                           
 11477                           ;buttons.c: 162: if(!EUSART_packet_data[EUSART_ERROR_BYTE_1] && !EUSART_packet_data[EUSA
      +                          RT_ERROR_BYTE_2] && !EUSART_packet_data[EUSART_ERROR_BYTE_3])
 11478  0F62  0141               	movlb	1	; select bank1
 11479  0F63  0821               	movf	(_EUSART_packet_data^(0+128)+1),w
 11480  0F64  1D03               	btfss	3,2
 11481  0F65  2F91               	goto	l815
 11482  0F66  0822               	movf	(_EUSART_packet_data^(0+128)+2),w
 11483  0F67  1D03               	btfss	3,2
 11484  0F68  2F91               	goto	l815
 11485  0F69  0823               	movf	(_EUSART_packet_data^(0+128)+3),w
 11486  0F6A  1D03               	btfss	3,2
 11487  0F6B  2F91               	goto	l815
 11488                           
 11489                           ;buttons.c: 164: {
 11490                           ;buttons.c: 165: if(!button_column_1 && !Get_Settings_Lock_Status())
 11491  0F6C  0140               	movlb	0	; select bank0
 11492  0F6D  085B               	movf	_button_column_1,w
 11493  0F6E  1D03               	btfss	3,2
 11494  0F6F  2F97               	goto	l4269
 11495  0F70  3190  2032  318E   	fcall	_Get_Settings_Lock_Status
 11496  0F73  3A00               	xorlw	0
 11497  0F74  1D03               	skipz
 11498  0F75  2F97               	goto	l4269
 11499                           
 11500                           ;buttons.c: 166: {
 11501                           ;buttons.c: 167: EUSART_packet_data[EUSART_MACHINE_STATUS_BYTE] &= 0b11111000 & EUSART_m
      +                          ode_status_accessory; EUSART_packet_data[EUSART_MACHINE_STATUS_BYTE] |= EUSART_mode_stat
      +                          us_accessory;
 11502  0F76  0141               	movlb	1	; select bank1
 11503  0F77  01A4               	clrf	(_EUSART_packet_data^(0+128)+4)
 11504  0F78  3006               	movlw	6
 11505  0F79  0140               	movlb	0	; select bank0
 11506  0F7A  00B5               	movwf	??_Buttons_Update
 11507  0F7B  0835               	movf	??_Buttons_Update,w
 11508  0F7C  0141               	movlb	1	; select bank1
 11509  0F7D  04A4               	iorwf	(_EUSART_packet_data^(0+128)+4),f
 11510                           
 11511                           ;buttons.c: 168: LED_column_array[4] &= ~0x10;
 11512  0F7E  30EF               	movlw	239
 11513  0F7F  0140               	movlb	0	; select bank0
 11514  0F80  00B5               	movwf	??_Buttons_Update
 11515  0F81  0835               	movf	??_Buttons_Update,w
 11516  0F82  05D2               	andwf	_LED_column_array+4,f
 11517                           
 11518                           ;buttons.c: 169: LED_column_array[0] &= ~0x02;
 11519  0F83  30FD               	movlw	253
 11520  0F84  00B5               	movwf	??_Buttons_Update
 11521  0F85  0835               	movf	??_Buttons_Update,w
 11522  0F86  05CE               	andwf	_LED_column_array,f
 11523                           
 11524                           ;buttons.c: 170: LED_column_array[0] &= ~0x04;
 11525  0F87  30FB               	movlw	251
 11526  0F88  00B5               	movwf	??_Buttons_Update
 11527  0F89  0835               	movf	??_Buttons_Update,w
 11528  0F8A  05CE               	andwf	_LED_column_array,f
 11529                           
 11530                           ;buttons.c: 171: LED_column_array[1] |= 0x01;
 11531  0F8B  144F               	bsf	_LED_column_array+1,0
 11532                           
 11533                           ;buttons.c: 172: LED_column_array[0] &= ~0x01;
 11534  0F8C  30FE               	movlw	254
 11535  0F8D  00B5               	movwf	??_Buttons_Update
 11536  0F8E  0835               	movf	??_Buttons_Update,w
 11537  0F8F  05CE               	andwf	_LED_column_array,f
 11538                           
 11539                           ;buttons.c: 173: }
 11540                           ;buttons.c: 174: }
 11541  0F90  2F97               	goto	l4269
 11542  0F91                     l815:	
 11543                           
 11544                           ;buttons.c: 175: else
 11545                           ;buttons.c: 176: {
 11546                           ;buttons.c: 177: LED_column_array[4] |= 0x10;
 11547  0F91  0140               	movlb	0	; select bank0
 11548  0F92  1652               	bsf	_LED_column_array+4,4
 11549                           
 11550                           ;buttons.c: 178: LED_column_array[0] |= 0x02;
 11551  0F93  14CE               	bsf	_LED_column_array,1
 11552                           
 11553                           ;buttons.c: 179: LED_column_array[0] |= 0x04;
 11554  0F94  154E               	bsf	_LED_column_array,2
 11555                           
 11556                           ;buttons.c: 180: LED_column_array[1] |= 0x01;
 11557  0F95  144F               	bsf	_LED_column_array+1,0
 11558                           
 11559                           ;buttons.c: 181: LED_column_array[0] |= 0x01;
 11560  0F96  144E               	bsf	_LED_column_array,0
 11561  0F97                     l4269:	
 11562                           
 11563                           ;buttons.c: 182: }
 11564                           ;buttons.c: 183: if(!button_column_2)
 11565  0F97  0140               	movlb	0	; select bank0
 11566  0F98  085A               	movf	_button_column_2,w
 11567  0F99  1D03               	btfss	3,2
 11568  0F9A  2FA2               	goto	l4273
 11569                           
 11570                           ;buttons.c: 184: {
 11571                           ;buttons.c: 185: switch_state->buf[7] |= 0b10000000;
 11572  0F9B  0834               	movf	Buttons_Update@switch_state,w
 11573  0F9C  3E0D               	addlw	13
 11574  0F9D  0086               	movwf	6
 11575  0F9E  3001               	movlw	1	; select bank2/3
 11576  0F9F  0087               	movwf	7
 11577  0FA0  1781               	bsf	1,7
 11578                           
 11579                           ;buttons.c: 186: }
 11580  0FA1  2FAB               	goto	l4275
 11581  0FA2                     l4273:	
 11582                           
 11583                           ;buttons.c: 187: else
 11584                           ;buttons.c: 188: {
 11585                           ;buttons.c: 189: switch_state->buf[7] &= ~0b10000000;
 11586  0FA2  307F               	movlw	127
 11587  0FA3  00B5               	movwf	??_Buttons_Update
 11588  0FA4  0834               	movf	Buttons_Update@switch_state,w
 11589  0FA5  3E0D               	addlw	13
 11590  0FA6  0086               	movwf	6
 11591  0FA7  3001               	movlw	1	; select bank2/3
 11592  0FA8  0087               	movwf	7
 11593  0FA9  0835               	movf	??_Buttons_Update,w
 11594  0FAA  0581               	andwf	1,f
 11595  0FAB                     l4275:	
 11596                           
 11597                           ;buttons.c: 190: }
 11598                           ;buttons.c: 191: if(person_on_machine_flag && ((EUSART_packet_data[EUSART_MACHINE_STATUS
      +                          _BYTE] & 0b00000111) != EUSART_mode_status_accessory)
 11599                           ;buttons.c: 192: && ((EUSART_packet_data[EUSART_MACHINE_STATUS_BYTE] & 0b00000111) != EU
      +                          SART_mode_status_settings))
 11600  0FAB  0141               	movlb	1	; select bank1
 11601  0FAC  0854               	movf	_person_on_machine_flag^(0+128),w
 11602  0FAD  1903               	btfsc	3,2
 11603  0FAE  2FE7               	goto	l4301
 11604  0FAF  3007               	movlw	7
 11605  0FB0  0524               	andwf	(_EUSART_packet_data^(0+128)+4),w
 11606  0FB1  0140               	movlb	0	; select bank0
 11607  0FB2  00B5               	movwf	??_Buttons_Update
 11608  0FB3  3006               	movlw	6
 11609  0FB4  0635               	xorwf	??_Buttons_Update,w
 11610  0FB5  1903               	btfsc	3,2
 11611  0FB6  2FE7               	goto	l4301
 11612  0FB7  3007               	movlw	7
 11613  0FB8  0141               	movlb	1	; select bank1
 11614  0FB9  0524               	andwf	(_EUSART_packet_data^(0+128)+4),w
 11615  0FBA  0140               	movlb	0	; select bank0
 11616  0FBB  00B5               	movwf	??_Buttons_Update
 11617  0FBC  3002               	movlw	2
 11618  0FBD  0635               	xorwf	??_Buttons_Update,w
 11619  0FBE  1903               	btfsc	3,2
 11620  0FBF  2FE7               	goto	l4301
 11621                           
 11622                           ;buttons.c: 194: {
 11623                           ;buttons.c: 195: if(!button_column_3 && !Get_Settings_Lock_Status())
 11624  0FC0  0859               	movf	_button_column_3,w
 11625  0FC1  1D03               	btfss	3,2
 11626  0FC2  2FD1               	goto	l4291
 11627  0FC3  3190  2032  318E   	fcall	_Get_Settings_Lock_Status
 11628  0FC6  3A00               	xorlw	0
 11629  0FC7  1D03               	skipz
 11630  0FC8  2FD1               	goto	l4291
 11631                           
 11632                           ;buttons.c: 196: {
 11633                           ;buttons.c: 198: LED_column_array[1] &= ~0x04;
 11634  0FC9  30FB               	movlw	251
 11635  0FCA  0140               	movlb	0	; select bank0
 11636  0FCB  00B5               	movwf	??_Buttons_Update
 11637  0FCC  0835               	movf	??_Buttons_Update,w
 11638  0FCD  05CF               	andwf	_LED_column_array+1,f
 11639                           
 11640                           ;buttons.c: 199: LED_column_array[1] |= 0x02;
 11641  0FCE  14CF               	bsf	_LED_column_array+1,1
 11642                           
 11643                           ;buttons.c: 200: machine_direction = 0b00010000;
 11644  0FCF  3010               	movlw	16
 11645  0FD0  2FE2               	goto	L7
 11646  0FD1                     l4291:	
 11647                           ;buttons.c: 201: }
 11648                           
 11649                           
 11650                           ;buttons.c: 202: else if(!button_column_4 && !Get_Settings_Lock_Status())
 11651  0FD1  0140               	movlb	0	; select bank0
 11652  0FD2  0858               	movf	_button_column_4,w
 11653  0FD3  1D03               	btfss	3,2
 11654  0FD4  2FF6               	goto	l4307
 11655  0FD5  3190  2032  318E   	fcall	_Get_Settings_Lock_Status
 11656  0FD8  3A00               	xorlw	0
 11657  0FD9  1D03               	skipz
 11658  0FDA  2FF6               	goto	l4307
 11659                           
 11660                           ;buttons.c: 203: {
 11661                           ;buttons.c: 205: LED_column_array[1] &= ~0x02;
 11662  0FDB  30FD               	movlw	253
 11663  0FDC  0140               	movlb	0	; select bank0
 11664  0FDD  00B5               	movwf	??_Buttons_Update
 11665  0FDE  0835               	movf	??_Buttons_Update,w
 11666  0FDF  05CF               	andwf	_LED_column_array+1,f
 11667                           
 11668                           ;buttons.c: 206: LED_column_array[1] |= 0x04;
 11669  0FE0  154F               	bsf	_LED_column_array+1,2
 11670                           
 11671                           ;buttons.c: 207: machine_direction = 0b00001000;
 11672  0FE1  3008               	movlw	8
 11673  0FE2                     L7:	
 11674  0FE2  00B5               	movwf	??_Buttons_Update
 11675  0FE3  0835               	movf	??_Buttons_Update,w
 11676  0FE4  0141               	movlb	1	; select bank1
 11677  0FE5  00D2               	movwf	_machine_direction^(0+128)
 11678                           
 11679                           ;buttons.c: 208: }
 11680                           ;buttons.c: 209: }
 11681  0FE6  2FF6               	goto	l4307
 11682  0FE7                     l4301:	
 11683                           
 11684                           ;buttons.c: 210: else
 11685                           ;buttons.c: 211: {
 11686                           ;buttons.c: 214: machine_direction = 0x00;
 11687  0FE7  0141               	movlb	1	; select bank1
 11688  0FE8  01D2               	clrf	_machine_direction^(0+128)
 11689                           
 11690                           ;buttons.c: 219: }
 11691                           
 11692                           ;buttons.c: 215: }
 11693                           ;buttons.c: 216: break;
 11694  0FE9  2FF6               	goto	l4307
 11695  0FEA                     l4305:	
 11696  0FEA  0140               	movlb	0	; select bank0
 11697  0FEB  0836               	movf	Buttons_Update@SW_row,w
 11698                           
 11699                           ; Switch size 1, requested type "space"
 11700                           ; Number of cases is 3, Range of values is 1 to 3
 11701                           ; switch strategies available:
 11702                           ; Name         Instructions Cycles
 11703                           ; simple_byte           10     6 (average)
 11704                           ; direct_byte           15     9 (fixed)
 11705                           ; jumptable            263     9 (fixed)
 11706                           ;	Chosen strategy is simple_byte
 11707  0FEC  3A01               	xorlw	1	; case 1
 11708  0FED  1903               	skipnz
 11709  0FEE  2E95               	goto	l4131
 11710  0FEF  3A03               	xorlw	3	; case 2
 11711  0FF0  1903               	skipnz
 11712  0FF1  2EC8               	goto	l4157
 11713  0FF2  3A01               	xorlw	1	; case 3
 11714  0FF3  1903               	skipnz
 11715  0FF4  2F62               	goto	l4245
 11716  0FF5  2FF6               	goto	l4307
 11717  0FF6                     l4307:	
 11718                           
 11719                           ;buttons.c: 220: button_column_1 = 0;
 11720  0FF6  0140               	movlb	0	; select bank0
 11721  0FF7  01DB               	clrf	_button_column_1
 11722                           
 11723                           ;buttons.c: 221: button_column_2 = 0;
 11724  0FF8  01DA               	clrf	_button_column_2
 11725                           
 11726                           ;buttons.c: 222: button_column_3 = 0;
 11727  0FF9  01D9               	clrf	_button_column_3
 11728                           
 11729                           ;buttons.c: 223: button_column_4 = 0;
 11730  0FFA  01D8               	clrf	_button_column_4
 11731                           
 11732                           ;buttons.c: 225: button_5 = 0;
 11733  0FFB  0141               	movlb	1	; select bank1
 11734  0FFC  01D7               	clrf	_button_5^(0+128)
 11735                           
 11736                           ;buttons.c: 226: button_6 = 0;
 11737  0FFD  01D6               	clrf	_button_6^(0+128)
 11738                           
 11739                           ;buttons.c: 227: button_7 = 0;
 11740  0FFE  01D5               	clrf	_button_7^(0+128)
 11741  0FFF  0008               	return
 11742  1000                     __end_of_Buttons_Update:	
 11743                           
 11744                           	psect	text29
 11745  1032                     __ptext29:	
 11746 ;; *************** function _Get_Settings_Lock_Status *****************
 11747 ;; Defined at:
 11748 ;;		line 302 in file "../src/EUSART.c"
 11749 ;; Parameters:    Size  Location     Type
 11750 ;;		None
 11751 ;; Auto vars:     Size  Location     Type
 11752 ;;		None
 11753 ;; Return value:  Size  Location     Type
 11754 ;;                  1    wreg      unsigned char 
 11755 ;; Registers used:
 11756 ;;		wreg, status,2
 11757 ;; Tracked objects:
 11758 ;;		On entry : 0/0
 11759 ;;		On exit  : 0/0
 11760 ;;		Unchanged: 0/0
 11761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11766 ;;Total ram usage:        0 bytes
 11767 ;; Hardware stack levels used:    1
 11768 ;; Hardware stack levels required when called:    5
 11769 ;; This function calls:
 11770 ;;		Nothing
 11771 ;; This function is called by:
 11772 ;;		_Buttons_Update
 11773 ;; This function uses a non-reentrant model
 11774 ;;
 11775                           
 11776                           
 11777                           ;psect for function _Get_Settings_Lock_Status
 11778  1032                     _Get_Settings_Lock_Status:	
 11779                           
 11780                           ;EUSART.c: 304: return (EUSART_packet_data[EUSART_SETTINGS_CONTROL_BYTE] & 0b10000000U);
 11781                           
 11782                           ;incstack = 0
 11783                           ; Regs used in _Get_Settings_Lock_Status: [wreg+status,2]
 11784  1032  0141               	movlb	1	; select bank1
 11785  1033  082B               	movf	(_EUSART_packet_data^(0+128)+11),w
 11786  1034  3980               	andlw	128
 11787  1035  0008               	return
 11788  1036                     __end_of_Get_Settings_Lock_Status:	
 11789                           
 11790                           	psect	text30
 11791  14B2                     __ptext30:	
 11792 ;; *************** function _Button_Debounce *****************
 11793 ;; Defined at:
 11794 ;;		line 234 in file "../src/buttons.c"
 11795 ;; Parameters:    Size  Location     Type
 11796 ;;		None
 11797 ;; Auto vars:     Size  Location     Type
 11798 ;;  i               2   18[BANK0 ] int 
 11799 ;; Return value:  Size  Location     Type
 11800 ;;                  1    wreg      void 
 11801 ;; Registers used:
 11802 ;;		wreg, status,2, status,0
 11803 ;; Tracked objects:
 11804 ;;		On entry : 0/0
 11805 ;;		On exit  : 0/0
 11806 ;;		Unchanged: 0/0
 11807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11809 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11810 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11811 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11812 ;;Total ram usage:        3 bytes
 11813 ;; Hardware stack levels used:    1
 11814 ;; Hardware stack levels required when called:    5
 11815 ;; This function calls:
 11816 ;;		Nothing
 11817 ;; This function is called by:
 11818 ;;		_Buttons_Update
 11819 ;; This function uses a non-reentrant model
 11820 ;;
 11821                           
 11822                           
 11823                           ;psect for function _Button_Debounce
 11824  14B2                     _Button_Debounce:	
 11825                           
 11826                           ;buttons.c: 236: for( int i = 0; i < 16; i++)
 11827                           
 11828                           ;incstack = 0
 11829                           ; Regs used in _Button_Debounce: [wreg+status,2+status,0]
 11830  14B2  0140               	movlb	0	; select bank0
 11831  14B3  01B2               	clrf	Button_Debounce@i
 11832  14B4  01B3               	clrf	Button_Debounce@i+1
 11833  14B5                     L10:	
 11834  14B5  0833               	movf	Button_Debounce@i+1,w
 11835  14B6  3A80               	xorlw	128
 11836  14B7  00B1               	movwf	??_Button_Debounce
 11837  14B8  3080               	movlw	128
 11838  14B9  0231               	subwf	??_Button_Debounce,w
 11839  14BA  1D03               	skipz
 11840  14BB  2CBE               	goto	u2615
 11841  14BC  3010               	movlw	16
 11842  14BD  0232               	subwf	Button_Debounce@i,w
 11843  14BE                     u2615:	
 11844  14BE  1803               	btfsc	3,0
 11845  14BF  0008               	return
 11846                           
 11847                           ;buttons.c: 237: {
 11848                           ;buttons.c: 238: button_column_1 = button_column_1 << 1;
 11849  14C0  0140               	movlb	0	; select bank0
 11850  14C1  355B               	lslf	_button_column_1,w
 11851  14C2  00B1               	movwf	??_Button_Debounce
 11852  14C3  0831               	movf	??_Button_Debounce,w
 11853  14C4  00DB               	movwf	_button_column_1
 11854                           
 11855                           ;buttons.c: 239: button_column_1 += (!PORTCbits.RC2);
 11856  14C5  1003               	clrc
 11857  14C6  1D0E               	btfss	14,2	;volatile
 11858  14C7  1403               	setc
 11859  14C8  3000               	movlw	0
 11860  14C9  3D09               	addwfc	9,w
 11861  14CA  00B1               	movwf	??_Button_Debounce
 11862  14CB  0831               	movf	??_Button_Debounce,w
 11863  14CC  07DB               	addwf	_button_column_1,f
 11864                           
 11865                           ;buttons.c: 240: button_column_2 = button_column_2 << 1;
 11866  14CD  355A               	lslf	_button_column_2,w
 11867  14CE  00B1               	movwf	??_Button_Debounce
 11868  14CF  0831               	movf	??_Button_Debounce,w
 11869  14D0  00DA               	movwf	_button_column_2
 11870                           
 11871                           ;buttons.c: 241: button_column_2 += (!PORTCbits.RC3);
 11872  14D1  1003               	clrc
 11873  14D2  1D8E               	btfss	14,3	;volatile
 11874  14D3  1403               	setc
 11875  14D4  3000               	movlw	0
 11876  14D5  3D09               	addwfc	9,w
 11877  14D6  00B1               	movwf	??_Button_Debounce
 11878  14D7  0831               	movf	??_Button_Debounce,w
 11879  14D8  07DA               	addwf	_button_column_2,f
 11880                           
 11881                           ;buttons.c: 242: button_column_3 = button_column_3 << 1;
 11882  14D9  3559               	lslf	_button_column_3,w
 11883  14DA  00B1               	movwf	??_Button_Debounce
 11884  14DB  0831               	movf	??_Button_Debounce,w
 11885  14DC  00D9               	movwf	_button_column_3
 11886                           
 11887                           ;buttons.c: 243: button_column_3 += (!PORTCbits.RC4);
 11888  14DD  1003               	clrc
 11889  14DE  1E0E               	btfss	14,4	;volatile
 11890  14DF  1403               	setc
 11891  14E0  3000               	movlw	0
 11892  14E1  3D09               	addwfc	9,w
 11893  14E2  00B1               	movwf	??_Button_Debounce
 11894  14E3  0831               	movf	??_Button_Debounce,w
 11895  14E4  07D9               	addwf	_button_column_3,f
 11896                           
 11897                           ;buttons.c: 244: button_column_4 = button_column_4 << 1;
 11898  14E5  3558               	lslf	_button_column_4,w
 11899  14E6  00B1               	movwf	??_Button_Debounce
 11900  14E7  0831               	movf	??_Button_Debounce,w
 11901  14E8  00D8               	movwf	_button_column_4
 11902                           
 11903                           ;buttons.c: 245: button_column_4 += (!PORTCbits.RC5);
 11904  14E9  1003               	clrc
 11905  14EA  1E8E               	btfss	14,5	;volatile
 11906  14EB  1403               	setc
 11907  14EC  3000               	movlw	0
 11908  14ED  3D09               	addwfc	9,w
 11909  14EE  00B1               	movwf	??_Button_Debounce
 11910  14EF  0831               	movf	??_Button_Debounce,w
 11911  14F0  07D8               	addwf	_button_column_4,f
 11912  14F1  3001               	movlw	1
 11913  14F2  07B2               	addwf	Button_Debounce@i,f
 11914  14F3  3000               	movlw	0
 11915  14F4  3DB3               	addwfc	Button_Debounce@i+1,f
 11916  14F5  2CB5               	goto	L10
 11917  14F6                     __end_of_Button_Debounce:	
 11918                           
 11919                           	psect	text31
 11920  14F6                     __ptext31:	
 11921 ;; *************** function _SYSTEM_Initialize *****************
 11922 ;; Defined at:
 11923 ;;		line 88 in file "../src/system.c"
 11924 ;; Parameters:    Size  Location     Type
 11925 ;;		None
 11926 ;; Auto vars:     Size  Location     Type
 11927 ;;		None
 11928 ;; Return value:  Size  Location     Type
 11929 ;;                  1    wreg      void 
 11930 ;; Registers used:
 11931 ;;		wreg, status,2
 11932 ;; Tracked objects:
 11933 ;;		On entry : 0/0
 11934 ;;		On exit  : 0/0
 11935 ;;		Unchanged: 0/0
 11936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11941 ;;Total ram usage:        0 bytes
 11942 ;; Hardware stack levels used:    1
 11943 ;; Hardware stack levels required when called:    5
 11944 ;; This function calls:
 11945 ;;		Nothing
 11946 ;; This function is called by:
 11947 ;;		_main
 11948 ;; This function uses a non-reentrant model
 11949 ;;
 11950                           
 11951                           
 11952                           ;psect for function _SYSTEM_Initialize
 11953  14F6                     _SYSTEM_Initialize:	
 11954                           
 11955                           ;system.c: 92: INTCONbits.GIE = 0;
 11956                           
 11957                           ;incstack = 0
 11958                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2]
 11959  14F6  138B               	bcf	11,7	;volatile
 11960                           
 11961                           ;system.c: 93: INTCONbits.PEIE = 0;
 11962  14F7  130B               	bcf	11,6	;volatile
 11963                           
 11964                           ;system.c: 101: LATA = 0x80;
 11965  14F8  3080               	movlw	128
 11966  14F9  0140               	movlb	0	; select bank0
 11967  14FA  0098               	movwf	24	;volatile
 11968                           
 11969                           ;system.c: 102: ANSELA = 0;
 11970  14FB  017E               	movlb	62	; select bank62
 11971  14FC  01B8               	clrf	56	;volatile
 11972                           
 11973                           ;system.c: 103: TRISA = 0;
 11974  14FD  0140               	movlb	0	; select bank0
 11975  14FE  0192               	clrf	18	;volatile
 11976                           
 11977                           ;system.c: 108: ANSELB = 0;
 11978  14FF  017E               	movlb	62	; select bank62
 11979  1500  01C3               	clrf	67	;volatile
 11980                           
 11981                           ;system.c: 109: LATB = 0B00000001;
 11982  1501  3001               	movlw	1
 11983  1502  0140               	movlb	0	; select bank0
 11984  1503  0099               	movwf	25	;volatile
 11985                           
 11986                           ;system.c: 110: TRISB = 0B00000100;
 11987  1504  3004               	movlw	4
 11988  1505  0093               	movwf	19	;volatile
 11989                           
 11990                           ;system.c: 111: WPUB = 0x1;
 11991  1506  3001               	movlw	1
 11992  1507  017E               	movlb	62	; select bank62
 11993  1508  00C4               	movwf	68	;volatile
 11994                           
 11995                           ;system.c: 118: ANSELC = 0;
 11996  1509  01CE               	clrf	78	;volatile
 11997                           
 11998                           ;system.c: 119: LATC = 0;
 11999  150A  0140               	movlb	0	; select bank0
 12000  150B  019A               	clrf	26	;volatile
 12001                           
 12002                           ;system.c: 120: TRISC = 0B10111111;
 12003  150C  30BF               	movlw	191
 12004  150D  0094               	movwf	20	;volatile
 12005                           
 12006                           ;system.c: 121: WPUC = 0x1;
 12007  150E  3001               	movlw	1
 12008  150F  017E               	movlb	62	; select bank62
 12009  1510  00CF               	movwf	79	;volatile
 12010                           
 12011                           ;system.c: 124: ANSELD = 0;
 12012  1511  01D9               	clrf	89	;volatile
 12013                           
 12014                           ;system.c: 125: LATD = 0;
 12015  1512  0140               	movlb	0	; select bank0
 12016  1513  019B               	clrf	27	;volatile
 12017                           
 12018                           ;system.c: 126: TRISD = 0B11100000;
 12019  1514  30E0               	movlw	224
 12020  1515  0095               	movwf	21	;volatile
 12021                           
 12022                           ;system.c: 129: ANSELE = 0;
 12023  1516  017E               	movlb	62	; select bank62
 12024  1517  01E4               	clrf	100	;volatile
 12025                           
 12026                           ;system.c: 130: LATE = 0b00000111;
 12027  1518  3007               	movlw	7
 12028  1519  0140               	movlb	0	; select bank0
 12029  151A  009C               	movwf	28	;volatile
 12030                           
 12031                           ;system.c: 131: TRISE = 0;
 12032  151B  0196               	clrf	22	;volatile
 12033                           
 12034                           ;system.c: 134: ANSELF = 0;
 12035  151C  017C               	movlb	60	; select bank60
 12036  151D  01D0               	clrf	80	;volatile
 12037                           
 12038                           ;system.c: 135: LATF = 0;
 12039  151E  0140               	movlb	0	; select bank0
 12040  151F  019D               	clrf	29	;volatile
 12041                           
 12042                           ;system.c: 136: TRISF = 0;
 12043  1520  0197               	clrf	23	;volatile
 12044                           
 12045                           ;system.c: 143: RX1DTPPS = 22;
 12046  1521  3016               	movlw	22
 12047  1522  017D               	movlb	61	; select bank61
 12048  1523  00CB               	movwf	75	;volatile
 12049                           
 12050                           ;system.c: 144: RC7PPS = 0x0F;
 12051  1524  300F               	movlw	15
 12052  1525  017E               	movlb	62	; select bank62
 12053  1526  00A7               	movwf	39	;volatile
 12054                           
 12055                           ;system.c: 149: SSP1DATPPS = 0XA;
 12056  1527  300A               	movlw	10
 12057  1528  017D               	movlb	61	; select bank61
 12058  1529  00C6               	movwf	70	;volatile
 12059                           
 12060                           ;system.c: 150: RB1PPS = 0X15;
 12061  152A  3015               	movlw	21
 12062  152B  017E               	movlb	62	; select bank62
 12063  152C  0099               	movwf	25	;volatile
 12064                           
 12065                           ;system.c: 151: RB3PPS = 0X16;
 12066  152D  3016               	movlw	22
 12067  152E  009B               	movwf	27	;volatile
 12068                           
 12069                           ;system.c: 153: PMD2 = 0B01100111;
 12070  152F  3067               	movlw	103
 12071  1530  014F               	movlb	15	; select bank15
 12072  1531  0098               	movwf	24	;volatile
 12073                           
 12074                           ;system.c: 154: PMD3 = 0B00111111;
 12075  1532  303F               	movlw	63
 12076  1533  0099               	movwf	25	;volatile
 12077                           
 12078                           ;system.c: 155: PMD4 = 0B10100001;
 12079  1534  30A1               	movlw	161
 12080  1535  009A               	movwf	26	;volatile
 12081                           
 12082                           ;system.c: 156: PMD5 = 0B00111110;
 12083  1536  303E               	movlw	62
 12084  1537  009B               	movwf	27	;volatile
 12085                           
 12086                           ;system.c: 164: T0CON1 = 0x43;
 12087  1538  3043               	movlw	67
 12088  1539  014B               	movlb	11	; select bank11
 12089  153A  009F               	movwf	31	;volatile
 12090                           
 12091                           ;system.c: 165: T0CON0 = 0x87;
 12092  153B  3087               	movlw	135
 12093  153C  009E               	movwf	30	;volatile
 12094                           
 12095                           ;system.c: 166: TMR0H = 0x7C;
 12096  153D  307C               	movlw	124
 12097  153E  009D               	movwf	29	;volatile
 12098                           
 12099                           ;system.c: 167: TMR0L = 0x00;
 12100  153F  019C               	clrf	28	;volatile
 12101  1540  0008               	return
 12102  1541                     __end_of_SYSTEM_Initialize:	
 12103                           
 12104                           	psect	text32
 12105  0801                     __ptext32:	
 12106 ;; *************** function _LED_Initialize *****************
 12107 ;; Defined at:
 12108 ;;		line 29 in file "../src/LED.c"
 12109 ;; Parameters:    Size  Location     Type
 12110 ;;		None
 12111 ;; Auto vars:     Size  Location     Type
 12112 ;;		None
 12113 ;; Return value:  Size  Location     Type
 12114 ;;                  1    wreg      void 
 12115 ;; Registers used:
 12116 ;;		wreg, status,2
 12117 ;; Tracked objects:
 12118 ;;		On entry : 0/0
 12119 ;;		On exit  : 0/0
 12120 ;;		Unchanged: 0/0
 12121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12124 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12125 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12126 ;;Total ram usage:        1 bytes
 12127 ;; Hardware stack levels used:    1
 12128 ;; Hardware stack levels required when called:    5
 12129 ;; This function calls:
 12130 ;;		Nothing
 12131 ;; This function is called by:
 12132 ;;		_main
 12133 ;; This function uses a non-reentrant model
 12134 ;;
 12135                           
 12136                           
 12137                           ;psect for function _LED_Initialize
 12138  0801                     _LED_Initialize:	
 12139                           
 12140                           ;LED.c: 32: ANSELE = 0;
 12141                           
 12142                           ;incstack = 0
 12143                           ; Regs used in _LED_Initialize: [wreg+status,2]
 12144  0801  017E               	movlb	62	; select bank62
 12145  0802  01E4               	clrf	100	;volatile
 12146                           
 12147                           ;LED.c: 33: LATE = 0b00000111;
 12148  0803  3007               	movlw	7
 12149  0804  0140               	movlb	0	; select bank0
 12150  0805  009C               	movwf	28	;volatile
 12151                           
 12152                           ;LED.c: 34: TRISE = 0;
 12153  0806  0196               	clrf	22	;volatile
 12154                           
 12155                           ;LED.c: 37: ANSELF = 0;
 12156  0807  017C               	movlb	60	; select bank60
 12157  0808  01D0               	clrf	80	;volatile
 12158                           
 12159                           ;LED.c: 38: LATF = 0;
 12160  0809  0140               	movlb	0	; select bank0
 12161  080A  019D               	clrf	29	;volatile
 12162                           
 12163                           ;LED.c: 39: TRISF = 0;
 12164  080B  0197               	clrf	23	;volatile
 12165                           
 12166                           ;LED.c: 55: LED_column_array[0] = 0x00;
 12167  080C  01CE               	clrf	_LED_column_array
 12168                           
 12169                           ;LED.c: 56: LED_column_array[1] = 0x00;
 12170  080D  01CF               	clrf	_LED_column_array+1
 12171                           
 12172                           ;LED.c: 57: LED_column_array[2] = 0x00;
 12173  080E  01D0               	clrf	_LED_column_array+2
 12174                           
 12175                           ;LED.c: 58: LED_column_array[3] = 0x00;
 12176  080F  01D1               	clrf	_LED_column_array+3
 12177                           
 12178                           ;LED.c: 59: LED_column_array[4] = 0x00;
 12179  0810  01D2               	clrf	_LED_column_array+4
 12180                           
 12181                           ;LED.c: 61: LED_row_array[0] = 0B00000001;
 12182  0811  0142               	movlb	2	; select bank2
 12183  0812  01A0               	clrf	_LED_row_array^(0+256)
 12184  0813  0AA0               	incf	_LED_row_array^(0+256),f
 12185                           
 12186                           ;LED.c: 62: LED_row_array[1] = 0B00000010;
 12187  0814  3002               	movlw	2
 12188  0815  0140               	movlb	0	; select bank0
 12189  0816  00B1               	movwf	??_LED_Initialize
 12190  0817  0831               	movf	??_LED_Initialize,w
 12191  0818  0142               	movlb	2	; select bank2
 12192  0819  00A1               	movwf	(_LED_row_array^(0+256)+1)
 12193                           
 12194                           ;LED.c: 63: LED_row_array[2] = 0B00000100;
 12195  081A  3004               	movlw	4
 12196  081B  0140               	movlb	0	; select bank0
 12197  081C  00B1               	movwf	??_LED_Initialize
 12198  081D  0831               	movf	??_LED_Initialize,w
 12199  081E  0142               	movlb	2	; select bank2
 12200  081F  00A2               	movwf	(_LED_row_array^(0+256)+2)
 12201                           
 12202                           ;LED.c: 64: LED_row_array[3] = 0B00001000;
 12203  0820  3008               	movlw	8
 12204  0821  0140               	movlb	0	; select bank0
 12205  0822  00B1               	movwf	??_LED_Initialize
 12206  0823  0831               	movf	??_LED_Initialize,w
 12207  0824  0142               	movlb	2	; select bank2
 12208  0825  00A3               	movwf	(_LED_row_array^(0+256)+3)
 12209                           
 12210                           ;LED.c: 65: LED_row_array[4] = 0B00010000;
 12211  0826  3010               	movlw	16
 12212  0827  0140               	movlb	0	; select bank0
 12213  0828  00B1               	movwf	??_LED_Initialize
 12214  0829  0831               	movf	??_LED_Initialize,w
 12215  082A  0142               	movlb	2	; select bank2
 12216  082B  00A4               	movwf	(_LED_row_array^(0+256)+4)
 12217  082C  0008               	return
 12218  082D                     __end_of_LED_Initialize:	
 12219                           ;LED.c: 66: return;
 12220                           
 12221                           
 12222                           	psect	text33
 12223  098B                     __ptext33:	
 12224 ;; *************** function _CAN_Initialize *****************
 12225 ;; Defined at:
 12226 ;;		line 375 in file "../src/CAN_SPI_PIC16.c"
 12227 ;; Parameters:    Size  Location     Type
 12228 ;;  pConfig         2   39[BANK0 ] PTR const void 
 12229 ;;		 -> _canConfig(32), 
 12230 ;; Auto vars:     Size  Location     Type
 12231 ;;  buf             5    0[BANK4 ] unsigned char [5]
 12232 ;;  p               2    8[BANK4 ] PTR struct .
 12233 ;;		 -> _canConfig(32), 
 12234 ;;  wait            2    5[BANK4 ] int 
 12235 ;;  temp8           1   10[BANK4 ] unsigned char 
 12236 ;;  bResult         1    7[BANK4 ] unsigned char 
 12237 ;; Return value:  Size  Location     Type
 12238 ;;                  1    wreg      unsigned char 
 12239 ;; Registers used:
 12240 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12241 ;; Tracked objects:
 12242 ;;		On entry : 0/0
 12243 ;;		On exit  : 0/0
 12244 ;;		Unchanged: 0/0
 12245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12246 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12247 ;;      Locals:         0       0       0       0       0      11       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12248 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12249 ;;      Totals:         0       3       0       0       0      11       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12250 ;;Total ram usage:       14 bytes
 12251 ;; Hardware stack levels used:    1
 12252 ;; Hardware stack levels required when called:    8
 12253 ;; This function calls:
 12254 ;;		_SPI1_Initialize
 12255 ;;		__Modify
 12256 ;;		__SetMode
 12257 ;;		__TxCommand
 12258 ;;		__Write
 12259 ;;		_memset
 12260 ;; This function is called by:
 12261 ;;		_main
 12262 ;; This function uses a non-reentrant model
 12263 ;;
 12264                           
 12265                           
 12266                           ;psect for function _CAN_Initialize
 12267  098B                     _CAN_Initialize:	
 12268                           
 12269                           ;CAN_SPI_PIC16.c: 377: bool bResult = 1;
 12270                           
 12271                           ;incstack = 0
 12272                           ; Regs used in _CAN_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12273  098B  0144               	movlb	4	; select bank4
 12274  098C  01C2               	clrf	CAN_Initialize@bResult^(0+512)
 12275  098D  0AC2               	incf	CAN_Initialize@bResult^(0+512),f
 12276                           
 12277                           ;CAN_SPI_PIC16.c: 378: uint8_t temp8;
 12278                           ;CAN_SPI_PIC16.c: 379: MCP2515_Config_t *p = (MCP2515_Config_t *)pConfig;
 12279  098E  0140               	movlb	0	; select bank0
 12280  098F  0848               	movf	CAN_Initialize@pConfig+1,w
 12281  0990  0144               	movlb	4	; select bank4
 12282  0991  00C4               	movwf	(CAN_Initialize@p+1)^(0+512)
 12283  0992  0140               	movlb	0	; select bank0
 12284  0993  0847               	movf	CAN_Initialize@pConfig,w
 12285  0994  0144               	movlb	4	; select bank4
 12286  0995  00C3               	movwf	CAN_Initialize@p^(0+512)
 12287                           
 12288                           ;CAN_SPI_PIC16.c: 381: CAN_rxMessageQ.m_getIdx = CAN_rxMessageQ.m_putIdx = 0;
 12289  0996  304C               	movlw	76
 12290  0997  0086               	movwf	6
 12291  0998  3026               	movlw	38
 12292  0999  0087               	movwf	7
 12293  099A  304C               	movlw	76
 12294  099B  0084               	movwf	4
 12295  099C  3026               	movlw	38
 12296  099D  0085               	movwf	5
 12297  099E  3101               	addfsr 0,1
 12298  099F  3000               	movlw	0
 12299  09A0  3F80               	movwi [0]fsr0
 12300  09A1  3FC0               	movwi [0]fsr1
 12301                           
 12302                           ;CAN_SPI_PIC16.c: 382: CAN_txMessageQ.m_getIdx = CAN_txMessageQ.m_putIdx = 0;
 12303  09A2  301E               	movlw	30
 12304  09A3  0086               	movwf	6
 12305  09A4  3027               	movlw	39
 12306  09A5  0087               	movwf	7
 12307  09A6  301E               	movlw	30
 12308  09A7  0084               	movwf	4
 12309  09A8  3027               	movlw	39
 12310  09A9  0085               	movwf	5
 12311  09AA  3101               	addfsr 0,1
 12312  09AB  3000               	movlw	0
 12313  09AC  3F80               	movwi [0]fsr0
 12314  09AD  3FC0               	movwi [0]fsr1
 12315                           
 12316                           ;CAN_SPI_PIC16.c: 385: memset( &MCP2515_diag, 0, sizeof( MCP2515_Diagnostics_t ) );
 12317  09AE  3000               	movlw	0
 12318  09AF  0140               	movlb	0	; select bank0
 12319  09B0  00B1               	movwf	memset@c
 12320  09B1  00B2               	movwf	memset@c+1
 12321  09B2  300C               	movlw	12
 12322  09B3  00B3               	movwf	memset@n
 12323  09B4  3000               	movlw	0
 12324  09B5  00B4               	movwf	memset@n+1
 12325  09B6  3045               	movlw	(low (_MCP2515_diag| (0+256)))& (0+255)
 12326  09B7  3191  21E9  3189   	fcall	_memset
 12327                           
 12328                           ;CAN_SPI_PIC16.c: 387: SPI1_Initialize();
 12329  09BA  3190  2043  3189   	fcall	_SPI1_Initialize
 12330                           
 12331                           ;CAN_SPI_PIC16.c: 390: LATBbits.LATB4 = 1;
 12332  09BD  0140               	movlb	0	; select bank0
 12333  09BE  1619               	bsf	25,4	;volatile
 12334                           
 12335                           ;CAN_SPI_PIC16.c: 391: LATBbits.LATB5 = 0;
 12336  09BF  1299               	bcf	25,5	;volatile
 12337                           
 12338                           ;CAN_SPI_PIC16.c: 394: _TxCommand( 0XC0, (0), 0 );
 12339  09C0  01B4               	clrf	__TxCommand@pBuf
 12340  09C1  01B5               	clrf	__TxCommand@count
 12341  09C2  30C0               	movlw	192
 12342  09C3  3190  20DA  3189   	fcall	__TxCommand
 12343                           
 12344                           ;CAN_SPI_PIC16.c: 398: int wait = 2;
 12345  09C6  3002               	movlw	2
 12346  09C7  0144               	movlb	4	; select bank4
 12347  09C8  00C0               	movwf	CAN_Initialize@wait^(0+512)
 12348  09C9  3000               	movlw	0
 12349  09CA  00C1               	movwf	(CAN_Initialize@wait^(0+512)+1)
 12350  09CB                     l254:	
 12351                           ;CAN_SPI_PIC16.c: 399: while( wait > 0 )
 12352                           
 12353  09CB  0144               	movlb	4	; select bank4
 12354  09CC  0841               	movf	(CAN_Initialize@wait+1)^(0+512),w
 12355  09CD  3A80               	xorlw	128
 12356  09CE  0140               	movlb	0	; select bank0
 12357  09CF  00C9               	movwf	??_CAN_Initialize
 12358  09D0  3080               	movlw	128
 12359  09D1  0249               	subwf	??_CAN_Initialize,w
 12360  09D2  1D03               	skipz
 12361  09D3  29D7               	goto	u4985
 12362  09D4  3001               	movlw	1
 12363  09D5  0144               	movlb	4	; select bank4
 12364  09D6  0240               	subwf	CAN_Initialize@wait^(0+512),w
 12365  09D7                     u4985:	
 12366  09D7  1C03               	btfss	3,0
 12367  09D8  29E4               	goto	l6057
 12368                           
 12369                           ;CAN_SPI_PIC16.c: 400: {
 12370                           ;CAN_SPI_PIC16.c: 401: if( PIR0bits.TMR0IF )
 12371  09D9  014E               	movlb	14	; select bank14
 12372  09DA  1E8C               	btfss	12,5	;volatile
 12373  09DB  29CB               	goto	l254
 12374                           
 12375                           ;CAN_SPI_PIC16.c: 402: {
 12376                           ;CAN_SPI_PIC16.c: 403: wait--;
 12377  09DC  30FF               	movlw	255
 12378  09DD  0144               	movlb	4	; select bank4
 12379  09DE  07C0               	addwf	CAN_Initialize@wait^(0+512),f
 12380  09DF  30FF               	movlw	255
 12381  09E0  3DC1               	addwfc	(CAN_Initialize@wait+1)^(0+512),f
 12382                           
 12383                           ;CAN_SPI_PIC16.c: 404: PIR0bits.TMR0IF = 0;
 12384  09E1  014E               	movlb	14	; select bank14
 12385  09E2  128C               	bcf	12,5	;volatile
 12386  09E3  29CB               	goto	l254
 12387  09E4                     l6057:	
 12388                           
 12389                           ;CAN_SPI_PIC16.c: 405: }
 12390                           ;CAN_SPI_PIC16.c: 406: }
 12391                           ;CAN_SPI_PIC16.c: 409: _Modify( 0X0F, (uint8_t)~0xE0, 0 );
 12392  09E4  301F               	movlw	31
 12393  09E5  0140               	movlb	0	; select bank0
 12394  09E6  00C9               	movwf	??_CAN_Initialize
 12395  09E7  0849               	movf	??_CAN_Initialize,w
 12396  09E8  00B2               	movwf	__Modify@mask
 12397  09E9  01B3               	clrf	__Modify@value
 12398  09EA  300F               	movlw	15
 12399  09EB  3191  214E  3189   	fcall	__Modify
 12400                           
 12401                           ;CAN_SPI_PIC16.c: 412: bResult = bResult & _SetMode( CANCTRL_REQOP_CONFIG );
 12402  09EE  3080               	movlw	128
 12403  09EF  3197  279E  3189   	fcall	__SetMode
 12404  09F2  0144               	movlb	4	; select bank4
 12405  09F3  0542               	andwf	CAN_Initialize@bResult^(0+512),w
 12406  09F4  0140               	movlb	0	; select bank0
 12407  09F5  00C9               	movwf	??_CAN_Initialize
 12408  09F6  0849               	movf	??_CAN_Initialize,w
 12409  09F7  0144               	movlb	4	; select bank4
 12410  09F8  00C2               	movwf	CAN_Initialize@bResult^(0+512)
 12411                           
 12412                           ;CAN_SPI_PIC16.c: 414: uint8_t buf[ 5 ];
 12413                           ;CAN_SPI_PIC16.c: 415: buf[ 0 ] = ( ( 3 - 1 ) );
 12414  09F9  3002               	movlw	2
 12415  09FA  0140               	movlb	0	; select bank0
 12416  09FB  00C9               	movwf	??_CAN_Initialize
 12417  09FC  0849               	movf	??_CAN_Initialize,w
 12418  09FD  0144               	movlb	4	; select bank4
 12419  09FE  00BB               	movwf	CAN_Initialize@buf^(0+512)
 12420                           
 12421                           ;CAN_SPI_PIC16.c: 416: buf[ 1 ] = ( 0x80 | 0X40 | ( ( 5 - 1 ) << 3 ) | ( 1 - 1 ) );
 12422  09FF  30E0               	movlw	224
 12423  0A00  0140               	movlb	0	; select bank0
 12424  0A01  00C9               	movwf	??_CAN_Initialize
 12425  0A02  0849               	movf	??_CAN_Initialize,w
 12426  0A03  0144               	movlb	4	; select bank4
 12427  0A04  00BC               	movwf	(CAN_Initialize@buf^(0+512)+1)
 12428                           
 12429                           ;CAN_SPI_PIC16.c: 417: buf[ 2 ] = ( 0X00 | ( 1 ) );
 12430  0A05  01BD               	clrf	(CAN_Initialize@buf^(0+512)+2)
 12431  0A06  0ABD               	incf	(CAN_Initialize@buf^(0+512)+2),f
 12432                           
 12433                           ;CAN_SPI_PIC16.c: 419: _Write( 0X28, buf, 3 );
 12434  0A07  303B               	movlw	low CAN_Initialize@buf
 12435  0A08  0140               	movlb	0	; select bank0
 12436  0A09  00B4               	movwf	__Write@pBuf
 12437  0A0A  3002               	movlw	high CAN_Initialize@buf
 12438  0A0B  00B5               	movwf	__Write@pBuf+1
 12439  0A0C  3003               	movlw	3
 12440  0A0D  00C9               	movwf	??_CAN_Initialize
 12441  0A0E  0849               	movf	??_CAN_Initialize,w
 12442  0A0F  00B6               	movwf	__Write@count
 12443  0A10  3028               	movlw	40
 12444  0A11  3191  21B4  3189   	fcall	__Write
 12445                           
 12446                           ;CAN_SPI_PIC16.c: 422: temp8 = 0;
 12447  0A14  0144               	movlb	4	; select bank4
 12448  0A15  01C5               	clrf	CAN_Initialize@temp8^(0+512)
 12449                           
 12450                           ;CAN_SPI_PIC16.c: 423: _Write( 0X70, &temp8, 1 );
 12451  0A16  3045               	movlw	low CAN_Initialize@temp8
 12452  0A17  0140               	movlb	0	; select bank0
 12453  0A18  00B4               	movwf	__Write@pBuf
 12454  0A19  3002               	movlw	high CAN_Initialize@temp8
 12455  0A1A  00B5               	movwf	__Write@pBuf+1
 12456  0A1B  01B6               	clrf	__Write@count
 12457  0A1C  0AB6               	incf	__Write@count,f
 12458  0A1D  3070               	movlw	112
 12459  0A1E  3191  21B4  3189   	fcall	__Write
 12460                           
 12461                           ;CAN_SPI_PIC16.c: 426: temp8 |= 0B00000100;
 12462  0A21  0144               	movlb	4	; select bank4
 12463  0A22  1545               	bsf	CAN_Initialize@temp8^(0+512),2
 12464                           
 12465                           ;CAN_SPI_PIC16.c: 427: _Write( 0X60, &temp8, 1 );
 12466  0A23  3045               	movlw	low CAN_Initialize@temp8
 12467  0A24  0140               	movlb	0	; select bank0
 12468  0A25  00B4               	movwf	__Write@pBuf
 12469  0A26  3002               	movlw	high CAN_Initialize@temp8
 12470  0A27  00B5               	movwf	__Write@pBuf+1
 12471  0A28  01B6               	clrf	__Write@count
 12472  0A29  0AB6               	incf	__Write@count,f
 12473  0A2A  3060               	movlw	96
 12474  0A2B  3191  21B4  3189   	fcall	__Write
 12475                           
 12476                           ;CAN_SPI_PIC16.c: 430: _Write( 0X20, (uint8_t *)p->masks, 2 * sizeof( uint32_t ) );
 12477  0A2E  0144               	movlb	4	; select bank4
 12478  0A2F  0844               	movf	(CAN_Initialize@p+1)^(0+512),w
 12479  0A30  0140               	movlb	0	; select bank0
 12480  0A31  00B5               	movwf	__Write@pBuf+1
 12481  0A32  0144               	movlb	4	; select bank4
 12482  0A33  0843               	movf	CAN_Initialize@p^(0+512),w
 12483  0A34  0140               	movlb	0	; select bank0
 12484  0A35  00B4               	movwf	__Write@pBuf
 12485  0A36  3008               	movlw	8
 12486  0A37  00C9               	movwf	??_CAN_Initialize
 12487  0A38  0849               	movf	??_CAN_Initialize,w
 12488  0A39  00B6               	movwf	__Write@count
 12489  0A3A  3020               	movlw	32
 12490  0A3B  3191  21B4  3189   	fcall	__Write
 12491                           
 12492                           ;CAN_SPI_PIC16.c: 433: _Write( 0X00, (uint8_t *)p->filters, 12 );
 12493  0A3E  0144               	movlb	4	; select bank4
 12494  0A3F  0843               	movf	CAN_Initialize@p^(0+512),w
 12495  0A40  3E08               	addlw	8
 12496  0A41  0140               	movlb	0	; select bank0
 12497  0A42  00B4               	movwf	__Write@pBuf
 12498  0A43  3000               	movlw	0
 12499  0A44  0144               	movlb	4	; select bank4
 12500  0A45  3D44               	addwfc	(CAN_Initialize@p+1)^(0+512),w
 12501  0A46  0140               	movlb	0	; select bank0
 12502  0A47  00B5               	movwf	__Write@pBuf+1
 12503  0A48  300C               	movlw	12
 12504  0A49  00C9               	movwf	??_CAN_Initialize
 12505  0A4A  0849               	movf	??_CAN_Initialize,w
 12506  0A4B  00B6               	movwf	__Write@count
 12507  0A4C  3000               	movlw	0
 12508  0A4D  3191  21B4  3189   	fcall	__Write
 12509                           
 12510                           ;CAN_SPI_PIC16.c: 434: _Write( 0X10, (uint8_t *)p->filters + 12, 12 );
 12511  0A50  0144               	movlb	4	; select bank4
 12512  0A51  0843               	movf	CAN_Initialize@p^(0+512),w
 12513  0A52  3E14               	addlw	20
 12514  0A53  0140               	movlb	0	; select bank0
 12515  0A54  00B4               	movwf	__Write@pBuf
 12516  0A55  3000               	movlw	0
 12517  0A56  0144               	movlb	4	; select bank4
 12518  0A57  3D44               	addwfc	(CAN_Initialize@p+1)^(0+512),w
 12519  0A58  0140               	movlb	0	; select bank0
 12520  0A59  00B5               	movwf	__Write@pBuf+1
 12521  0A5A  300C               	movlw	12
 12522  0A5B  00C9               	movwf	??_CAN_Initialize
 12523  0A5C  0849               	movf	??_CAN_Initialize,w
 12524  0A5D  00B6               	movwf	__Write@count
 12525  0A5E  3010               	movlw	16
 12526  0A5F  3191  21B4  3189   	fcall	__Write
 12527                           
 12528                           ;CAN_SPI_PIC16.c: 437: temp8 = 0;
 12529  0A62  0144               	movlb	4	; select bank4
 12530  0A63  01C5               	clrf	CAN_Initialize@temp8^(0+512)
 12531                           
 12532                           ;CAN_SPI_PIC16.c: 438: _Modify( 0X2CU, 0xFF, 0 );
 12533  0A64  30FF               	movlw	255
 12534  0A65  0140               	movlb	0	; select bank0
 12535  0A66  00C9               	movwf	??_CAN_Initialize
 12536  0A67  0849               	movf	??_CAN_Initialize,w
 12537  0A68  00B2               	movwf	__Modify@mask
 12538  0A69  01B3               	clrf	__Modify@value
 12539  0A6A  302C               	movlw	44
 12540  0A6B  3191  214E  3189   	fcall	__Modify
 12541                           
 12542                           ;CAN_SPI_PIC16.c: 441: temp8 = 0x01 | 0x02 | 0x20;
 12543  0A6E  3023               	movlw	35
 12544  0A6F  0140               	movlb	0	; select bank0
 12545  0A70  00C9               	movwf	??_CAN_Initialize
 12546  0A71  0849               	movf	??_CAN_Initialize,w
 12547  0A72  0144               	movlb	4	; select bank4
 12548  0A73  00C5               	movwf	CAN_Initialize@temp8^(0+512)
 12549                           
 12550                           ;CAN_SPI_PIC16.c: 445: temp8 |= 0x04;
 12551  0A74  1545               	bsf	CAN_Initialize@temp8^(0+512),2
 12552                           
 12553                           ;CAN_SPI_PIC16.c: 452: _Write( 0X2BU, &temp8, 1 );
 12554  0A75  3045               	movlw	low CAN_Initialize@temp8
 12555  0A76  0140               	movlb	0	; select bank0
 12556  0A77  00B4               	movwf	__Write@pBuf
 12557  0A78  3002               	movlw	high CAN_Initialize@temp8
 12558  0A79  00B5               	movwf	__Write@pBuf+1
 12559  0A7A  01B6               	clrf	__Write@count
 12560  0A7B  0AB6               	incf	__Write@count,f
 12561  0A7C  302B               	movlw	43
 12562  0A7D  3191  21B4  3189   	fcall	__Write
 12563                           
 12564                           ;CAN_SPI_PIC16.c: 455: bResult = bResult & _SetMode( CANCTRL_REQOP_NORMAL );
 12565  0A80  3000               	movlw	0
 12566  0A81  3197  279E         	fcall	__SetMode
 12567  0A83  0144               	movlb	4	; select bank4
 12568  0A84  0542               	andwf	CAN_Initialize@bResult^(0+512),w
 12569  0A85  0140               	movlb	0	; select bank0
 12570  0A86  00C9               	movwf	??_CAN_Initialize
 12571  0A87  0849               	movf	??_CAN_Initialize,w
 12572  0A88  0144               	movlb	4	; select bank4
 12573  0A89  00C2               	movwf	CAN_Initialize@bResult^(0+512)
 12574                           
 12575                           ;CAN_SPI_PIC16.c: 458: PIE0bits.IOCIE = 1;
 12576  0A8A  014E               	movlb	14	; select bank14
 12577  0A8B  1616               	bsf	22,4	;volatile
 12578  0A8C  0008               	return
 12579  0A8D                     __end_of_CAN_Initialize:	
 12580                           ;CAN_SPI_PIC16.c: 460: return bResult;
 12581                           ;	Return value of _CAN_Initialize is never used
 12582                           
 12583                           
 12584                           	psect	text34
 12585  11E9                     __ptext34:	
 12586 ;; *************** function _memset *****************
 12587 ;; Defined at:
 12588 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 12589 ;; Parameters:    Size  Location     Type
 12590 ;;  p1              1    wreg     PTR void 
 12591 ;;		 -> LED_COL(5), _enableInputState(3), _faultInputState(3), _extraSwitchState(3), 
 12592 ;;		 -> _switchStates(15), MCP2515_diag(12), 
 12593 ;;  c               2   17[BANK0 ] int 
 12594 ;;  n               2   19[BANK0 ] unsigned int 
 12595 ;; Auto vars:     Size  Location     Type
 12596 ;;  p1              1   23[BANK0 ] PTR void 
 12597 ;;		 -> LED_COL(5), _enableInputState(3), _faultInputState(3), _extraSwitchState(3), 
 12598 ;;		 -> _switchStates(15), MCP2515_diag(12), 
 12599 ;;  p               1   22[BANK0 ] PTR unsigned char 
 12600 ;;		 -> LED_COL(5), _enableInputState(3), _faultInputState(3), _extraSwitchState(3), 
 12601 ;;		 -> _switchStates(15), MCP2515_diag(12), 
 12602 ;; Return value:  Size  Location     Type
 12603 ;;                  1    wreg      PTR void 
 12604 ;; Registers used:
 12605 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12606 ;; Tracked objects:
 12607 ;;		On entry : 0/0
 12608 ;;		On exit  : 0/0
 12609 ;;		Unchanged: 0/0
 12610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12611 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12612 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12613 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12614 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12615 ;;Total ram usage:        7 bytes
 12616 ;; Hardware stack levels used:    1
 12617 ;; Hardware stack levels required when called:    5
 12618 ;; This function calls:
 12619 ;;		Nothing
 12620 ;; This function is called by:
 12621 ;;		_CAN_Initialize
 12622 ;;		__Wakeup
 12623 ;; This function uses a non-reentrant model
 12624 ;;
 12625                           
 12626                           
 12627                           ;psect for function _memset
 12628  11E9                     _memset:	
 12629                           
 12630                           ;incstack = 0
 12631                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 12632                           ;memset@p1 stored from wreg
 12633  11E9  0140               	movlb	0	; select bank0
 12634  11EA  00B7               	movwf	memset@p1
 12635  11EB  0837               	movf	memset@p1,w
 12636  11EC  00B5               	movwf	??_memset
 12637  11ED  0835               	movf	??_memset,w
 12638  11EE  00B6               	movwf	memset@p
 12639  11EF                     l5567:	
 12640  11EF  3001               	movlw	1
 12641  11F0  02B3               	subwf	memset@n,f
 12642  11F1  3000               	movlw	0
 12643  11F2  3BB4               	subwfb	memset@n+1,f
 12644  11F3  0A33               	incf	memset@n,w
 12645  11F4  1903               	btfsc	3,2
 12646  11F5  0A34               	incf	memset@n+1,w
 12647  11F6  1903               	btfsc	3,2
 12648  11F7  0008               	return
 12649  11F8  0831               	movf	memset@c,w
 12650  11F9  00B5               	movwf	??_memset
 12651  11FA  0836               	movf	memset@p,w
 12652  11FB  0086               	movwf	6
 12653  11FC  3001               	movlw	1	; select bank2/3
 12654  11FD  0087               	movwf	7
 12655  11FE  0835               	movf	??_memset,w
 12656  11FF  0081               	movwf	1
 12657  1200  3001               	movlw	1
 12658  1201  00B5               	movwf	??_memset
 12659  1202  0835               	movf	??_memset,w
 12660  1203  07B6               	addwf	memset@p,f
 12661  1204  29EF               	goto	l5567
 12662  1205                     __end_of_memset:	
 12663                           ;	Return value of _memset is never used
 12664                           
 12665                           
 12666                           	psect	text35
 12667  11B4                     __ptext35:	
 12668 ;; *************** function __Write *****************
 12669 ;; Defined at:
 12670 ;;		line 250 in file "../src/CAN_SPI_PIC16.c"
 12671 ;; Parameters:    Size  Location     Type
 12672 ;;  reg             1    wreg     unsigned char 
 12673 ;;  pBuf            2   20[BANK0 ] PTR unsigned char 
 12674 ;;		 -> _canConfig.filters(24), _canConfig(32), CAN_TxMailbox@buf(13), CAN_Initialize@temp8(1), 
 12675 ;;		 -> CAN_Initialize@buf(5), CAN_txMessageQ.m_entry(208), CAN_txMessageQ(210), 
 12676 ;;  count           1   22[BANK0 ] unsigned char 
 12677 ;; Auto vars:     Size  Location     Type
 12678 ;;  reg             1   24[BANK0 ] unsigned char 
 12679 ;; Return value:  Size  Location     Type
 12680 ;;                  1    wreg      void 
 12681 ;; Registers used:
 12682 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12683 ;; Tracked objects:
 12684 ;;		On entry : 0/0
 12685 ;;		On exit  : 0/0
 12686 ;;		Unchanged: 0/0
 12687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12688 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12689 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12690 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12691 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12692 ;;Total ram usage:        5 bytes
 12693 ;; Hardware stack levels used:    1
 12694 ;; Hardware stack levels required when called:    6
 12695 ;; This function calls:
 12696 ;;		_SPI1_Put
 12697 ;;		_SPI1_PutBuffer
 12698 ;; This function is called by:
 12699 ;;		__SendBuffer
 12700 ;;		_CAN_Initialize
 12701 ;; This function uses a non-reentrant model
 12702 ;;
 12703                           
 12704                           
 12705                           ;psect for function __Write
 12706  11B4                     __Write:	
 12707                           
 12708                           ;incstack = 0
 12709                           ; Regs used in __Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12710                           ;__Write@reg stored from wreg
 12711  11B4  0140               	movlb	0	; select bank0
 12712  11B5  00B8               	movwf	__Write@reg
 12713                           
 12714                           ;CAN_SPI_PIC16.c: 252: LATBbits.LATB4 = 0;
 12715  11B6  1219               	bcf	25,4	;volatile
 12716                           
 12717                           ;CAN_SPI_PIC16.c: 254: SPI1_Put( 2 );
 12718  11B7  3002               	movlw	2
 12719  11B8  3190  204A  3191   	fcall	_SPI1_Put
 12720                           
 12721                           ;CAN_SPI_PIC16.c: 255: SPI1_Put( reg );
 12722  11BB  0140               	movlb	0	; select bank0
 12723  11BC  0838               	movf	__Write@reg,w
 12724  11BD  3190  204A  3191   	fcall	_SPI1_Put
 12725                           
 12726                           ;CAN_SPI_PIC16.c: 256: SPI1_PutBuffer( pBuf, count );
 12727  11C0  0140               	movlb	0	; select bank0
 12728  11C1  0835               	movf	__Write@pBuf+1,w
 12729  11C2  00B2               	movwf	SPI1_PutBuffer@pBuf+1
 12730  11C3  0834               	movf	__Write@pBuf,w
 12731  11C4  00B1               	movwf	SPI1_PutBuffer@pBuf
 12732  11C5  0836               	movf	__Write@count,w
 12733  11C6  00B7               	movwf	??__Write
 12734  11C7  0837               	movf	??__Write,w
 12735  11C8  00B3               	movwf	SPI1_PutBuffer@count
 12736  11C9  3190  20EF         	fcall	_SPI1_PutBuffer
 12737                           
 12738                           ;CAN_SPI_PIC16.c: 258: LATBbits.LATB4 = 1;
 12739  11CB  0140               	movlb	0	; select bank0
 12740  11CC  1619               	bsf	25,4	;volatile
 12741  11CD  0008               	return
 12742  11CE                     __end_of__Write:	
 12743                           
 12744                           	psect	text36
 12745  10DA                     __ptext36:	
 12746 ;; *************** function __TxCommand *****************
 12747 ;; Defined at:
 12748 ;;		line 273 in file "../src/CAN_SPI_PIC16.c"
 12749 ;; Parameters:    Size  Location     Type
 12750 ;;  cmd             1    wreg     unsigned char 
 12751 ;;  pBuf            1   20[BANK0 ] PTR unsigned char 
 12752 ;;		 -> NULL(0), 
 12753 ;;  count           1   21[BANK0 ] unsigned char 
 12754 ;; Auto vars:     Size  Location     Type
 12755 ;;  cmd             1   23[BANK0 ] unsigned char 
 12756 ;; Return value:  Size  Location     Type
 12757 ;;                  1    wreg      void 
 12758 ;; Registers used:
 12759 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12760 ;; Tracked objects:
 12761 ;;		On entry : 0/0
 12762 ;;		On exit  : 0/0
 12763 ;;		Unchanged: 0/0
 12764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12765 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12766 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12767 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12768 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12769 ;;Total ram usage:        4 bytes
 12770 ;; Hardware stack levels used:    1
 12771 ;; Hardware stack levels required when called:    6
 12772 ;; This function calls:
 12773 ;;		_SPI1_Put
 12774 ;;		_SPI1_PutBuffer
 12775 ;; This function is called by:
 12776 ;;		_CAN_Initialize
 12777 ;; This function uses a non-reentrant model
 12778 ;;
 12779                           
 12780                           
 12781                           ;psect for function __TxCommand
 12782  10DA                     __TxCommand:	
 12783                           
 12784                           ;incstack = 0
 12785                           ; Regs used in __TxCommand: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12786                           ;__TxCommand@cmd stored from wreg
 12787  10DA  0140               	movlb	0	; select bank0
 12788  10DB  00B7               	movwf	__TxCommand@cmd
 12789                           
 12790                           ;CAN_SPI_PIC16.c: 275: LATBbits.LATB4 = 0;
 12791  10DC  1219               	bcf	25,4	;volatile
 12792                           
 12793                           ;CAN_SPI_PIC16.c: 277: SPI1_Put( cmd );
 12794  10DD  0837               	movf	__TxCommand@cmd,w
 12795  10DE  3190  204A  3190   	fcall	_SPI1_Put
 12796                           
 12797                           ;CAN_SPI_PIC16.c: 278: SPI1_PutBuffer( pBuf, count );
 12798  10E1  0140               	movlb	0	; select bank0
 12799  10E2  0834               	movf	__TxCommand@pBuf,w
 12800  10E3  00B1               	movwf	SPI1_PutBuffer@pBuf
 12801  10E4  3000               	movlw	0
 12802  10E5  00B2               	movwf	SPI1_PutBuffer@pBuf+1
 12803  10E6  0835               	movf	__TxCommand@count,w
 12804  10E7  00B6               	movwf	??__TxCommand
 12805  10E8  0836               	movf	??__TxCommand,w
 12806  10E9  00B3               	movwf	SPI1_PutBuffer@count
 12807  10EA  3190  20EF         	fcall	_SPI1_PutBuffer
 12808                           
 12809                           ;CAN_SPI_PIC16.c: 280: LATBbits.LATB4 = 1;
 12810  10EC  0140               	movlb	0	; select bank0
 12811  10ED  1619               	bsf	25,4	;volatile
 12812  10EE  0008               	return
 12813  10EF                     __end_of__TxCommand:	
 12814                           
 12815                           	psect	text37
 12816  10EF                     __ptext37:	
 12817 ;; *************** function _SPI1_PutBuffer *****************
 12818 ;; Defined at:
 12819 ;;		line 70 in file "../src/spi_pic16.c"
 12820 ;; Parameters:    Size  Location     Type
 12821 ;;  pBuf            2   17[BANK0 ] PTR unsigned char 
 12822 ;;		 -> _canConfig.filters(24), _canConfig(32), CAN_TxMailbox@buf(13), CAN_Initialize@temp8(1), 
 12823 ;;		 -> CAN_Initialize@buf(5), CAN_txMessageQ.m_entry(208), CAN_txMessageQ(210), NULL(0), 
 12824 ;;  count           1   19[BANK0 ] unsigned char 
 12825 ;; Auto vars:     Size  Location     Type
 12826 ;;		None
 12827 ;; Return value:  Size  Location     Type
 12828 ;;                  1    wreg      void 
 12829 ;; Registers used:
 12830 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 12831 ;; Tracked objects:
 12832 ;;		On entry : 0/0
 12833 ;;		On exit  : 0/0
 12834 ;;		Unchanged: 0/0
 12835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12836 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12839 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12840 ;;Total ram usage:        3 bytes
 12841 ;; Hardware stack levels used:    1
 12842 ;; Hardware stack levels required when called:    5
 12843 ;; This function calls:
 12844 ;;		Nothing
 12845 ;; This function is called by:
 12846 ;;		__Write
 12847 ;;		__TxCommand
 12848 ;; This function uses a non-reentrant model
 12849 ;;
 12850                           
 12851                           
 12852                           ;psect for function _SPI1_PutBuffer
 12853  10EF                     _SPI1_PutBuffer:	
 12854  10EF                     l5343:	
 12855                           ;spi_pic16.c: 72: while( count > 0 )
 12856                           
 12857                           ;incstack = 0
 12858                           ; Regs used in _SPI1_PutBuffer: [wreg-fsr0h+status,2+status,0+pclath]
 12859                           
 12860  10EF  0140               	movlb	0	; select bank0
 12861  10F0  0833               	movf	SPI1_PutBuffer@count,w
 12862  10F1  1903               	btfsc	3,2
 12863  10F2  0008               	return
 12864                           
 12865                           ;spi_pic16.c: 73: {
 12866                           ;spi_pic16.c: 74: count--;
 12867  10F3  3001               	movlw	1
 12868  10F4  0140               	movlb	0	; select bank0
 12869  10F5  02B3               	subwf	SPI1_PutBuffer@count,f
 12870                           
 12871                           ;spi_pic16.c: 75: SSP1BUF = *pBuf++;
 12872  10F6  0831               	movf	SPI1_PutBuffer@pBuf,w
 12873  10F7  0084               	movwf	4
 12874  10F8  0832               	movf	SPI1_PutBuffer@pBuf+1,w
 12875  10F9  0085               	movwf	5
 12876  10FA  0800               	movf	0,w	;code access
 12877  10FB  0143               	movlb	3	; select bank3
 12878  10FC  008C               	movwf	12	;volatile
 12879  10FD  3001               	movlw	1
 12880  10FE  0140               	movlb	0	; select bank0
 12881  10FF  07B1               	addwf	SPI1_PutBuffer@pBuf,f
 12882  1100  3000               	movlw	0
 12883  1101  3DB2               	addwfc	SPI1_PutBuffer@pBuf+1,f
 12884  1102                     l573:	
 12885                           ;spi_pic16.c: 77: ;
 12886                           
 12887                           ;spi_pic16.c: 76: while( SSP1STATbits.BF == 0 )
 12888                           
 12889  1102  0143               	movlb	3	; select bank3
 12890  1103  180F               	btfsc	15,0	;volatile
 12891  1104  28EF               	goto	l5343
 12892  1105  2902               	goto	l573
 12893  1106                     __end_of_SPI1_PutBuffer:	
 12894                           ;spi_pic16.c: 78: }
 12895                           ;spi_pic16.c: 79: return;
 12896                           
 12897                           
 12898                           	psect	text38
 12899  179E                     __ptext38:	
 12900 ;; *************** function __SetMode *****************
 12901 ;; Defined at:
 12902 ;;		line 340 in file "../src/CAN_SPI_PIC16.c"
 12903 ;; Parameters:    Size  Location     Type
 12904 ;;  mode            1    wreg     enum E66
 12905 ;; Auto vars:     Size  Location     Type
 12906 ;;  mode            1   37[BANK0 ] enum E66
 12907 ;;  timer           4   33[BANK0 ] unsigned long 
 12908 ;;  modeMatch       1   38[BANK0 ] unsigned char 
 12909 ;; Return value:  Size  Location     Type
 12910 ;;                  1    wreg      unsigned char 
 12911 ;; Registers used:
 12912 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12913 ;; Tracked objects:
 12914 ;;		On entry : 0/0
 12915 ;;		On exit  : 0/0
 12916 ;;		Unchanged: 0/0
 12917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12919 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12920 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12921 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12922 ;;Total ram usage:       14 bytes
 12923 ;; Hardware stack levels used:    1
 12924 ;; Hardware stack levels required when called:    7
 12925 ;; This function calls:
 12926 ;;		__Modify
 12927 ;;		__Read
 12928 ;; This function is called by:
 12929 ;;		_CAN_Initialize
 12930 ;;		_CAN_Sleep
 12931 ;;		_CAN_Wakeup
 12932 ;; This function uses a non-reentrant model
 12933 ;;
 12934                           
 12935                           
 12936                           ;psect for function __SetMode
 12937  179E                     __SetMode:	
 12938                           
 12939                           ;incstack = 0
 12940                           ; Regs used in __SetMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12941                           ;__SetMode@mode stored from wreg
 12942  179E  0140               	movlb	0	; select bank0
 12943  179F  00C5               	movwf	__SetMode@mode
 12944                           
 12945                           ;CAN_SPI_PIC16.c: 342: bool modeMatch = 0;
 12946  17A0  01C6               	clrf	__SetMode@modeMatch
 12947                           
 12948                           ;CAN_SPI_PIC16.c: 343: TIMER_TICK timer;
 12949                           ;CAN_SPI_PIC16.c: 345: _Modify( 0X0F, 0xE0, mode );
 12950  17A1  30E0               	movlw	224
 12951  17A2  00B9               	movwf	??__SetMode
 12952  17A3  0839               	movf	??__SetMode,w
 12953  17A4  00B2               	movwf	__Modify@mask
 12954  17A5  0845               	movf	__SetMode@mode,w
 12955  17A6  00BA               	movwf	??__SetMode+1
 12956  17A7  083A               	movf	??__SetMode+1,w
 12957  17A8  00B3               	movwf	__Modify@value
 12958  17A9  300F               	movlw	15
 12959  17AA  3191  214E  3197   	fcall	__Modify
 12960                           
 12961                           ;CAN_SPI_PIC16.c: 346: timer = SYSTEM_tick;
 12962  17AD  0140               	movlb	0	; select bank0
 12963  17AE  0856               	movf	_SYSTEM_tick+3,w
 12964  17AF  00C4               	movwf	__SetMode@timer+3
 12965  17B0  0855               	movf	_SYSTEM_tick+2,w
 12966  17B1  00C3               	movwf	__SetMode@timer+2
 12967  17B2  0854               	movf	_SYSTEM_tick+1,w
 12968  17B3  00C2               	movwf	__SetMode@timer+1
 12969  17B4  0853               	movf	_SYSTEM_tick,w
 12970  17B5  00C1               	movwf	__SetMode@timer
 12971  17B6                     l5375:	
 12972                           ;CAN_SPI_PIC16.c: 349: while( ( TIMER_TICK )( SYSTEM_tick - timer ) < ( 1000U / 1000U ) 
      +                          * 5 )
 12973                           
 12974  17B6  0853               	movf	_SYSTEM_tick,w
 12975  17B7  00B9               	movwf	??__SetMode
 12976  17B8  0854               	movf	_SYSTEM_tick+1,w
 12977  17B9  00BA               	movwf	??__SetMode+1
 12978  17BA  0855               	movf	_SYSTEM_tick+2,w
 12979  17BB  00BB               	movwf	??__SetMode+2
 12980  17BC  0856               	movf	_SYSTEM_tick+3,w
 12981  17BD  00BC               	movwf	??__SetMode+3
 12982  17BE  0941               	comf	__SetMode@timer,w
 12983  17BF  00BD               	movwf	??__SetMode+4
 12984  17C0  0942               	comf	__SetMode@timer+1,w
 12985  17C1  00BE               	movwf	??__SetMode+5
 12986  17C2  0943               	comf	__SetMode@timer+2,w
 12987  17C3  00BF               	movwf	??__SetMode+6
 12988  17C4  0944               	comf	__SetMode@timer+3,w
 12989  17C5  00C0               	movwf	??__SetMode+7
 12990  17C6  0ABD               	incf	??__SetMode+4,f
 12991  17C7  1903               	skipnz
 12992  17C8  0ABE               	incf	??__SetMode+5,f
 12993  17C9  1903               	skipnz
 12994  17CA  0ABF               	incf	??__SetMode+6,f
 12995  17CB  1903               	skipnz
 12996  17CC  0AC0               	incf	??__SetMode+7,f
 12997  17CD  083D               	movf	??__SetMode+4,w
 12998  17CE  07B9               	addwf	??__SetMode,f
 12999  17CF  083E               	movf	??__SetMode+5,w
 13000  17D0  3DBA               	addwfc	??__SetMode+1,f
 13001  17D1  083F               	movf	??__SetMode+6,w
 13002  17D2  3DBB               	addwfc	??__SetMode+2,f
 13003  17D3  0840               	movf	??__SetMode+7,w
 13004  17D4  3DBC               	addwfc	??__SetMode+3,f
 13005  17D5  083C               	movf	??__SetMode+3,w
 13006  17D6  1D03               	btfss	3,2
 13007  17D7  2FFE               	goto	l5377
 13008  17D8  083B               	movf	??__SetMode+2,w
 13009  17D9  1D03               	btfss	3,2
 13010  17DA  2FFE               	goto	l5377
 13011  17DB  083A               	movf	??__SetMode+1,w
 13012  17DC  1D03               	btfss	3,2
 13013  17DD  2FFE               	goto	l5377
 13014  17DE  3005               	movlw	5
 13015  17DF  0239               	subwf	??__SetMode,w
 13016  17E0  1803               	btfsc	3,0
 13017  17E1  2FFE               	goto	l5377
 13018                           
 13019                           ;CAN_SPI_PIC16.c: 350: {
 13020                           ;CAN_SPI_PIC16.c: 351: _Read( 0x0E, (uint8_t *)&_canMode, 1 );
 13021  17E2  305E               	movlw	low __canMode
 13022  17E3  00B4               	movwf	__Read@pBuf
 13023  17E4  3000               	movlw	high __canMode
 13024  17E5  00B5               	movwf	__Read@pBuf+1
 13025  17E6  01B6               	clrf	__Read@count
 13026  17E7  0AB6               	incf	__Read@count,f
 13027  17E8  300E               	movlw	14
 13028  17E9  3191  219A  3197   	fcall	__Read
 13029                           
 13030                           ;CAN_SPI_PIC16.c: 352: _canMode &= 0xE0;
 13031  17EC  30E0               	movlw	224
 13032  17ED  0140               	movlb	0	; select bank0
 13033  17EE  00B9               	movwf	??__SetMode
 13034  17EF  0839               	movf	??__SetMode,w
 13035  17F0  05DE               	andwf	__canMode,f
 13036                           
 13037                           ;CAN_SPI_PIC16.c: 354: modeMatch = ( _canMode == mode );
 13038  17F1  085E               	movf	__canMode,w
 13039  17F2  0645               	xorwf	__SetMode@mode,w
 13040  17F3  1D03               	btfss	3,2
 13041  17F4  2FF7               	goto	u4140
 13042  17F5  3001               	movlw	1
 13043  17F6  2FF8               	goto	u4150
 13044  17F7                     u4140:	
 13045  17F7  3000               	movlw	0
 13046  17F8                     u4150:	
 13047  17F8  00B9               	movwf	??__SetMode
 13048  17F9  0839               	movf	??__SetMode,w
 13049  17FA  00C6               	movwf	__SetMode@modeMatch
 13050                           
 13051                           ;CAN_SPI_PIC16.c: 356: if( modeMatch )
 13052  17FB  0846               	movf	__SetMode@modeMatch,w
 13053  17FC  1903               	btfsc	3,2
 13054  17FD  2FB6               	goto	l5375
 13055  17FE                     l5377:	
 13056                           ;CAN_SPI_PIC16.c: 357: {
 13057                           ;CAN_SPI_PIC16.c: 358: break;
 13058                           
 13059                           
 13060                           ;CAN_SPI_PIC16.c: 359: }
 13061                           ;CAN_SPI_PIC16.c: 360: }
 13062                           ;CAN_SPI_PIC16.c: 362: return modeMatch;
 13063  17FE  0846               	movf	__SetMode@modeMatch,w
 13064  17FF  0008               	return
 13065  1800                     __end_of__SetMode:	
 13066                           
 13067                           	psect	text39
 13068  119A                     __ptext39:	
 13069 ;; *************** function __Read *****************
 13070 ;; Defined at:
 13071 ;;		line 232 in file "../src/CAN_SPI_PIC16.c"
 13072 ;; Parameters:    Size  Location     Type
 13073 ;;  reg             1    wreg     unsigned char 
 13074 ;;  pBuf            2   20[BANK0 ] PTR unsigned char 
 13075 ;;		 -> CAN_isBusOff@_errFlags(1), MCP2515_ISR@_errFlags(1), MCP2515_ISR@_intFlags2(1), CAN_rxMessageQ.m_entry(208), 
 13076 ;;		 -> CAN_TxMailbox@bufStatus(1), CAN_rxMessageQ(210), _canMode(1), 
 13077 ;;  count           1   22[BANK0 ] unsigned char 
 13078 ;; Auto vars:     Size  Location     Type
 13079 ;;  reg             1   24[BANK0 ] unsigned char 
 13080 ;; Return value:  Size  Location     Type
 13081 ;;                  1    wreg      void 
 13082 ;; Registers used:
 13083 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13084 ;; Tracked objects:
 13085 ;;		On entry : 0/0
 13086 ;;		On exit  : 0/0
 13087 ;;		Unchanged: 0/0
 13088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13089 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13090 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13091 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13092 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13093 ;;Total ram usage:        5 bytes
 13094 ;; Hardware stack levels used:    1
 13095 ;; Hardware stack levels required when called:    6
 13096 ;; This function calls:
 13097 ;;		_SPI1_GetBuffer
 13098 ;;		_SPI1_Put
 13099 ;; This function is called by:
 13100 ;;		__SetMode
 13101 ;;		_CAN_TxMailbox
 13102 ;;		_CAN_isBusOff
 13103 ;; This function uses a non-reentrant model
 13104 ;;
 13105                           
 13106                           
 13107                           ;psect for function __Read
 13108  119A                     __Read:	
 13109                           
 13110                           ;incstack = 0
 13111                           ; Regs used in __Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13112                           ;__Read@reg stored from wreg
 13113  119A  0140               	movlb	0	; select bank0
 13114  119B  00B8               	movwf	__Read@reg
 13115                           
 13116                           ;CAN_SPI_PIC16.c: 234: LATBbits.LATB4 = 0;
 13117  119C  1219               	bcf	25,4	;volatile
 13118                           
 13119                           ;CAN_SPI_PIC16.c: 236: SPI1_Put( 3 );
 13120  119D  3003               	movlw	3
 13121  119E  3190  204A  3191   	fcall	_SPI1_Put
 13122                           
 13123                           ;CAN_SPI_PIC16.c: 237: SPI1_Put( reg );
 13124  11A1  0140               	movlb	0	; select bank0
 13125  11A2  0838               	movf	__Read@reg,w
 13126  11A3  3190  204A  3191   	fcall	_SPI1_Put
 13127                           
 13128                           ;CAN_SPI_PIC16.c: 238: SPI1_GetBuffer( pBuf, count );
 13129  11A6  0140               	movlb	0	; select bank0
 13130  11A7  0835               	movf	__Read@pBuf+1,w
 13131  11A8  00B2               	movwf	SPI1_GetBuffer@pBuf+1
 13132  11A9  0834               	movf	__Read@pBuf,w
 13133  11AA  00B1               	movwf	SPI1_GetBuffer@pBuf
 13134  11AB  0836               	movf	__Read@count,w
 13135  11AC  00B7               	movwf	??__Read
 13136  11AD  0837               	movf	??__Read,w
 13137  11AE  00B3               	movwf	SPI1_GetBuffer@count
 13138  11AF  3191  2180         	fcall	_SPI1_GetBuffer
 13139                           
 13140                           ;CAN_SPI_PIC16.c: 240: LATBbits.LATB4 = 1;
 13141  11B1  0140               	movlb	0	; select bank0
 13142  11B2  1619               	bsf	25,4	;volatile
 13143  11B3  0008               	return
 13144  11B4                     __end_of__Read:	
 13145                           
 13146                           	psect	text40
 13147  1180                     __ptext40:	
 13148 ;; *************** function _SPI1_GetBuffer *****************
 13149 ;; Defined at:
 13150 ;;		line 97 in file "../src/spi_pic16.c"
 13151 ;; Parameters:    Size  Location     Type
 13152 ;;  pBuf            2   17[BANK0 ] PTR unsigned char 
 13153 ;;		 -> CAN_isBusOff@_errFlags(1), MCP2515_ISR@_errFlags(1), MCP2515_ISR@_intFlags2(1), MCP2515_ISR@_intFlags(1), 
 13154 ;;		 -> CAN_rxMessageQ.m_entry(208), CAN_TxMailbox@bufStatus(1), CAN_rxMessageQ(210), _canMode(1), 
 13155 ;;  count           1   19[BANK0 ] unsigned char 
 13156 ;; Auto vars:     Size  Location     Type
 13157 ;;		None
 13158 ;; Return value:  Size  Location     Type
 13159 ;;                  1    wreg      void 
 13160 ;; Registers used:
 13161 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13162 ;; Tracked objects:
 13163 ;;		On entry : 0/0
 13164 ;;		On exit  : 0/0
 13165 ;;		Unchanged: 0/0
 13166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13167 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13170 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13171 ;;Total ram usage:        3 bytes
 13172 ;; Hardware stack levels used:    1
 13173 ;; Hardware stack levels required when called:    5
 13174 ;; This function calls:
 13175 ;;		Nothing
 13176 ;; This function is called by:
 13177 ;;		__Read
 13178 ;; This function uses a non-reentrant model
 13179 ;;
 13180                           
 13181                           
 13182                           ;psect for function _SPI1_GetBuffer
 13183  1180                     _SPI1_GetBuffer:	
 13184  1180                     l5325:	
 13185                           ;spi_pic16.c: 99: while( count > 0 )
 13186                           
 13187                           ;incstack = 0
 13188                           ; Regs used in _SPI1_GetBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
 13189                           
 13190  1180  0140               	movlb	0	; select bank0
 13191  1181  0833               	movf	SPI1_GetBuffer@count,w
 13192  1182  1903               	btfsc	3,2
 13193  1183  0008               	return
 13194                           
 13195                           ;spi_pic16.c: 100: {
 13196                           ;spi_pic16.c: 101: count--;
 13197  1184  3001               	movlw	1
 13198  1185  0140               	movlb	0	; select bank0
 13199  1186  02B3               	subwf	SPI1_GetBuffer@count,f
 13200                           
 13201                           ;spi_pic16.c: 102: SSP1BUF = 0xFF;
 13202  1187  30FF               	movlw	255
 13203  1188  0143               	movlb	3	; select bank3
 13204  1189  008C               	movwf	12	;volatile
 13205  118A                     l588:	
 13206                           ;spi_pic16.c: 104: ;
 13207                           
 13208                           ;spi_pic16.c: 103: while( SSP1STATbits.BF == 0 )
 13209                           
 13210  118A  1C0F               	btfss	15,0	;volatile
 13211  118B  298A               	goto	l588
 13212                           
 13213                           ;spi_pic16.c: 105: *pBuf++ = SSP1BUF;
 13214  118C  0140               	movlb	0	; select bank0
 13215  118D  0831               	movf	SPI1_GetBuffer@pBuf,w
 13216  118E  0086               	movwf	6
 13217  118F  0832               	movf	SPI1_GetBuffer@pBuf+1,w
 13218  1190  0087               	movwf	7
 13219  1191  0143               	movlb	3	; select bank3
 13220  1192  080C               	movf	12,w	;volatile
 13221  1193  0081               	movwf	1
 13222  1194  3001               	movlw	1
 13223  1195  0140               	movlb	0	; select bank0
 13224  1196  07B1               	addwf	SPI1_GetBuffer@pBuf,f
 13225  1197  3000               	movlw	0
 13226  1198  3DB2               	addwfc	SPI1_GetBuffer@pBuf+1,f
 13227  1199  2980               	goto	l5325
 13228  119A                     __end_of_SPI1_GetBuffer:	
 13229                           
 13230                           	psect	text41
 13231  114E                     __ptext41:	
 13232 ;; *************** function __Modify *****************
 13233 ;; Defined at:
 13234 ;;		line 261 in file "../src/CAN_SPI_PIC16.c"
 13235 ;; Parameters:    Size  Location     Type
 13236 ;;  reg             1    wreg     unsigned char 
 13237 ;;  mask            1   18[BANK0 ] unsigned char 
 13238 ;;  value           1   19[BANK0 ] unsigned char 
 13239 ;; Auto vars:     Size  Location     Type
 13240 ;;  reg             1   20[BANK0 ] unsigned char 
 13241 ;; Return value:  Size  Location     Type
 13242 ;;                  1    wreg      void 
 13243 ;; Registers used:
 13244 ;;		wreg, status,2, status,0, pclath, cstack
 13245 ;; Tracked objects:
 13246 ;;		On entry : 0/0
 13247 ;;		On exit  : 0/0
 13248 ;;		Unchanged: 0/0
 13249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13250 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13251 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13253 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13254 ;;Total ram usage:        3 bytes
 13255 ;; Hardware stack levels used:    1
 13256 ;; Hardware stack levels required when called:    6
 13257 ;; This function calls:
 13258 ;;		_SPI1_Put
 13259 ;; This function is called by:
 13260 ;;		__SendBuffer
 13261 ;;		__SetMode
 13262 ;;		_CAN_Initialize
 13263 ;; This function uses a non-reentrant model
 13264 ;;
 13265                           
 13266                           
 13267                           ;psect for function __Modify
 13268  114E                     __Modify:	
 13269                           
 13270                           ;incstack = 0
 13271                           ; Regs used in __Modify: [wreg+status,2+status,0+pclath+cstack]
 13272                           ;__Modify@reg stored from wreg
 13273  114E  0140               	movlb	0	; select bank0
 13274  114F  00B4               	movwf	__Modify@reg
 13275                           
 13276                           ;CAN_SPI_PIC16.c: 263: LATBbits.LATB4 = 0;
 13277  1150  1219               	bcf	25,4	;volatile
 13278                           
 13279                           ;CAN_SPI_PIC16.c: 265: SPI1_Put( 0X05 );
 13280  1151  3005               	movlw	5
 13281  1152  3190  204A  3191   	fcall	_SPI1_Put
 13282                           
 13283                           ;CAN_SPI_PIC16.c: 266: SPI1_Put( reg );
 13284  1155  0140               	movlb	0	; select bank0
 13285  1156  0834               	movf	__Modify@reg,w
 13286  1157  3190  204A  3191   	fcall	_SPI1_Put
 13287                           
 13288                           ;CAN_SPI_PIC16.c: 267: SPI1_Put( mask );
 13289  115A  0140               	movlb	0	; select bank0
 13290  115B  0832               	movf	__Modify@mask,w
 13291  115C  3190  204A  3191   	fcall	_SPI1_Put
 13292                           
 13293                           ;CAN_SPI_PIC16.c: 268: SPI1_Put( value );
 13294  115F  0140               	movlb	0	; select bank0
 13295  1160  0833               	movf	__Modify@value,w
 13296  1161  3190  204A         	fcall	_SPI1_Put
 13297                           
 13298                           ;CAN_SPI_PIC16.c: 270: LATBbits.LATB4 = 1;
 13299  1163  0140               	movlb	0	; select bank0
 13300  1164  1619               	bsf	25,4	;volatile
 13301  1165  0008               	return
 13302  1166                     __end_of__Modify:	
 13303                           
 13304                           	psect	text42
 13305  104A                     __ptext42:	
 13306 ;; *************** function _SPI1_Put *****************
 13307 ;; Defined at:
 13308 ;;		line 47 in file "../src/spi_pic16.c"
 13309 ;; Parameters:    Size  Location     Type
 13310 ;;  c               1    wreg     unsigned char 
 13311 ;; Auto vars:     Size  Location     Type
 13312 ;;  c               1   17[BANK0 ] unsigned char 
 13313 ;; Return value:  Size  Location     Type
 13314 ;;                  1    wreg      void 
 13315 ;; Registers used:
 13316 ;;		wreg
 13317 ;; Tracked objects:
 13318 ;;		On entry : 0/0
 13319 ;;		On exit  : 0/0
 13320 ;;		Unchanged: 0/0
 13321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13323 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13325 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13326 ;;Total ram usage:        1 bytes
 13327 ;; Hardware stack levels used:    1
 13328 ;; Hardware stack levels required when called:    5
 13329 ;; This function calls:
 13330 ;;		Nothing
 13331 ;; This function is called by:
 13332 ;;		__Read
 13333 ;;		__Write
 13334 ;;		__Modify
 13335 ;;		__TxCommand
 13336 ;; This function uses a non-reentrant model
 13337 ;;
 13338                           
 13339                           
 13340                           ;psect for function _SPI1_Put
 13341  104A                     _SPI1_Put:	
 13342                           
 13343                           ;incstack = 0
 13344                           ; Regs used in _SPI1_Put: [wreg]
 13345                           ;SPI1_Put@c stored from wreg
 13346  104A  0140               	movlb	0	; select bank0
 13347  104B  00B1               	movwf	SPI1_Put@c
 13348                           
 13349                           ;spi_pic16.c: 49: SSP1BUF = c;
 13350  104C  0831               	movf	SPI1_Put@c,w
 13351  104D  0143               	movlb	3	; select bank3
 13352  104E  008C               	movwf	12	;volatile
 13353  104F                     l565:	
 13354                           ;spi_pic16.c: 51: ;
 13355                           
 13356                           ;spi_pic16.c: 50: while( SSP1STATbits.BF == 0 )
 13357                           
 13358  104F  180F               	btfsc	15,0	;volatile
 13359  1050  0008               	return
 13360  1051  284F               	goto	l565
 13361  1052                     __end_of_SPI1_Put:	
 13362                           
 13363                           	psect	text43
 13364  1043                     __ptext43:	
 13365 ;; *************** function _SPI1_Initialize *****************
 13366 ;; Defined at:
 13367 ;;		line 34 in file "../src/spi_pic16.c"
 13368 ;; Parameters:    Size  Location     Type
 13369 ;;		None
 13370 ;; Auto vars:     Size  Location     Type
 13371 ;;		None
 13372 ;; Return value:  Size  Location     Type
 13373 ;;                  1    wreg      void 
 13374 ;; Registers used:
 13375 ;;		wreg, status,2
 13376 ;; Tracked objects:
 13377 ;;		On entry : 0/0
 13378 ;;		On exit  : 0/0
 13379 ;;		Unchanged: 0/0
 13380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13385 ;;Total ram usage:        0 bytes
 13386 ;; Hardware stack levels used:    1
 13387 ;; Hardware stack levels required when called:    5
 13388 ;; This function calls:
 13389 ;;		Nothing
 13390 ;; This function is called by:
 13391 ;;		_CAN_Initialize
 13392 ;; This function uses a non-reentrant model
 13393 ;;
 13394                           
 13395                           
 13396                           ;psect for function _SPI1_Initialize
 13397  1043                     _SPI1_Initialize:	
 13398                           
 13399                           ;spi_pic16.c: 36: SSP1CON1 = 0;
 13400                           
 13401                           ;incstack = 0
 13402                           ; Regs used in _SPI1_Initialize: [wreg+status,2]
 13403  1043  0143               	movlb	3	; select bank3
 13404  1044  0190               	clrf	16	;volatile
 13405                           
 13406                           ;spi_pic16.c: 37: SSP1STAT = 0B11000000;
 13407  1045  30C0               	movlw	192
 13408  1046  008F               	movwf	15	;volatile
 13409                           
 13410                           ;spi_pic16.c: 38: SSP1CON1 = 0B00100000;
 13411  1047  3020               	movlw	32
 13412  1048  0090               	movwf	16	;volatile
 13413  1049  0008               	return
 13414  104A                     __end_of_SPI1_Initialize:	
 13415                           
 13416                           	psect	text44
 13417  12B1                     __ptext44:	
 13418 ;; *************** function _Buttons_Initialize *****************
 13419 ;; Defined at:
 13420 ;;		line 31 in file "../src/buttons.c"
 13421 ;; Parameters:    Size  Location     Type
 13422 ;;		None
 13423 ;; Auto vars:     Size  Location     Type
 13424 ;;		None
 13425 ;; Return value:  Size  Location     Type
 13426 ;;                  1    wreg      void 
 13427 ;; Registers used:
 13428 ;;		wreg, status,2, status,0
 13429 ;; Tracked objects:
 13430 ;;		On entry : 0/0
 13431 ;;		On exit  : 0/0
 13432 ;;		Unchanged: 0/0
 13433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13438 ;;Total ram usage:        0 bytes
 13439 ;; Hardware stack levels used:    1
 13440 ;; Hardware stack levels required when called:    5
 13441 ;; This function calls:
 13442 ;;		Nothing
 13443 ;; This function is called by:
 13444 ;;		_main
 13445 ;; This function uses a non-reentrant model
 13446 ;;
 13447                           
 13448                           
 13449                           ;psect for function _Buttons_Initialize
 13450  12B1                     _Buttons_Initialize:	
 13451                           
 13452                           ;buttons.c: 33: person_on_machine_flag = 0;
 13453                           
 13454                           ;incstack = 0
 13455                           ; Regs used in _Buttons_Initialize: [wreg+status,2+status,0]
 13456  12B1  0141               	movlb	1	; select bank1
 13457  12B2  01D4               	clrf	_person_on_machine_flag^(0+128)
 13458                           
 13459                           ;buttons.c: 39: ANSELC = 0;
 13460  12B3  017E               	movlb	62	; select bank62
 13461  12B4  01CE               	clrf	78	;volatile
 13462                           
 13463                           ;buttons.c: 40: LATC = 0;
 13464  12B5  0140               	movlb	0	; select bank0
 13465  12B6  019A               	clrf	26	;volatile
 13466                           
 13467                           ;buttons.c: 41: TRISC = 0B10111111;
 13468  12B7  30BF               	movlw	191
 13469  12B8  0094               	movwf	20	;volatile
 13470                           
 13471                           ;buttons.c: 42: WPUC = 0x1;
 13472  12B9  3001               	movlw	1
 13473  12BA  017E               	movlb	62	; select bank62
 13474  12BB  00CF               	movwf	79	;volatile
 13475                           
 13476                           ;buttons.c: 45: ANSELD = 0;
 13477  12BC  01D9               	clrf	89	;volatile
 13478                           
 13479                           ;buttons.c: 46: LATD = 0;
 13480  12BD  0140               	movlb	0	; select bank0
 13481  12BE  019B               	clrf	27	;volatile
 13482                           
 13483                           ;buttons.c: 47: TRISD = 0B11100000;
 13484  12BF  30E0               	movlw	224
 13485  12C0  0095               	movwf	21	;volatile
 13486                           
 13487                           ;buttons.c: 50: IOCCN = 0b00111100;
 13488  12C1  303C               	movlw	60
 13489  12C2  017E               	movlb	62	; select bank62
 13490  12C3  00D4               	movwf	84	;volatile
 13491                           
 13492                           ;buttons.c: 53: T2CONbits.T2OUTPS = 0b1111;
 13493  12C4  300F               	movlw	15
 13494  12C5  0145               	movlb	5	; select bank5
 13495  12C6  048E               	iorwf	14,f	;volatile
 13496                           
 13497                           ;buttons.c: 54: T2CONbits.TMR2ON = 0;
 13498  12C7  138E               	bcf	14,7	;volatile
 13499                           
 13500                           ;buttons.c: 55: T2CONbits.T2CKPS = 0b10;
 13501  12C8  080E               	movf	14,w	;volatile
 13502  12C9  398F               	andlw	-113
 13503  12CA  3820               	iorlw	32
 13504  12CB  008E               	movwf	14	;volatile
 13505                           
 13506                           ;buttons.c: 56: PR2 = 0x96;
 13507  12CC  3096               	movlw	150
 13508  12CD  008D               	movwf	13	;volatile
 13509                           
 13510                           ;buttons.c: 58: TMR2IE = 1;
 13511  12CE  014E               	movlb	14	; select bank14
 13512  12CF  149A               	bsf	26,1	;volatile
 13513                           
 13514                           ;buttons.c: 59: TMR2IF = 0;
 13515  12D0  1090               	bcf	16,1	;volatile
 13516  12D1  0008               	return
 13517  12D2                     __end_of_Buttons_Initialize:	
 13518                           ;buttons.c: 61: return;
 13519                           
 13520                           
 13521                           	psect	intentry
 13522  0004                     __pintentry:	
 13523 ;; *************** function _tc_int *****************
 13524 ;; Defined at:
 13525 ;;		line 36 in file "../src/interrupts.c"
 13526 ;; Parameters:    Size  Location     Type
 13527 ;;		None
 13528 ;; Auto vars:     Size  Location     Type
 13529 ;;  changed         1   13[COMMON] unsigned char 
 13530 ;; Return value:  Size  Location     Type
 13531 ;;                  1    wreg      void 
 13532 ;; Registers used:
 13533 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13534 ;; Tracked objects:
 13535 ;;		On entry : 0/0
 13536 ;;		On exit  : 0/0
 13537 ;;		Unchanged: 0/0
 13538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13540 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13541 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13542 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13543 ;;Total ram usage:        3 bytes
 13544 ;; Hardware stack levels used:    1
 13545 ;; Hardware stack levels required when called:    4
 13546 ;; This function calls:
 13547 ;;		_EUSART_Receive_ISR
 13548 ;;		_EUSART_Transmit_ISR
 13549 ;;		_MCP2515_ISR
 13550 ;; This function is called by:
 13551 ;;		Interrupt level 1
 13552 ;; This function uses a non-reentrant model
 13553 ;;
 13554                           
 13555  0004                     _tc_int:	
 13556                           
 13557                           ;incstack = 0
 13558  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13559                           
 13560                           ; Regs used in _tc_int: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13561  0005  3180               	pagesel	$
 13562  0006  0140               	movlb	0	; select bank0
 13563  0007  087F               	movf	127,w
 13564  0008  00B0               	movwf	??_tc_int+1
 13565                           
 13566                           ;interrupts.c: 40: if( TMR1IF && TMR1IE )
 13567  0009  014E               	movlb	14	; select bank14
 13568  000A  1810               	btfsc	16,0	;volatile
 13569  000B  1C1A               	btfss	26,0	;volatile
 13570  000C  2812               	goto	i1l1152
 13571                           
 13572                           ;interrupts.c: 41: {
 13573                           ;interrupts.c: 42: EUSART_send_data_flag = 1;
 13574  000D  0141               	movlb	1	; select bank1
 13575  000E  01DA               	clrf	_EUSART_send_data_flag^(0+128)
 13576  000F  0ADA               	incf	_EUSART_send_data_flag^(0+128),f
 13577                           
 13578                           ;interrupts.c: 43: TMR1IF = 0;
 13579  0010  014E               	movlb	14	; select bank14
 13580  0011  1010               	bcf	16,0	;volatile
 13581  0012                     i1l1152:	
 13582                           
 13583                           ;interrupts.c: 44: }
 13584                           ;interrupts.c: 46: if( TX1IF && TX1IE )
 13585  0012  1A0F               	btfsc	15,4	;volatile
 13586  0013  1E19               	btfss	25,4	;volatile
 13587  0014  2818               	goto	i1l6337
 13588                           
 13589                           ;interrupts.c: 47: {
 13590                           ;interrupts.c: 48: EUSART_Transmit_ISR();
 13591  0015  3192  22D2  3180   	fcall	_EUSART_Transmit_ISR
 13592  0018                     i1l6337:	
 13593                           
 13594                           ;interrupts.c: 49: }
 13595                           ;interrupts.c: 52: if( RC1IF && RC1IE )
 13596  0018  014E               	movlb	14	; select bank14
 13597  0019  1A8F               	btfsc	15,5	;volatile
 13598  001A  1E99               	btfss	25,5	;volatile
 13599  001B  281F               	goto	i1l6343
 13600                           
 13601                           ;interrupts.c: 53: {
 13602                           ;interrupts.c: 54: EUSART_Receive_ISR();
 13603  001C  3193  2302  3180   	fcall	_EUSART_Receive_ISR
 13604  001F                     i1l6343:	
 13605                           
 13606                           ;interrupts.c: 55: }
 13607                           ;interrupts.c: 59: if(IOCIE && PIR0bits.IOCIF)
 13608  001F  014E               	movlb	14	; select bank14
 13609  0020  1A16               	btfsc	22,4	;volatile
 13610  0021  1E0C               	btfss	12,4	;volatile
 13611  0022  2852               	goto	i1l6369
 13612                           
 13613                           ;interrupts.c: 60: {
 13614                           ;interrupts.c: 63: uint8_t changed = IOCCF ^ 0xFFU;
 13615  0023  017E               	movlb	62	; select bank62
 13616  0024  0955               	comf	85,w
 13617  0025  0140               	movlb	0	; select bank0
 13618  0026  00AF               	movwf	??_tc_int
 13619  0027  082F               	movf	??_tc_int,w
 13620  0028  00FD               	movwf	tc_int@changed
 13621                           
 13622                           ;interrupts.c: 64: IOCIF = 0;
 13623  0029  014E               	movlb	14	; select bank14
 13624  002A  120C               	bcf	12,4	;volatile
 13625                           
 13626                           ;interrupts.c: 66: if(IOCCFbits.IOCCF1 )
 13627  002B  017E               	movlb	62	; select bank62
 13628  002C  1CD5               	btfss	85,1	;volatile
 13629  002D  2831               	goto	i1l6355
 13630                           
 13631                           ;interrupts.c: 67: {
 13632                           ;interrupts.c: 68: MCP2515_ISR();
 13633  002E  318D  2522  3180   	fcall	_MCP2515_ISR
 13634  0031                     i1l6355:	
 13635                           
 13636                           ;interrupts.c: 69: }
 13637                           ;interrupts.c: 70: if(IOCCFbits.IOCCF2)
 13638  0031  017E               	movlb	62	; select bank62
 13639  0032  1D55               	btfss	85,2	;volatile
 13640  0033  2837               	goto	i1l1157
 13641                           
 13642                           ;interrupts.c: 71: {
 13643                           ;interrupts.c: 72: button_column_1 = 1;
 13644  0034  0140               	movlb	0	; select bank0
 13645  0035  01DB               	clrf	_button_column_1
 13646  0036  0ADB               	incf	_button_column_1,f
 13647  0037                     i1l1157:	
 13648                           
 13649                           ;interrupts.c: 73: }
 13650                           ;interrupts.c: 74: if(IOCCFbits.IOCCF3)
 13651  0037  017E               	movlb	62	; select bank62
 13652  0038  1DD5               	btfss	85,3	;volatile
 13653  0039  283D               	goto	i1l1158
 13654                           
 13655                           ;interrupts.c: 75: {
 13656                           ;interrupts.c: 76: button_column_2 = 1;
 13657  003A  0140               	movlb	0	; select bank0
 13658  003B  01DA               	clrf	_button_column_2
 13659  003C  0ADA               	incf	_button_column_2,f
 13660  003D                     i1l1158:	
 13661                           
 13662                           ;interrupts.c: 77: }
 13663                           ;interrupts.c: 78: if(IOCCFbits.IOCCF4)
 13664  003D  017E               	movlb	62	; select bank62
 13665  003E  1E55               	btfss	85,4	;volatile
 13666  003F  2843               	goto	i1l1159
 13667                           
 13668                           ;interrupts.c: 79: {
 13669                           ;interrupts.c: 80: button_column_3 = 1;
 13670  0040  0140               	movlb	0	; select bank0
 13671  0041  01D9               	clrf	_button_column_3
 13672  0042  0AD9               	incf	_button_column_3,f
 13673  0043                     i1l1159:	
 13674                           
 13675                           ;interrupts.c: 81: }
 13676                           ;interrupts.c: 82: if(IOCCFbits.IOCCF5)
 13677  0043  017E               	movlb	62	; select bank62
 13678  0044  1ED5               	btfss	85,5	;volatile
 13679  0045  2849               	goto	i1l6365
 13680                           
 13681                           ;interrupts.c: 83: {
 13682                           ;interrupts.c: 84: button_column_4 = 1;
 13683  0046  0140               	movlb	0	; select bank0
 13684  0047  01D8               	clrf	_button_column_4
 13685  0048  0AD8               	incf	_button_column_4,f
 13686  0049                     i1l6365:	
 13687                           
 13688                           ;interrupts.c: 86: }
 13689                           ;interrupts.c: 87: IOCCF &= changed;
 13690  0049  087D               	movf	tc_int@changed,w
 13691  004A  0140               	movlb	0	; select bank0
 13692  004B  00AF               	movwf	??_tc_int
 13693  004C  082F               	movf	??_tc_int,w
 13694  004D  017E               	movlb	62	; select bank62
 13695  004E  05D5               	andwf	85,f	;volatile
 13696                           
 13697                           ;interrupts.c: 88: button_flag = 1;
 13698  004F  0141               	movlb	1	; select bank1
 13699  0050  01D3               	clrf	_button_flag^(0+128)
 13700  0051  0AD3               	incf	_button_flag^(0+128),f
 13701  0052                     i1l6369:	
 13702                           
 13703                           ;interrupts.c: 89: }
 13704                           ;interrupts.c: 91: if(PIE0bits.TMR0IE && PIR0bits.TMR0IF)
 13705  0052  014E               	movlb	14	; select bank14
 13706  0053  1A96               	btfsc	22,5	;volatile
 13707  0054  1E8C               	btfss	12,5	;volatile
 13708  0055  2861               	goto	i1l1162
 13709                           
 13710                           ;interrupts.c: 92: {
 13711                           ;interrupts.c: 93: SYSTEM_tick++;
 13712  0056  3001               	movlw	1
 13713  0057  0140               	movlb	0	; select bank0
 13714  0058  07D3               	addwf	_SYSTEM_tick,f
 13715  0059  3000               	movlw	0
 13716  005A  3DD4               	addwfc	_SYSTEM_tick+1,f
 13717  005B  3000               	movlw	0
 13718  005C  3DD5               	addwfc	_SYSTEM_tick+2,f
 13719  005D  3000               	movlw	0
 13720  005E  3DD6               	addwfc	_SYSTEM_tick+3,f
 13721                           
 13722                           ;interrupts.c: 94: PIR0bits.TMR0IF = 0;
 13723  005F  014E               	movlb	14	; select bank14
 13724  0060  128C               	bcf	12,5	;volatile
 13725  0061                     i1l1162:	
 13726  0061  0140               	movlb	0	; select bank0
 13727  0062  0830               	movf	??_tc_int+1,w
 13728  0063  00FF               	movwf	127
 13729  0064  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13730  0065  0009               	retfie
 13731  0066                     __end_of_tc_int:	
 13732                           
 13733                           	psect	text46
 13734  0D22                     __ptext46:	
 13735 ;; *************** function _MCP2515_ISR *****************
 13736 ;; Defined at:
 13737 ;;		line 635 in file "../src/CAN_SPI_PIC16.c"
 13738 ;; Parameters:    Size  Location     Type
 13739 ;;		None
 13740 ;; Auto vars:     Size  Location     Type
 13741 ;;  pBuf            2   10[BANK0 ] PTR struct .
 13742 ;;		 -> CAN_txMessageQ.m_entry(208), CAN_txMessageQ(210), 
 13743 ;;  pBuf            2    8[BANK0 ] PTR struct .
 13744 ;;		 -> CAN_rxMessageQ.m_entry(208), CAN_rxMessageQ(210), 
 13745 ;;  pBuf            2    6[BANK0 ] PTR struct .
 13746 ;;		 -> CAN_rxMessageQ.m_entry(208), CAN_rxMessageQ(210), 
 13747 ;;  _errFlags       1   13[BANK0 ] unsigned char 
 13748 ;;  _intFlags       1   14[BANK0 ] unsigned char 
 13749 ;;  _intFlags2      1   12[BANK0 ] unsigned char 
 13750 ;; Return value:  Size  Location     Type
 13751 ;;                  1    wreg      void 
 13752 ;; Registers used:
 13753 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13754 ;; Tracked objects:
 13755 ;;		On entry : 0/0
 13756 ;;		On exit  : 0/0
 13757 ;;		Unchanged: 0/0
 13758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13760 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13761 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13762 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13763 ;;Total ram usage:       15 bytes
 13764 ;; Hardware stack levels used:    1
 13765 ;; Hardware stack levels required when called:    3
 13766 ;; This function calls:
 13767 ;;		__RxCommand
 13768 ;;		i1__Modify
 13769 ;;		i1__Read
 13770 ;;		i1__SendBuffer
 13771 ;;		i1___wmul
 13772 ;; This function is called by:
 13773 ;;		_tc_int
 13774 ;;		_CAN_Tasks
 13775 ;; This function uses a non-reentrant model
 13776 ;;
 13777                           
 13778                           
 13779                           ;psect for function _MCP2515_ISR
 13780  0D22                     _MCP2515_ISR:	
 13781                           
 13782                           ;CAN_SPI_PIC16.c: 637: if( CANCTRL_REQOP_NORMAL == _canMode )
 13783                           
 13784                           ;incstack = 0
 13785                           ; Regs used in _MCP2515_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13786  0D22  0140               	movlb	0	; select bank0
 13787  0D23  085E               	movf	__canMode,w
 13788  0D24  1D03               	btfss	3,2
 13789  0D25  0008               	return
 13790                           
 13791                           ;CAN_SPI_PIC16.c: 638: {
 13792                           ;CAN_SPI_PIC16.c: 639: PIE0bits.IOCIE = 0;
 13793  0D26  014E               	movlb	14	; select bank14
 13794  0D27  1216               	bcf	22,4	;volatile
 13795                           
 13796                           ;CAN_SPI_PIC16.c: 641: uint8_t _intFlags, _intFlags2;
 13797                           ;CAN_SPI_PIC16.c: 643: _RxCommand( 0XA0, &_intFlags, 1 );
 13798  0D28  302E               	movlw	(low (MCP2515_ISR@_intFlags| 0))& (0+255)
 13799  0D29  0140               	movlb	0	; select bank0
 13800  0D2A  00A0               	movwf	??_MCP2515_ISR
 13801  0D2B  0820               	movf	??_MCP2515_ISR,w
 13802  0D2C  00F3               	movwf	__RxCommand@p
 13803  0D2D  01F4               	clrf	__RxCommand@count
 13804  0D2E  0AF4               	incf	__RxCommand@count,f
 13805  0D2F  30A0               	movlw	160
 13806  0D30  3191  2106  318D   	fcall	__RxCommand
 13807                           
 13808                           ;CAN_SPI_PIC16.c: 646: _Read( 0X2CU, &_intFlags2, 1 );
 13809  0D33  302C               	movlw	low MCP2515_ISR@_intFlags2
 13810  0D34  00F3               	movwf	i1__Read@pBuf
 13811  0D35  3000               	movlw	high MCP2515_ISR@_intFlags2
 13812  0D36  00F4               	movwf	i1__Read@pBuf+1
 13813  0D37  01F5               	clrf	i1__Read@count
 13814  0D38  0AF5               	incf	i1__Read@count,f
 13815  0D39  302C               	movlw	44
 13816  0D3A  3191  211E  318D   	fcall	i1__Read
 13817                           
 13818                           ;CAN_SPI_PIC16.c: 648: if( _intFlags2 & 0x20 )
 13819  0D3D  0140               	movlb	0	; select bank0
 13820  0D3E  1EAC               	btfss	MCP2515_ISR@_intFlags2,5
 13821  0D3F  2D64               	goto	i1l6119
 13822                           
 13823                           ;CAN_SPI_PIC16.c: 649: {
 13824                           ;CAN_SPI_PIC16.c: 650: uint8_t _errFlags;
 13825                           ;CAN_SPI_PIC16.c: 651: _Read( 0X2D, &_errFlags, 1 );
 13826  0D40  302D               	movlw	low MCP2515_ISR@_errFlags
 13827  0D41  00F3               	movwf	i1__Read@pBuf
 13828  0D42  3000               	movlw	high MCP2515_ISR@_errFlags
 13829  0D43  00F4               	movwf	i1__Read@pBuf+1
 13830  0D44  01F5               	clrf	i1__Read@count
 13831  0D45  0AF5               	incf	i1__Read@count,f
 13832  0D46  302D               	movlw	45
 13833  0D47  3191  211E  318D   	fcall	i1__Read
 13834                           
 13835                           ;CAN_SPI_PIC16.c: 653: if( _errFlags & 0x40 )
 13836  0D4A  0140               	movlb	0	; select bank0
 13837  0D4B  1F2D               	btfss	MCP2515_ISR@_errFlags,6
 13838  0D4C  2D52               	goto	i1l6113
 13839                           
 13840                           ;CAN_SPI_PIC16.c: 654: {
 13841                           ;CAN_SPI_PIC16.c: 655: MCP2515_diag.rxBufferOverflow++;
 13842  0D4D  3001               	movlw	1
 13843  0D4E  0142               	movlb	2	; select bank2
 13844  0D4F  07C9               	addwf	(_MCP2515_diag^(0+256)+4),f
 13845  0D50  3000               	movlw	0
 13846  0D51  3DCA               	addwfc	((_MCP2515_diag+1)^(0+256)+4),f
 13847  0D52                     i1l6113:	
 13848                           
 13849                           ;CAN_SPI_PIC16.c: 656: }
 13850                           ;CAN_SPI_PIC16.c: 658: if( _errFlags & 0x80 )
 13851  0D52  0140               	movlb	0	; select bank0
 13852  0D53  1FAD               	btfss	MCP2515_ISR@_errFlags,7
 13853  0D54  2D5A               	goto	i1l6117
 13854                           
 13855                           ;CAN_SPI_PIC16.c: 659: {
 13856                           ;CAN_SPI_PIC16.c: 660: MCP2515_diag.rxBufferOverflow++;
 13857  0D55  3001               	movlw	1
 13858  0D56  0142               	movlb	2	; select bank2
 13859  0D57  07C9               	addwf	(_MCP2515_diag^(0+256)+4),f
 13860  0D58  3000               	movlw	0
 13861  0D59  3DCA               	addwfc	((_MCP2515_diag+1)^(0+256)+4),f
 13862  0D5A                     i1l6117:	
 13863                           
 13864                           ;CAN_SPI_PIC16.c: 661: }
 13865                           ;CAN_SPI_PIC16.c: 664: _Modify( 0X2D, 0x40 | 0x80, 0 );
 13866  0D5A  30C0               	movlw	192
 13867  0D5B  0140               	movlb	0	; select bank0
 13868  0D5C  00A0               	movwf	??_MCP2515_ISR
 13869  0D5D  0820               	movf	??_MCP2515_ISR,w
 13870  0D5E  00F1               	movwf	i1__Modify@mask
 13871  0D5F  01F2               	clrf	i1__Modify@value
 13872  0D60  302D               	movlw	45
 13873  0D61  3190  20C5  318D   	fcall	i1__Modify
 13874  0D64                     i1l6119:	
 13875                           
 13876                           ;CAN_SPI_PIC16.c: 665: }
 13877                           ;CAN_SPI_PIC16.c: 667: if( _intFlags & 0B00000001 )
 13878  0D64  0140               	movlb	0	; select bank0
 13879  0D65  1C2E               	btfss	MCP2515_ISR@_intFlags,0
 13880  0D66  2DC8               	goto	i1l6131
 13881                           
 13882                           ;CAN_SPI_PIC16.c: 668: {
 13883                           ;CAN_SPI_PIC16.c: 669: if( !( ( ( uint16_t )( ( CAN_rxMessageQ.m_putIdx ) - ( CAN_rxMess
      +                          ageQ.m_getIdx ) ) ) == ( 16U ) ) )
 13884  0D67  304C               	movlw	76
 13885  0D68  0086               	movwf	6
 13886  0D69  3026               	movlw	38
 13887  0D6A  0087               	movwf	7
 13888  0D6B  0801               	movf	1,w
 13889  0D6C  00A0               	movwf	??_MCP2515_ISR
 13890  0D6D  01A1               	clrf	??_MCP2515_ISR+1
 13891  0D6E  09A0               	comf	??_MCP2515_ISR,f
 13892  0D6F  09A1               	comf	??_MCP2515_ISR+1,f
 13893  0D70  0AA0               	incf	??_MCP2515_ISR,f
 13894  0D71  1903               	skipnz
 13895  0D72  0AA1               	incf	??_MCP2515_ISR+1,f
 13896  0D73  304C               	movlw	76
 13897  0D74  0086               	movwf	6
 13898  0D75  3026               	movlw	38
 13899  0D76  0087               	movwf	7
 13900  0D77  3141               	addfsr 1,1
 13901  0D78  0801               	movf	1,w
 13902  0D79  0720               	addwf	??_MCP2515_ISR,w
 13903  0D7A  00A2               	movwf	??_MCP2515_ISR+2
 13904  0D7B  0821               	movf	??_MCP2515_ISR+1,w
 13905  0D7C  1803               	skipnc
 13906  0D7D  0A21               	incf	??_MCP2515_ISR+1,w
 13907  0D7E  00A3               	movwf	??_MCP2515_ISR+3
 13908  0D7F  3010               	movlw	16
 13909  0D80  0622               	xorwf	??_MCP2515_ISR+2,w
 13910  0D81  0423               	iorwf	??_MCP2515_ISR+3,w
 13911  0D82  1903               	btfsc	3,2
 13912  0D83  2DC3               	goto	i1l6129
 13913                           
 13914                           ;CAN_SPI_PIC16.c: 670: {
 13915                           ;CAN_SPI_PIC16.c: 671: MessageBuffer_t *pBuf = &( CAN_rxMessageQ.m_entry )[ CAN_rxMessag
      +                          eQ.m_putIdx & ( ( 16U ) - 1 ) ];
 13916  0D84  304C               	movlw	76
 13917  0D85  0086               	movwf	6
 13918  0D86  3026               	movlw	38
 13919  0D87  0087               	movwf	7
 13920  0D88  3141               	addfsr 1,1
 13921  0D89  0801               	movf	1,w
 13922  0D8A  390F               	andlw	15
 13923  0D8B  00A0               	movwf	??_MCP2515_ISR
 13924  0D8C  01A1               	clrf	??_MCP2515_ISR+1
 13925  0D8D  0820               	movf	??_MCP2515_ISR,w
 13926  0D8E  00F0               	movwf	i1___wmul@multiplier
 13927  0D8F  0821               	movf	??_MCP2515_ISR+1,w
 13928  0D90  00F1               	movwf	i1___wmul@multiplier+1
 13929  0D91  300D               	movlw	13
 13930  0D92  00F2               	movwf	i1___wmul@multiplicand
 13931  0D93  3000               	movlw	0
 13932  0D94  00F3               	movwf	i1___wmul@multiplicand+1
 13933  0D95  3191  21CE  318D   	fcall	i1___wmul
 13934  0D98  304E               	movlw	78
 13935  0D99  0140               	movlb	0	; select bank0
 13936  0D9A  00A2               	movwf	??_MCP2515_ISR+2
 13937  0D9B  3026               	movlw	38
 13938  0D9C  00A3               	movwf	??_MCP2515_ISR+3
 13939  0D9D  0870               	movf	?i1___wmul,w
 13940  0D9E  0722               	addwf	??_MCP2515_ISR+2,w
 13941  0D9F  00A4               	movwf	??_MCP2515_ISR+4
 13942  0DA0  0871               	movf	?i1___wmul+1,w
 13943  0DA1  3D23               	addwfc	??_MCP2515_ISR+3,w
 13944  0DA2  00A5               	movwf	??_MCP2515_ISR+5
 13945  0DA3  0824               	movf	??_MCP2515_ISR+4,w
 13946  0DA4  00A6               	movwf	MCP2515_ISR@pBuf
 13947  0DA5  0825               	movf	??_MCP2515_ISR+5,w
 13948  0DA6  00A7               	movwf	MCP2515_ISR@pBuf+1
 13949                           
 13950                           ;CAN_SPI_PIC16.c: 672: _Read( 0x61, (uint8_t *)pBuf, sizeof( MessageBuffer_t ) );
 13951  0DA7  0827               	movf	MCP2515_ISR@pBuf+1,w
 13952  0DA8  00F4               	movwf	i1__Read@pBuf+1
 13953  0DA9  0826               	movf	MCP2515_ISR@pBuf,w
 13954  0DAA  00F3               	movwf	i1__Read@pBuf
 13955  0DAB  300D               	movlw	13
 13956  0DAC  00A0               	movwf	??_MCP2515_ISR
 13957  0DAD  0820               	movf	??_MCP2515_ISR,w
 13958  0DAE  00F5               	movwf	i1__Read@count
 13959  0DAF  3061               	movlw	97
 13960  0DB0  3191  211E  318D   	fcall	i1__Read
 13961                           
 13962                           ;CAN_SPI_PIC16.c: 673: CAN_rxMessageQ.m_putIdx++;
 13963  0DB3  3001               	movlw	1
 13964  0DB4  0140               	movlb	0	; select bank0
 13965  0DB5  00A0               	movwf	??_MCP2515_ISR
 13966  0DB6  304C               	movlw	76
 13967  0DB7  0086               	movwf	6
 13968  0DB8  3026               	movlw	38
 13969  0DB9  0087               	movwf	7
 13970  0DBA  3141               	addfsr 1,1
 13971  0DBB  0820               	movf	??_MCP2515_ISR,w
 13972  0DBC  0781               	addwf	1,f
 13973                           
 13974                           ;CAN_SPI_PIC16.c: 674: MCP2515_diag.rxb0count++;
 13975  0DBD  3001               	movlw	1
 13976  0DBE  0142               	movlb	2	; select bank2
 13977  0DBF  07CB               	addwf	(_MCP2515_diag^(0+256)+6),f
 13978  0DC0  3000               	movlw	0
 13979  0DC1  3DCC               	addwfc	((_MCP2515_diag+1)^(0+256)+6),f
 13980                           
 13981                           ;CAN_SPI_PIC16.c: 675: }
 13982  0DC2  2DC8               	goto	i1l6131
 13983  0DC3                     i1l6129:	
 13984                           
 13985                           ;CAN_SPI_PIC16.c: 676: else
 13986                           ;CAN_SPI_PIC16.c: 677: MCP2515_diag.rxQueueOverflows++;
 13987  0DC3  3001               	movlw	1
 13988  0DC4  0142               	movlb	2	; select bank2
 13989  0DC5  07C5               	addwf	_MCP2515_diag^(0+256),f
 13990  0DC6  3000               	movlw	0
 13991  0DC7  3DC6               	addwfc	(_MCP2515_diag+1)^(0+256),f
 13992  0DC8                     i1l6131:	
 13993                           
 13994                           ;CAN_SPI_PIC16.c: 678: }
 13995                           ;CAN_SPI_PIC16.c: 680: if( _intFlags & 0B00000010 )
 13996  0DC8  0140               	movlb	0	; select bank0
 13997  0DC9  1CAE               	btfss	MCP2515_ISR@_intFlags,1
 13998  0DCA  2E2C               	goto	i1l6143
 13999                           
 14000                           ;CAN_SPI_PIC16.c: 681: {
 14001                           ;CAN_SPI_PIC16.c: 682: if( !( ( ( uint16_t )( ( CAN_rxMessageQ.m_putIdx ) - ( CAN_rxMess
      +                          ageQ.m_getIdx ) ) ) == ( 16U ) ) )
 14002  0DCB  304C               	movlw	76
 14003  0DCC  0086               	movwf	6
 14004  0DCD  3026               	movlw	38
 14005  0DCE  0087               	movwf	7
 14006  0DCF  0801               	movf	1,w
 14007  0DD0  00A0               	movwf	??_MCP2515_ISR
 14008  0DD1  01A1               	clrf	??_MCP2515_ISR+1
 14009  0DD2  09A0               	comf	??_MCP2515_ISR,f
 14010  0DD3  09A1               	comf	??_MCP2515_ISR+1,f
 14011  0DD4  0AA0               	incf	??_MCP2515_ISR,f
 14012  0DD5  1903               	skipnz
 14013  0DD6  0AA1               	incf	??_MCP2515_ISR+1,f
 14014  0DD7  304C               	movlw	76
 14015  0DD8  0086               	movwf	6
 14016  0DD9  3026               	movlw	38
 14017  0DDA  0087               	movwf	7
 14018  0DDB  3141               	addfsr 1,1
 14019  0DDC  0801               	movf	1,w
 14020  0DDD  0720               	addwf	??_MCP2515_ISR,w
 14021  0DDE  00A2               	movwf	??_MCP2515_ISR+2
 14022  0DDF  0821               	movf	??_MCP2515_ISR+1,w
 14023  0DE0  1803               	skipnc
 14024  0DE1  0A21               	incf	??_MCP2515_ISR+1,w
 14025  0DE2  00A3               	movwf	??_MCP2515_ISR+3
 14026  0DE3  3010               	movlw	16
 14027  0DE4  0622               	xorwf	??_MCP2515_ISR+2,w
 14028  0DE5  0423               	iorwf	??_MCP2515_ISR+3,w
 14029  0DE6  1903               	btfsc	3,2
 14030  0DE7  2E27               	goto	i1l6141
 14031                           
 14032                           ;CAN_SPI_PIC16.c: 683: {
 14033                           ;CAN_SPI_PIC16.c: 684: MessageBuffer_t *pBuf = &( CAN_rxMessageQ.m_entry )[ CAN_rxMessag
      +                          eQ.m_putIdx & ( ( 16U ) - 1 ) ];
 14034  0DE8  304C               	movlw	76
 14035  0DE9  0086               	movwf	6
 14036  0DEA  3026               	movlw	38
 14037  0DEB  0087               	movwf	7
 14038  0DEC  3141               	addfsr 1,1
 14039  0DED  0801               	movf	1,w
 14040  0DEE  390F               	andlw	15
 14041  0DEF  00A0               	movwf	??_MCP2515_ISR
 14042  0DF0  01A1               	clrf	??_MCP2515_ISR+1
 14043  0DF1  0820               	movf	??_MCP2515_ISR,w
 14044  0DF2  00F0               	movwf	i1___wmul@multiplier
 14045  0DF3  0821               	movf	??_MCP2515_ISR+1,w
 14046  0DF4  00F1               	movwf	i1___wmul@multiplier+1
 14047  0DF5  300D               	movlw	13
 14048  0DF6  00F2               	movwf	i1___wmul@multiplicand
 14049  0DF7  3000               	movlw	0
 14050  0DF8  00F3               	movwf	i1___wmul@multiplicand+1
 14051  0DF9  3191  21CE  318D   	fcall	i1___wmul
 14052  0DFC  304E               	movlw	78
 14053  0DFD  0140               	movlb	0	; select bank0
 14054  0DFE  00A2               	movwf	??_MCP2515_ISR+2
 14055  0DFF  3026               	movlw	38
 14056  0E00  00A3               	movwf	??_MCP2515_ISR+3
 14057  0E01  0870               	movf	?i1___wmul,w
 14058  0E02  0722               	addwf	??_MCP2515_ISR+2,w
 14059  0E03  00A4               	movwf	??_MCP2515_ISR+4
 14060  0E04  0871               	movf	?i1___wmul+1,w
 14061  0E05  3D23               	addwfc	??_MCP2515_ISR+3,w
 14062  0E06  00A5               	movwf	??_MCP2515_ISR+5
 14063  0E07  0824               	movf	??_MCP2515_ISR+4,w
 14064  0E08  00A8               	movwf	MCP2515_ISR@pBuf_580
 14065  0E09  0825               	movf	??_MCP2515_ISR+5,w
 14066  0E0A  00A9               	movwf	MCP2515_ISR@pBuf_580+1
 14067                           
 14068                           ;CAN_SPI_PIC16.c: 685: _Read( 0x71, (uint8_t *)pBuf, sizeof( MessageBuffer_t ) );
 14069  0E0B  0829               	movf	MCP2515_ISR@pBuf_580+1,w
 14070  0E0C  00F4               	movwf	i1__Read@pBuf+1
 14071  0E0D  0828               	movf	MCP2515_ISR@pBuf_580,w
 14072  0E0E  00F3               	movwf	i1__Read@pBuf
 14073  0E0F  300D               	movlw	13
 14074  0E10  00A0               	movwf	??_MCP2515_ISR
 14075  0E11  0820               	movf	??_MCP2515_ISR,w
 14076  0E12  00F5               	movwf	i1__Read@count
 14077  0E13  3071               	movlw	113
 14078  0E14  3191  211E  318D   	fcall	i1__Read
 14079                           
 14080                           ;CAN_SPI_PIC16.c: 686: CAN_rxMessageQ.m_putIdx++;
 14081  0E17  3001               	movlw	1
 14082  0E18  0140               	movlb	0	; select bank0
 14083  0E19  00A0               	movwf	??_MCP2515_ISR
 14084  0E1A  304C               	movlw	76
 14085  0E1B  0086               	movwf	6
 14086  0E1C  3026               	movlw	38
 14087  0E1D  0087               	movwf	7
 14088  0E1E  3141               	addfsr 1,1
 14089  0E1F  0820               	movf	??_MCP2515_ISR,w
 14090  0E20  0781               	addwf	1,f
 14091                           
 14092                           ;CAN_SPI_PIC16.c: 687: MCP2515_diag.rxb1count++;
 14093  0E21  3001               	movlw	1
 14094  0E22  0142               	movlb	2	; select bank2
 14095  0E23  07CD               	addwf	(_MCP2515_diag^(0+256)+8),f
 14096  0E24  3000               	movlw	0
 14097  0E25  3DCE               	addwfc	((_MCP2515_diag+1)^(0+256)+8),f
 14098                           
 14099                           ;CAN_SPI_PIC16.c: 688: }
 14100  0E26  2E2C               	goto	i1l6143
 14101  0E27                     i1l6141:	
 14102                           
 14103                           ;CAN_SPI_PIC16.c: 689: else
 14104                           ;CAN_SPI_PIC16.c: 690: MCP2515_diag.rxQueueOverflows++;
 14105  0E27  3001               	movlw	1
 14106  0E28  0142               	movlb	2	; select bank2
 14107  0E29  07C5               	addwf	_MCP2515_diag^(0+256),f
 14108  0E2A  3000               	movlw	0
 14109  0E2B  3DC6               	addwfc	(_MCP2515_diag+1)^(0+256),f
 14110  0E2C                     i1l6143:	
 14111                           
 14112                           ;CAN_SPI_PIC16.c: 691: }
 14113                           ;CAN_SPI_PIC16.c: 696: if( 0 == ( _intFlags & 0B00000100 ) )
 14114  0E2C  0140               	movlb	0	; select bank0
 14115  0E2D  192E               	btfsc	MCP2515_ISR@_intFlags,2
 14116  0E2E  2E83               	goto	i1l6155
 14117                           
 14118                           ;CAN_SPI_PIC16.c: 697: {
 14119                           ;CAN_SPI_PIC16.c: 698: if( !( ( ( uint16_t )( ( CAN_txMessageQ.m_putIdx ) - ( CAN_txMess
      +                          ageQ.m_getIdx ) ) ) == 0 ) )
 14120  0E2F  301E               	movlw	30
 14121  0E30  0086               	movwf	6
 14122  0E31  3027               	movlw	39
 14123  0E32  0087               	movwf	7
 14124  0E33  0801               	movf	1,w
 14125  0E34  00A0               	movwf	??_MCP2515_ISR
 14126  0E35  01A1               	clrf	??_MCP2515_ISR+1
 14127  0E36  09A0               	comf	??_MCP2515_ISR,f
 14128  0E37  09A1               	comf	??_MCP2515_ISR+1,f
 14129  0E38  0AA0               	incf	??_MCP2515_ISR,f
 14130  0E39  1903               	skipnz
 14131  0E3A  0AA1               	incf	??_MCP2515_ISR+1,f
 14132  0E3B  301E               	movlw	30
 14133  0E3C  0086               	movwf	6
 14134  0E3D  3027               	movlw	39
 14135  0E3E  0087               	movwf	7
 14136  0E3F  3141               	addfsr 1,1
 14137  0E40  0801               	movf	1,w
 14138  0E41  0720               	addwf	??_MCP2515_ISR,w
 14139  0E42  00A2               	movwf	??_MCP2515_ISR+2
 14140  0E43  0821               	movf	??_MCP2515_ISR+1,w
 14141  0E44  1803               	skipnc
 14142  0E45  0A21               	incf	??_MCP2515_ISR+1,w
 14143  0E46  00A3               	movwf	??_MCP2515_ISR+3
 14144  0E47  0822               	movf	??_MCP2515_ISR+2,w
 14145  0E48  0423               	iorwf	??_MCP2515_ISR+3,w
 14146  0E49  1903               	btfsc	3,2
 14147  0E4A  2E83               	goto	i1l6155
 14148                           
 14149                           ;CAN_SPI_PIC16.c: 699: {
 14150                           ;CAN_SPI_PIC16.c: 700: MessageBuffer_t *pBuf = &( CAN_txMessageQ.m_entry )[ CAN_txMessag
      +                          eQ.m_getIdx & ( ( 16U ) - 1 ) ];
 14151  0E4B  301E               	movlw	30
 14152  0E4C  0086               	movwf	6
 14153  0E4D  3027               	movlw	39
 14154  0E4E  0087               	movwf	7
 14155  0E4F  0801               	movf	1,w
 14156  0E50  390F               	andlw	15
 14157  0E51  00A0               	movwf	??_MCP2515_ISR
 14158  0E52  01A1               	clrf	??_MCP2515_ISR+1
 14159  0E53  0820               	movf	??_MCP2515_ISR,w
 14160  0E54  00F0               	movwf	i1___wmul@multiplier
 14161  0E55  0821               	movf	??_MCP2515_ISR+1,w
 14162  0E56  00F1               	movwf	i1___wmul@multiplier+1
 14163  0E57  300D               	movlw	13
 14164  0E58  00F2               	movwf	i1___wmul@multiplicand
 14165  0E59  3000               	movlw	0
 14166  0E5A  00F3               	movwf	i1___wmul@multiplicand+1
 14167  0E5B  3191  21CE  318D   	fcall	i1___wmul
 14168  0E5E  3020               	movlw	32
 14169  0E5F  0140               	movlb	0	; select bank0
 14170  0E60  00A2               	movwf	??_MCP2515_ISR+2
 14171  0E61  3027               	movlw	39
 14172  0E62  00A3               	movwf	??_MCP2515_ISR+3
 14173  0E63  0870               	movf	?i1___wmul,w
 14174  0E64  0722               	addwf	??_MCP2515_ISR+2,w
 14175  0E65  00A4               	movwf	??_MCP2515_ISR+4
 14176  0E66  0871               	movf	?i1___wmul+1,w
 14177  0E67  3D23               	addwfc	??_MCP2515_ISR+3,w
 14178  0E68  00A5               	movwf	??_MCP2515_ISR+5
 14179  0E69  0824               	movf	??_MCP2515_ISR+4,w
 14180  0E6A  00AA               	movwf	MCP2515_ISR@pBuf_581
 14181  0E6B  0825               	movf	??_MCP2515_ISR+5,w
 14182  0E6C  00AB               	movwf	MCP2515_ISR@pBuf_581+1
 14183                           
 14184                           ;CAN_SPI_PIC16.c: 701: _SendBuffer( 0x30, pBuf );
 14185  0E6D  082B               	movf	MCP2515_ISR@pBuf_581+1,w
 14186  0E6E  00F9               	movwf	i1__SendBuffer@pBuf+1
 14187  0E6F  082A               	movf	MCP2515_ISR@pBuf_581,w
 14188  0E70  00F8               	movwf	i1__SendBuffer@pBuf
 14189  0E71  3030               	movlw	48
 14190  0E72  3191  2166  318D   	fcall	i1__SendBuffer
 14191                           
 14192                           ;CAN_SPI_PIC16.c: 702: CAN_txMessageQ.m_getIdx++;
 14193  0E75  3001               	movlw	1
 14194  0E76  0140               	movlb	0	; select bank0
 14195  0E77  00A0               	movwf	??_MCP2515_ISR
 14196  0E78  301E               	movlw	30
 14197  0E79  0086               	movwf	6
 14198  0E7A  3027               	movlw	39
 14199  0E7B  0087               	movwf	7
 14200  0E7C  0820               	movf	??_MCP2515_ISR,w
 14201  0E7D  0781               	addwf	1,f
 14202                           
 14203                           ;CAN_SPI_PIC16.c: 703: MCP2515_diag.txb0count++;
 14204  0E7E  3001               	movlw	1
 14205  0E7F  0142               	movlb	2	; select bank2
 14206  0E80  07CF               	addwf	(_MCP2515_diag^(0+256)+10),f
 14207  0E81  3000               	movlw	0
 14208  0E82  3DD0               	addwfc	((_MCP2515_diag+1)^(0+256)+10),f
 14209  0E83                     i1l6155:	
 14210                           
 14211                           ;CAN_SPI_PIC16.c: 704: }
 14212                           ;CAN_SPI_PIC16.c: 705: }
 14213                           ;CAN_SPI_PIC16.c: 738: _Modify( 0X2CU, 0xFF, 0 );
 14214  0E83  30FF               	movlw	255
 14215  0E84  0140               	movlb	0	; select bank0
 14216  0E85  00A0               	movwf	??_MCP2515_ISR
 14217  0E86  0820               	movf	??_MCP2515_ISR,w
 14218  0E87  00F1               	movwf	i1__Modify@mask
 14219  0E88  01F2               	clrf	i1__Modify@value
 14220  0E89  302C               	movlw	44
 14221  0E8A  3190  20C5         	fcall	i1__Modify
 14222                           
 14223                           ;CAN_SPI_PIC16.c: 740: PIE0bits.IOCIE = 1;
 14224  0E8C  014E               	movlb	14	; select bank14
 14225  0E8D  1616               	bsf	22,4	;volatile
 14226  0E8E  0008               	return
 14227  0E8F                     __end_of_MCP2515_ISR:	
 14228                           
 14229                           	psect	text47
 14230  11CE                     __ptext47:	
 14231 ;; *************** function i1___wmul *****************
 14232 ;; Defined at:
 14233 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 14234 ;; Parameters:    Size  Location     Type
 14235 ;;  multiplier      2    0[COMMON] unsigned int 
 14236 ;;  multiplicand    2    2[COMMON] unsigned int 
 14237 ;; Auto vars:     Size  Location     Type
 14238 ;;  __wmul          2    4[COMMON] unsigned int 
 14239 ;; Return value:  Size  Location     Type
 14240 ;;                  2    0[COMMON] unsigned int 
 14241 ;; Registers used:
 14242 ;;		wreg, status,2, status,0
 14243 ;; Tracked objects:
 14244 ;;		On entry : 0/0
 14245 ;;		On exit  : 0/0
 14246 ;;		Unchanged: 0/0
 14247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14248 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14249 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14251 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14252 ;;Total ram usage:        6 bytes
 14253 ;; Hardware stack levels used:    1
 14254 ;; This function calls:
 14255 ;;		Nothing
 14256 ;; This function is called by:
 14257 ;;		_MCP2515_ISR
 14258 ;; This function uses a non-reentrant model
 14259 ;;
 14260                           
 14261                           
 14262                           ;psect for function i1___wmul
 14263  11CE                     i1___wmul:	
 14264                           
 14265                           ;incstack = 0
 14266                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 14267  11CE  01F4               	clrf	i1___wmul@product
 14268  11CF  01F5               	clrf	i1___wmul@product+1
 14269  11D0                     i1l4515:	
 14270  11D0  1C70               	btfss	i1___wmul@multiplier,0
 14271  11D1  29D6               	goto	i1l1255
 14272  11D2  0872               	movf	i1___wmul@multiplicand,w
 14273  11D3  07F4               	addwf	i1___wmul@product,f
 14274  11D4  0873               	movf	i1___wmul@multiplicand+1,w
 14275  11D5  3DF5               	addwfc	i1___wmul@product+1,f
 14276  11D6                     i1l1255:	
 14277  11D6  3001               	movlw	1
 14278  11D7                     u336_25:	
 14279  11D7  35F2               	lslf	i1___wmul@multiplicand,f
 14280  11D8  0DF3               	rlf	i1___wmul@multiplicand+1,f
 14281  11D9  0B89               	decfsz	9,f
 14282  11DA  29D7               	goto	u336_25
 14283  11DB  3001               	movlw	1
 14284  11DC                     u337_25:	
 14285  11DC  36F1               	lsrf	i1___wmul@multiplier+1,f
 14286  11DD  0CF0               	rrf	i1___wmul@multiplier,f
 14287  11DE  0B89               	decfsz	9,f
 14288  11DF  29DC               	goto	u337_25
 14289  11E0  0870               	movf	i1___wmul@multiplier,w
 14290  11E1  0471               	iorwf	i1___wmul@multiplier+1,w
 14291  11E2  1D03               	btfss	3,2
 14292  11E3  29D0               	goto	i1l4515
 14293  11E4  0875               	movf	i1___wmul@product+1,w
 14294  11E5  00F1               	movwf	?i1___wmul+1
 14295  11E6  0874               	movf	i1___wmul@product,w
 14296  11E7  00F0               	movwf	?i1___wmul
 14297  11E8  0008               	return
 14298  11E9                     __end_ofi1___wmul:	
 14299                           
 14300                           	psect	text48
 14301  1166                     __ptext48:	
 14302 ;; *************** function i1__SendBuffer *****************
 14303 ;; Defined at:
 14304 ;;		line 311 in file "../src/CAN_SPI_PIC16.c"
 14305 ;; Parameters:    Size  Location     Type
 14306 ;;  addr            1    wreg     unsigned char 
 14307 ;;  pBuf            2    8[COMMON] PTR struct .
 14308 ;;		 -> CAN_TxMailbox@buf(13), CAN_txMessageQ.m_entry(208), CAN_txMessageQ(210), 
 14309 ;; Auto vars:     Size  Location     Type
 14310 ;;  addr            1   12[COMMON] unsigned char 
 14311 ;; Return value:  Size  Location     Type
 14312 ;;                  1    wreg      void 
 14313 ;; Registers used:
 14314 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14315 ;; Tracked objects:
 14316 ;;		On entry : 0/0
 14317 ;;		On exit  : 0/0
 14318 ;;		Unchanged: 0/0
 14319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14320 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14321 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14322 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14323 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14324 ;;Total ram usage:        5 bytes
 14325 ;; Hardware stack levels used:    1
 14326 ;; Hardware stack levels required when called:    2
 14327 ;; This function calls:
 14328 ;;		i1__Modify
 14329 ;;		i1__Write
 14330 ;; This function is called by:
 14331 ;;		_MCP2515_ISR
 14332 ;; This function uses a non-reentrant model
 14333 ;;
 14334                           
 14335                           
 14336                           ;psect for function i1__SendBuffer
 14337  1166                     i1__SendBuffer:	
 14338                           
 14339                           ;incstack = 0
 14340                           ; Regs used in i1__SendBuffer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14341                           ;i1__SendBuffer@addr stored from wreg
 14342  1166  00FC               	movwf	i1__SendBuffer@addr
 14343                           
 14344                           ;CAN_SPI_PIC16.c: 313: _Write( addr + 1, (uint8_t *)pBuf, sizeof( MessageBuffer_t ) );
 14345  1167  0879               	movf	i1__SendBuffer@pBuf+1,w
 14346  1168  00F4               	movwf	i1__Write@pBuf+1
 14347  1169  0878               	movf	i1__SendBuffer@pBuf,w
 14348  116A  00F3               	movwf	i1__Write@pBuf
 14349  116B  300D               	movlw	13
 14350  116C  00FA               	movwf	??i1__SendBuffer
 14351  116D  087A               	movf	??i1__SendBuffer,w
 14352  116E  00F5               	movwf	i1__Write@count
 14353  116F  087C               	movf	i1__SendBuffer@addr,w
 14354  1170  3E01               	addlw	1
 14355  1171  3191  2136  3191   	fcall	i1__Write
 14356                           
 14357                           ;CAN_SPI_PIC16.c: 314: _Modify( addr, 0x08, 0x08 );
 14358  1174  3008               	movlw	8
 14359  1175  00FA               	movwf	??i1__SendBuffer
 14360  1176  087A               	movf	??i1__SendBuffer,w
 14361  1177  00F1               	movwf	i1__Modify@mask
 14362  1178  3008               	movlw	8
 14363  1179  00FB               	movwf	??i1__SendBuffer+1
 14364  117A  087B               	movf	??i1__SendBuffer+1,w
 14365  117B  00F2               	movwf	i1__Modify@value
 14366  117C  087C               	movf	i1__SendBuffer@addr,w
 14367  117D  3190  20C5         	fcall	i1__Modify
 14368  117F  0008               	return
 14369  1180                     __end_ofi1__SendBuffer:	
 14370                           
 14371                           	psect	text49
 14372  1136                     __ptext49:	
 14373 ;; *************** function i1__Write *****************
 14374 ;; Defined at:
 14375 ;;		line 250 in file "../src/CAN_SPI_PIC16.c"
 14376 ;; Parameters:    Size  Location     Type
 14377 ;;  reg             1    wreg     unsigned char 
 14378 ;;  pBuf            2    3[COMMON] PTR unsigned char 
 14379 ;;		 -> _canConfig.filters(24), _canConfig(32), CAN_TxMailbox@buf(13), CAN_Initialize@temp8(1), 
 14380 ;;		 -> CAN_Initialize@buf(5), CAN_txMessageQ.m_entry(208), CAN_txMessageQ(210), 
 14381 ;;  count           1    5[COMMON] unsigned char 
 14382 ;; Auto vars:     Size  Location     Type
 14383 ;;  reg             1    7[COMMON] unsigned char 
 14384 ;; Return value:  Size  Location     Type
 14385 ;;                  1    wreg      void 
 14386 ;; Registers used:
 14387 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14388 ;; Tracked objects:
 14389 ;;		On entry : 0/0
 14390 ;;		On exit  : 0/0
 14391 ;;		Unchanged: 0/0
 14392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14393 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14394 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14395 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14396 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14397 ;;Total ram usage:        5 bytes
 14398 ;; Hardware stack levels used:    1
 14399 ;; Hardware stack levels required when called:    1
 14400 ;; This function calls:
 14401 ;;		i1_SPI1_Put
 14402 ;;		i1_SPI1_PutBuffer
 14403 ;; This function is called by:
 14404 ;;		i1__SendBuffer
 14405 ;; This function uses a non-reentrant model
 14406 ;;
 14407                           
 14408                           
 14409                           ;psect for function i1__Write
 14410  1136                     i1__Write:	
 14411                           
 14412                           ;incstack = 0
 14413                           ; Regs used in i1__Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14414                           ;i1__Write@reg stored from wreg
 14415  1136  00F7               	movwf	i1__Write@reg
 14416                           
 14417                           ;CAN_SPI_PIC16.c: 252: LATBbits.LATB4 = 0;
 14418  1137  0140               	movlb	0	; select bank0
 14419  1138  1219               	bcf	25,4	;volatile
 14420                           
 14421                           ;CAN_SPI_PIC16.c: 254: SPI1_Put( 2 );
 14422  1139  3002               	movlw	2
 14423  113A  3190  203C  3191   	fcall	i1_SPI1_Put
 14424                           
 14425                           ;CAN_SPI_PIC16.c: 255: SPI1_Put( reg );
 14426  113D  0877               	movf	i1__Write@reg,w
 14427  113E  3190  203C  3191   	fcall	i1_SPI1_Put
 14428                           
 14429                           ;CAN_SPI_PIC16.c: 256: SPI1_PutBuffer( pBuf, count );
 14430  1141  0874               	movf	i1__Write@pBuf+1,w
 14431  1142  00F1               	movwf	i1SPI1_PutBuffer@pBuf+1
 14432  1143  0873               	movf	i1__Write@pBuf,w
 14433  1144  00F0               	movwf	i1SPI1_PutBuffer@pBuf
 14434  1145  0875               	movf	i1__Write@count,w
 14435  1146  00F6               	movwf	??i1__Write
 14436  1147  0876               	movf	??i1__Write,w
 14437  1148  00F2               	movwf	i1SPI1_PutBuffer@count
 14438  1149  3190  209D         	fcall	i1_SPI1_PutBuffer
 14439                           
 14440                           ;CAN_SPI_PIC16.c: 258: LATBbits.LATB4 = 1;
 14441  114B  0140               	movlb	0	; select bank0
 14442  114C  1619               	bsf	25,4	;volatile
 14443  114D  0008               	return
 14444  114E                     __end_ofi1__Write:	
 14445                           
 14446                           	psect	text50
 14447  109D                     __ptext50:	
 14448 ;; *************** function i1_SPI1_PutBuffer *****************
 14449 ;; Defined at:
 14450 ;;		line 70 in file "../src/spi_pic16.c"
 14451 ;; Parameters:    Size  Location     Type
 14452 ;;  pBuf            2    0[COMMON] PTR unsigned char 
 14453 ;;		 -> _canConfig.filters(24), _canConfig(32), CAN_TxMailbox@buf(13), CAN_Initialize@temp8(1), 
 14454 ;;		 -> CAN_Initialize@buf(5), CAN_txMessageQ.m_entry(208), CAN_txMessageQ(210), NULL(0), 
 14455 ;;  count           1    2[COMMON] unsigned char 
 14456 ;; Auto vars:     Size  Location     Type
 14457 ;;		None
 14458 ;; Return value:  Size  Location     Type
 14459 ;;                  1    wreg      void 
 14460 ;; Registers used:
 14461 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 14462 ;; Tracked objects:
 14463 ;;		On entry : 0/0
 14464 ;;		On exit  : 0/0
 14465 ;;		Unchanged: 0/0
 14466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14467 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14470 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14471 ;;Total ram usage:        3 bytes
 14472 ;; Hardware stack levels used:    1
 14473 ;; This function calls:
 14474 ;;		Nothing
 14475 ;; This function is called by:
 14476 ;;		i1__Write
 14477 ;; This function uses a non-reentrant model
 14478 ;;
 14479                           
 14480                           
 14481                           ;psect for function i1_SPI1_PutBuffer
 14482  109D                     i1_SPI1_PutBuffer:	
 14483  109D                     i1l5479:	
 14484                           ;spi_pic16.c: 72: while( count > 0 )
 14485                           
 14486                           ;incstack = 0
 14487                           ; Regs used in i1_SPI1_PutBuffer: [wreg-fsr0h+status,2+status,0+pclath]
 14488                           
 14489  109D  0872               	movf	i1SPI1_PutBuffer@count,w
 14490  109E  1903               	btfsc	3,2
 14491  109F  0008               	return
 14492                           
 14493                           ;spi_pic16.c: 73: {
 14494                           ;spi_pic16.c: 74: count--;
 14495  10A0  3001               	movlw	1
 14496  10A1  02F2               	subwf	i1SPI1_PutBuffer@count,f
 14497                           
 14498                           ;spi_pic16.c: 75: SSP1BUF = *pBuf++;
 14499  10A2  0870               	movf	i1SPI1_PutBuffer@pBuf,w
 14500  10A3  0084               	movwf	4
 14501  10A4  0871               	movf	i1SPI1_PutBuffer@pBuf+1,w
 14502  10A5  0085               	movwf	5
 14503  10A6  0800               	movf	0,w	;code access
 14504  10A7  0143               	movlb	3	; select bank3
 14505  10A8  008C               	movwf	12	;volatile
 14506  10A9  3001               	movlw	1
 14507  10AA  07F0               	addwf	i1SPI1_PutBuffer@pBuf,f
 14508  10AB  3000               	movlw	0
 14509  10AC  3DF1               	addwfc	i1SPI1_PutBuffer@pBuf+1,f
 14510  10AD                     i1l573:	
 14511                           ;spi_pic16.c: 77: ;
 14512                           
 14513                           ;spi_pic16.c: 76: while( SSP1STATbits.BF == 0 )
 14514                           
 14515  10AD  180F               	btfsc	15,0	;volatile
 14516  10AE  289D               	goto	i1l5479
 14517  10AF  28AD               	goto	i1l573
 14518  10B0                     __end_ofi1_SPI1_PutBuffer:	
 14519                           ;spi_pic16.c: 78: }
 14520                           ;spi_pic16.c: 79: return;
 14521                           
 14522                           
 14523                           	psect	text51
 14524  10C5                     __ptext51:	
 14525 ;; *************** function i1__Modify *****************
 14526 ;; Defined at:
 14527 ;;		line 261 in file "../src/CAN_SPI_PIC16.c"
 14528 ;; Parameters:    Size  Location     Type
 14529 ;;  reg             1    wreg     unsigned char 
 14530 ;;  mask            1    1[COMMON] unsigned char 
 14531 ;;  value           1    2[COMMON] unsigned char 
 14532 ;; Auto vars:     Size  Location     Type
 14533 ;;  reg             1    3[COMMON] unsigned char 
 14534 ;; Return value:  Size  Location     Type
 14535 ;;                  1    wreg      void 
 14536 ;; Registers used:
 14537 ;;		wreg, status,2, status,0, pclath, cstack
 14538 ;; Tracked objects:
 14539 ;;		On entry : 0/0
 14540 ;;		On exit  : 0/0
 14541 ;;		Unchanged: 0/0
 14542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14543 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14544 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14546 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14547 ;;Total ram usage:        3 bytes
 14548 ;; Hardware stack levels used:    1
 14549 ;; Hardware stack levels required when called:    1
 14550 ;; This function calls:
 14551 ;;		i1_SPI1_Put
 14552 ;; This function is called by:
 14553 ;;		_MCP2515_ISR
 14554 ;;		i1__SendBuffer
 14555 ;; This function uses a non-reentrant model
 14556 ;;
 14557                           
 14558                           
 14559                           ;psect for function i1__Modify
 14560  10C5                     i1__Modify:	
 14561                           
 14562                           ;incstack = 0
 14563                           ; Regs used in i1__Modify: [wreg+status,2+status,0+pclath+cstack]
 14564                           ;i1__Modify@reg stored from wreg
 14565  10C5  00F3               	movwf	i1__Modify@reg
 14566                           
 14567                           ;CAN_SPI_PIC16.c: 263: LATBbits.LATB4 = 0;
 14568  10C6  0140               	movlb	0	; select bank0
 14569  10C7  1219               	bcf	25,4	;volatile
 14570                           
 14571                           ;CAN_SPI_PIC16.c: 265: SPI1_Put( 0X05 );
 14572  10C8  3005               	movlw	5
 14573  10C9  3190  203C  3190   	fcall	i1_SPI1_Put
 14574                           
 14575                           ;CAN_SPI_PIC16.c: 266: SPI1_Put( reg );
 14576  10CC  0873               	movf	i1__Modify@reg,w
 14577  10CD  3190  203C  3190   	fcall	i1_SPI1_Put
 14578                           
 14579                           ;CAN_SPI_PIC16.c: 267: SPI1_Put( mask );
 14580  10D0  0871               	movf	i1__Modify@mask,w
 14581  10D1  3190  203C  3190   	fcall	i1_SPI1_Put
 14582                           
 14583                           ;CAN_SPI_PIC16.c: 268: SPI1_Put( value );
 14584  10D4  0872               	movf	i1__Modify@value,w
 14585  10D5  3190  203C         	fcall	i1_SPI1_Put
 14586                           
 14587                           ;CAN_SPI_PIC16.c: 270: LATBbits.LATB4 = 1;
 14588  10D7  0140               	movlb	0	; select bank0
 14589  10D8  1619               	bsf	25,4	;volatile
 14590  10D9  0008               	return
 14591  10DA                     __end_ofi1__Modify:	
 14592                           
 14593                           	psect	text52
 14594  111E                     __ptext52:	
 14595 ;; *************** function i1__Read *****************
 14596 ;; Defined at:
 14597 ;;		line 232 in file "../src/CAN_SPI_PIC16.c"
 14598 ;; Parameters:    Size  Location     Type
 14599 ;;  reg             1    wreg     unsigned char 
 14600 ;;  pBuf            2    3[COMMON] PTR unsigned char 
 14601 ;;		 -> CAN_isBusOff@_errFlags(1), MCP2515_ISR@_errFlags(1), MCP2515_ISR@_intFlags2(1), CAN_rxMessageQ.m_entry(208), 
 14602 ;;		 -> CAN_TxMailbox@bufStatus(1), CAN_rxMessageQ(210), _canMode(1), 
 14603 ;;  count           1    5[COMMON] unsigned char 
 14604 ;; Auto vars:     Size  Location     Type
 14605 ;;  reg             1    7[COMMON] unsigned char 
 14606 ;; Return value:  Size  Location     Type
 14607 ;;                  1    wreg      void 
 14608 ;; Registers used:
 14609 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14610 ;; Tracked objects:
 14611 ;;		On entry : 0/0
 14612 ;;		On exit  : 0/0
 14613 ;;		Unchanged: 0/0
 14614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14615 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14616 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14617 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14618 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14619 ;;Total ram usage:        5 bytes
 14620 ;; Hardware stack levels used:    1
 14621 ;; Hardware stack levels required when called:    1
 14622 ;; This function calls:
 14623 ;;		i1_SPI1_GetBuffer
 14624 ;;		i1_SPI1_Put
 14625 ;; This function is called by:
 14626 ;;		_MCP2515_ISR
 14627 ;; This function uses a non-reentrant model
 14628 ;;
 14629                           
 14630                           
 14631                           ;psect for function i1__Read
 14632  111E                     i1__Read:	
 14633                           
 14634                           ;incstack = 0
 14635                           ; Regs used in i1__Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14636                           ;i1__Read@reg stored from wreg
 14637  111E  00F7               	movwf	i1__Read@reg
 14638                           
 14639                           ;CAN_SPI_PIC16.c: 234: LATBbits.LATB4 = 0;
 14640  111F  0140               	movlb	0	; select bank0
 14641  1120  1219               	bcf	25,4	;volatile
 14642                           
 14643                           ;CAN_SPI_PIC16.c: 236: SPI1_Put( 3 );
 14644  1121  3003               	movlw	3
 14645  1122  3190  203C  3191   	fcall	i1_SPI1_Put
 14646                           
 14647                           ;CAN_SPI_PIC16.c: 237: SPI1_Put( reg );
 14648  1125  0877               	movf	i1__Read@reg,w
 14649  1126  3190  203C  3191   	fcall	i1_SPI1_Put
 14650                           
 14651                           ;CAN_SPI_PIC16.c: 238: SPI1_GetBuffer( pBuf, count );
 14652  1129  0874               	movf	i1__Read@pBuf+1,w
 14653  112A  00F1               	movwf	i1SPI1_GetBuffer@pBuf+1
 14654  112B  0873               	movf	i1__Read@pBuf,w
 14655  112C  00F0               	movwf	i1SPI1_GetBuffer@pBuf
 14656  112D  0875               	movf	i1__Read@count,w
 14657  112E  00F6               	movwf	??i1__Read
 14658  112F  0876               	movf	??i1__Read,w
 14659  1130  00F2               	movwf	i1SPI1_GetBuffer@count
 14660  1131  3190  20B0         	fcall	i1_SPI1_GetBuffer
 14661                           
 14662                           ;CAN_SPI_PIC16.c: 240: LATBbits.LATB4 = 1;
 14663  1133  0140               	movlb	0	; select bank0
 14664  1134  1619               	bsf	25,4	;volatile
 14665  1135  0008               	return
 14666  1136                     __end_ofi1__Read:	
 14667                           
 14668                           	psect	text53
 14669  1106                     __ptext53:	
 14670 ;; *************** function __RxCommand *****************
 14671 ;; Defined at:
 14672 ;;		line 290 in file "../src/CAN_SPI_PIC16.c"
 14673 ;; Parameters:    Size  Location     Type
 14674 ;;  cmd             1    wreg     unsigned char 
 14675 ;;  p               1    3[COMMON] PTR void 
 14676 ;;		 -> MCP2515_ISR@_intFlags(1), 
 14677 ;;  count           1    4[COMMON] unsigned char 
 14678 ;; Auto vars:     Size  Location     Type
 14679 ;;  cmd             1    6[COMMON] unsigned char 
 14680 ;;  pBuf            1    7[COMMON] PTR unsigned char 
 14681 ;;		 -> MCP2515_ISR@_intFlags(1), 
 14682 ;; Return value:  Size  Location     Type
 14683 ;;                  1    wreg      void 
 14684 ;; Registers used:
 14685 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14686 ;; Tracked objects:
 14687 ;;		On entry : 0/0
 14688 ;;		On exit  : 0/0
 14689 ;;		Unchanged: 0/0
 14690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14691 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14692 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14693 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14694 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14695 ;;Total ram usage:        5 bytes
 14696 ;; Hardware stack levels used:    1
 14697 ;; Hardware stack levels required when called:    1
 14698 ;; This function calls:
 14699 ;;		i1_SPI1_GetBuffer
 14700 ;;		i1_SPI1_Put
 14701 ;; This function is called by:
 14702 ;;		_MCP2515_ISR
 14703 ;; This function uses a non-reentrant model
 14704 ;;
 14705                           
 14706                           
 14707                           ;psect for function __RxCommand
 14708  1106                     __RxCommand:	
 14709                           
 14710                           ;incstack = 0
 14711                           ; Regs used in __RxCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14712                           ;__RxCommand@cmd stored from wreg
 14713  1106  00F6               	movwf	__RxCommand@cmd
 14714                           
 14715                           ;CAN_SPI_PIC16.c: 292: uint8_t *pBuf = (uint8_t *)p;
 14716  1107  0873               	movf	__RxCommand@p,w
 14717  1108  00F5               	movwf	??__RxCommand
 14718  1109  0875               	movf	??__RxCommand,w
 14719  110A  00F7               	movwf	__RxCommand@pBuf
 14720                           
 14721                           ;CAN_SPI_PIC16.c: 294: LATBbits.LATB4 = 0;
 14722  110B  0140               	movlb	0	; select bank0
 14723  110C  1219               	bcf	25,4	;volatile
 14724                           
 14725                           ;CAN_SPI_PIC16.c: 296: SPI1_Put( cmd );
 14726  110D  0876               	movf	__RxCommand@cmd,w
 14727  110E  3190  203C  3191   	fcall	i1_SPI1_Put
 14728                           
 14729                           ;CAN_SPI_PIC16.c: 297: SPI1_GetBuffer( pBuf, count );
 14730  1111  0877               	movf	__RxCommand@pBuf,w
 14731  1112  00F0               	movwf	i1SPI1_GetBuffer@pBuf
 14732  1113  3000               	movlw	0
 14733  1114  00F1               	movwf	i1SPI1_GetBuffer@pBuf+1
 14734  1115  0874               	movf	__RxCommand@count,w
 14735  1116  00F5               	movwf	??__RxCommand
 14736  1117  0875               	movf	??__RxCommand,w
 14737  1118  00F2               	movwf	i1SPI1_GetBuffer@count
 14738  1119  3190  20B0         	fcall	i1_SPI1_GetBuffer
 14739                           
 14740                           ;CAN_SPI_PIC16.c: 299: LATBbits.LATB4 = 1;
 14741  111B  0140               	movlb	0	; select bank0
 14742  111C  1619               	bsf	25,4	;volatile
 14743  111D  0008               	return
 14744  111E                     __end_of__RxCommand:	
 14745                           
 14746                           	psect	text54
 14747  103C                     __ptext54:	
 14748 ;; *************** function i1_SPI1_Put *****************
 14749 ;; Defined at:
 14750 ;;		line 47 in file "../src/spi_pic16.c"
 14751 ;; Parameters:    Size  Location     Type
 14752 ;;  c               1    wreg     unsigned char 
 14753 ;; Auto vars:     Size  Location     Type
 14754 ;;  c               1    0[COMMON] unsigned char 
 14755 ;; Return value:  Size  Location     Type
 14756 ;;                  1    wreg      void 
 14757 ;; Registers used:
 14758 ;;		wreg
 14759 ;; Tracked objects:
 14760 ;;		On entry : 0/0
 14761 ;;		On exit  : 0/0
 14762 ;;		Unchanged: 0/0
 14763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14765 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14767 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14768 ;;Total ram usage:        1 bytes
 14769 ;; Hardware stack levels used:    1
 14770 ;; This function calls:
 14771 ;;		Nothing
 14772 ;; This function is called by:
 14773 ;;		__RxCommand
 14774 ;;		i1__Read
 14775 ;;		i1__Write
 14776 ;;		i1__Modify
 14777 ;; This function uses a non-reentrant model
 14778 ;;
 14779                           
 14780                           
 14781                           ;psect for function i1_SPI1_Put
 14782  103C                     i1_SPI1_Put:	
 14783                           
 14784                           ;incstack = 0
 14785                           ; Regs used in i1_SPI1_Put: [wreg]
 14786                           ;i1SPI1_Put@c stored from wreg
 14787  103C  00F0               	movwf	i1SPI1_Put@c
 14788                           
 14789                           ;spi_pic16.c: 49: SSP1BUF = c;
 14790  103D  0870               	movf	i1SPI1_Put@c,w
 14791  103E  0143               	movlb	3	; select bank3
 14792  103F  008C               	movwf	12	;volatile
 14793  1040                     i1l565:	
 14794                           ;spi_pic16.c: 51: ;
 14795                           
 14796                           ;spi_pic16.c: 50: while( SSP1STATbits.BF == 0 )
 14797                           
 14798  1040  180F               	btfsc	15,0	;volatile
 14799  1041  0008               	return
 14800  1042  2840               	goto	i1l565
 14801  1043                     __end_ofi1_SPI1_Put:	
 14802                           
 14803                           	psect	text55
 14804  10B0                     __ptext55:	
 14805 ;; *************** function i1_SPI1_GetBuffer *****************
 14806 ;; Defined at:
 14807 ;;		line 97 in file "../src/spi_pic16.c"
 14808 ;; Parameters:    Size  Location     Type
 14809 ;;  pBuf            2    0[COMMON] PTR unsigned char 
 14810 ;;		 -> CAN_isBusOff@_errFlags(1), MCP2515_ISR@_errFlags(1), MCP2515_ISR@_intFlags2(1), MCP2515_ISR@_intFlags(1), 
 14811 ;;		 -> CAN_rxMessageQ.m_entry(208), CAN_TxMailbox@bufStatus(1), CAN_rxMessageQ(210), _canMode(1), 
 14812 ;;  count           1    2[COMMON] unsigned char 
 14813 ;; Auto vars:     Size  Location     Type
 14814 ;;		None
 14815 ;; Return value:  Size  Location     Type
 14816 ;;                  1    wreg      void 
 14817 ;; Registers used:
 14818 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14819 ;; Tracked objects:
 14820 ;;		On entry : 0/0
 14821 ;;		On exit  : 0/0
 14822 ;;		Unchanged: 0/0
 14823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14824 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14827 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14828 ;;Total ram usage:        3 bytes
 14829 ;; Hardware stack levels used:    1
 14830 ;; This function calls:
 14831 ;;		Nothing
 14832 ;; This function is called by:
 14833 ;;		__RxCommand
 14834 ;;		i1__Read
 14835 ;; This function uses a non-reentrant model
 14836 ;;
 14837                           
 14838                           
 14839                           ;psect for function i1_SPI1_GetBuffer
 14840  10B0                     i1_SPI1_GetBuffer:	
 14841  10B0                     i1l5795:	
 14842                           ;spi_pic16.c: 99: while( count > 0 )
 14843                           
 14844                           ;incstack = 0
 14845                           ; Regs used in i1_SPI1_GetBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
 14846                           
 14847  10B0  0872               	movf	i1SPI1_GetBuffer@count,w
 14848  10B1  1903               	btfsc	3,2
 14849  10B2  0008               	return
 14850                           
 14851                           ;spi_pic16.c: 100: {
 14852                           ;spi_pic16.c: 101: count--;
 14853  10B3  3001               	movlw	1
 14854  10B4  02F2               	subwf	i1SPI1_GetBuffer@count,f
 14855                           
 14856                           ;spi_pic16.c: 102: SSP1BUF = 0xFF;
 14857  10B5  30FF               	movlw	255
 14858  10B6  0143               	movlb	3	; select bank3
 14859  10B7  008C               	movwf	12	;volatile
 14860  10B8                     i1l588:	
 14861                           ;spi_pic16.c: 104: ;
 14862                           
 14863                           ;spi_pic16.c: 103: while( SSP1STATbits.BF == 0 )
 14864                           
 14865  10B8  1C0F               	btfss	15,0	;volatile
 14866  10B9  28B8               	goto	i1l588
 14867                           
 14868                           ;spi_pic16.c: 105: *pBuf++ = SSP1BUF;
 14869  10BA  0870               	movf	i1SPI1_GetBuffer@pBuf,w
 14870  10BB  0086               	movwf	6
 14871  10BC  0871               	movf	i1SPI1_GetBuffer@pBuf+1,w
 14872  10BD  0087               	movwf	7
 14873  10BE  080C               	movf	12,w	;volatile
 14874  10BF  0081               	movwf	1
 14875  10C0  3001               	movlw	1
 14876  10C1  07F0               	addwf	i1SPI1_GetBuffer@pBuf,f
 14877  10C2  3000               	movlw	0
 14878  10C3  3DF1               	addwfc	i1SPI1_GetBuffer@pBuf+1,f
 14879  10C4  28B0               	goto	i1l5795
 14880  10C5                     __end_ofi1_SPI1_GetBuffer:	
 14881                           
 14882                           	psect	text56
 14883  12D2                     __ptext56:	
 14884 ;; *************** function _EUSART_Transmit_ISR *****************
 14885 ;; Defined at:
 14886 ;;		line 85 in file "../src/EUSART.c"
 14887 ;; Parameters:    Size  Location     Type
 14888 ;;		None
 14889 ;; Auto vars:     Size  Location     Type
 14890 ;;		None
 14891 ;; Return value:  Size  Location     Type
 14892 ;;                  1    wreg      void 
 14893 ;; Registers used:
 14894 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14895 ;; Tracked objects:
 14896 ;;		On entry : 0/0
 14897 ;;		On exit  : 0/0
 14898 ;;		Unchanged: 0/0
 14899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14902 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14903 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14904 ;;Total ram usage:        1 bytes
 14905 ;; Hardware stack levels used:    1
 14906 ;; Hardware stack levels required when called:    1
 14907 ;; This function calls:
 14908 ;;		_EUSART_Parity_Count
 14909 ;; This function is called by:
 14910 ;;		_tc_int
 14911 ;; This function uses a non-reentrant model
 14912 ;;
 14913                           
 14914                           
 14915                           ;psect for function _EUSART_Transmit_ISR
 14916  12D2                     _EUSART_Transmit_ISR:	
 14917                           
 14918                           ;EUSART.c: 88: if(sizeof(EUSART_Tx_buffer) > EUSART_Tx_buffer_remaining)
 14919                           
 14920                           ;incstack = 0
 14921                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14922  12D2  301B               	movlw	27
 14923  12D3  0141               	movlb	1	; select bank1
 14924  12D4  0265               	subwf	_EUSART_Tx_buffer_remaining^(0+128),w
 14925  12D5  1803               	skipnc
 14926  12D6  2AFF               	goto	i1l942
 14927                           
 14928                           ;EUSART.c: 89: {
 14929                           ;EUSART.c: 90: TXSTA1bits.TX9D = EUSART_Parity_Count(EUSART_Tx_buffer[EUSART_Tx_tail]);
 14930  12D7  0140               	movlb	0	; select bank0
 14931  12D8  085D               	movf	_EUSART_Tx_tail,w
 14932  12D9  3E20               	addlw	(low (_EUSART_Tx_buffer| (0+512)))& (0+255)
 14933  12DA  0086               	movwf	6
 14934  12DB  3002               	movlw	2	; select bank4/5
 14935  12DC  0087               	movwf	7
 14936  12DD  0801               	movf	1,w
 14937  12DE  3193  2335         	fcall	_EUSART_Parity_Count
 14938  12E0  00F4               	movwf	??_EUSART_Transmit_ISR
 14939  12E1  0142               	movlb	2	; select bank2
 14940  12E2  081E               	movf	30,w	;volatile
 14941  12E3  0674               	xorwf	??_EUSART_Transmit_ISR,w
 14942  12E4  39FE               	andlw	-2
 14943  12E5  0674               	xorwf	??_EUSART_Transmit_ISR,w
 14944  12E6  009E               	movwf	30	;volatile
 14945                           
 14946                           ;EUSART.c: 91: TXREG1 = EUSART_Tx_buffer[EUSART_Tx_tail++];
 14947  12E7  0140               	movlb	0	; select bank0
 14948  12E8  085D               	movf	_EUSART_Tx_tail,w
 14949  12E9  3E20               	addlw	(low (_EUSART_Tx_buffer| (0+512)))& (0+255)
 14950  12EA  0086               	movwf	6
 14951  12EB  3002               	movlw	2	; select bank4/5
 14952  12EC  0087               	movwf	7
 14953  12ED  0801               	movf	1,w
 14954  12EE  0142               	movlb	2	; select bank2
 14955  12EF  009A               	movwf	26	;volatile
 14956  12F0  3001               	movlw	1
 14957  12F1  00F4               	movwf	??_EUSART_Transmit_ISR
 14958  12F2  0874               	movf	??_EUSART_Transmit_ISR,w
 14959  12F3  0140               	movlb	0	; select bank0
 14960  12F4  07DD               	addwf	_EUSART_Tx_tail,f
 14961                           
 14962                           ;EUSART.c: 92: if(sizeof(EUSART_Tx_buffer) <= EUSART_Tx_tail)
 14963  12F5  301B               	movlw	27
 14964  12F6  025D               	subwf	_EUSART_Tx_tail,w
 14965  12F7  1803               	btfsc	3,0
 14966                           
 14967                           ;EUSART.c: 93: {
 14968                           ;EUSART.c: 94: EUSART_Tx_tail = 0;
 14969  12F8  01DD               	clrf	_EUSART_Tx_tail
 14970                           
 14971                           ;EUSART.c: 95: }
 14972                           ;EUSART.c: 96: EUSART_Tx_buffer_remaining++;
 14973  12F9  3001               	movlw	1
 14974  12FA  00F4               	movwf	??_EUSART_Transmit_ISR
 14975  12FB  0874               	movf	??_EUSART_Transmit_ISR,w
 14976  12FC  0141               	movlb	1	; select bank1
 14977  12FD  07E5               	addwf	_EUSART_Tx_buffer_remaining^(0+128),f
 14978                           
 14979                           ;EUSART.c: 97: }
 14980  12FE  0008               	return
 14981  12FF                     i1l942:	
 14982                           
 14983                           ;EUSART.c: 98: else
 14984                           ;EUSART.c: 99: {
 14985                           ;EUSART.c: 100: PIE3bits.TX1IE = 0;
 14986  12FF  014E               	movlb	14	; select bank14
 14987  1300  1219               	bcf	25,4	;volatile
 14988  1301  0008               	return
 14989  1302                     __end_of_EUSART_Transmit_ISR:	
 14990                           ;EUSART.c: 101: }
 14991                           ;EUSART.c: 102: return;
 14992                           
 14993                           
 14994                           	psect	text57
 14995  1302                     __ptext57:	
 14996 ;; *************** function _EUSART_Receive_ISR *****************
 14997 ;; Defined at:
 14998 ;;		line 109 in file "../src/EUSART.c"
 14999 ;; Parameters:    Size  Location     Type
 15000 ;;		None
 15001 ;; Auto vars:     Size  Location     Type
 15002 ;;		None
 15003 ;; Return value:  Size  Location     Type
 15004 ;;                  1    wreg      void 
 15005 ;; Registers used:
 15006 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15007 ;; Tracked objects:
 15008 ;;		On entry : 0/0
 15009 ;;		On exit  : 0/0
 15010 ;;		Unchanged: 0/0
 15011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15014 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15015 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15016 ;;Total ram usage:        1 bytes
 15017 ;; Hardware stack levels used:    1
 15018 ;; Hardware stack levels required when called:    1
 15019 ;; This function calls:
 15020 ;;		_EUSART_Parity_Count
 15021 ;; This function is called by:
 15022 ;;		_tc_int
 15023 ;; This function uses a non-reentrant model
 15024 ;;
 15025                           
 15026                           
 15027                           ;psect for function _EUSART_Receive_ISR
 15028  1302                     _EUSART_Receive_ISR:	
 15029                           
 15030                           ;EUSART.c: 112: if(1 == RCSTA1bits.OERR)
 15031                           
 15032                           ;incstack = 0
 15033                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15034  1302  0142               	movlb	2	; select bank2
 15035  1303  1C9D               	btfss	29,1	;volatile
 15036  1304  2B07               	goto	i1l4905
 15037                           
 15038                           ;EUSART.c: 113: {
 15039                           ;EUSART.c: 116: RCSTA1bits.CREN = 0;
 15040  1305  121D               	bcf	29,4	;volatile
 15041                           
 15042                           ;EUSART.c: 117: RCSTA1bits.CREN = 1;
 15043  1306  161D               	bsf	29,4	;volatile
 15044  1307                     i1l4905:	
 15045                           
 15046                           ;EUSART.c: 118: }
 15047                           ;EUSART.c: 119: if(RCSTA1bits.RX9D != EUSART_Parity_Count(RCREG1))
 15048  1307  081D               	movf	29,w	;volatile
 15049  1308  3901               	andlw	1
 15050  1309  00F4               	movwf	??_EUSART_Receive_ISR
 15051  130A  0819               	movf	25,w	;volatile
 15052  130B  3193  2335  3193   	fcall	_EUSART_Parity_Count
 15053  130E  0674               	xorwf	??_EUSART_Receive_ISR,w
 15054  130F  1903               	skipnz
 15055  1310  2B14               	goto	i1l4909
 15056                           
 15057                           ;EUSART.c: 120: {
 15058                           ;EUSART.c: 121: EUSART_Rx_parity_error = 1;
 15059  1311  0141               	movlb	1	; select bank1
 15060  1312  01DF               	clrf	_EUSART_Rx_parity_error^(0+128)
 15061  1313  0ADF               	incf	_EUSART_Rx_parity_error^(0+128),f
 15062  1314                     i1l4909:	
 15063                           
 15064                           ;EUSART.c: 122: }
 15065                           ;EUSART.c: 125: EUSART_Rx_buffer[EUSART_Rx_head++] = RCREG1;
 15066  1314  0142               	movlb	2	; select bank2
 15067  1315  0819               	movf	25,w	;volatile
 15068  1316  00F4               	movwf	??_EUSART_Receive_ISR
 15069  1317  0140               	movlb	0	; select bank0
 15070  1318  085C               	movf	_EUSART_Rx_head,w
 15071  1319  3EA0               	addlw	(low (_EUSART_Rx_buffer| (0+256)))& (0+255)
 15072  131A  0086               	movwf	6
 15073  131B  3001               	movlw	1	; select bank3/4
 15074  131C  0087               	movwf	7
 15075  131D  0874               	movf	??_EUSART_Receive_ISR,w
 15076  131E  0081               	movwf	1
 15077  131F  3001               	movlw	1
 15078  1320  00F4               	movwf	??_EUSART_Receive_ISR
 15079  1321  0874               	movf	??_EUSART_Receive_ISR,w
 15080  1322  07DC               	addwf	_EUSART_Rx_head,f
 15081                           
 15082                           ;EUSART.c: 127: if(27 == EUSART_Rx_head)
 15083  1323  301B               	movlw	27
 15084  1324  065C               	xorwf	_EUSART_Rx_head,w
 15085  1325  1D03               	btfss	3,2
 15086  1326  2B2A               	goto	i1l4917
 15087                           
 15088                           ;EUSART.c: 128: {
 15089                           ;EUSART.c: 129: EUSART_receive_flag = 1;
 15090  1327  0141               	movlb	1	; select bank1
 15091  1328  01D9               	clrf	_EUSART_receive_flag^(0+128)
 15092  1329  0AD9               	incf	_EUSART_receive_flag^(0+128),f
 15093  132A                     i1l4917:	
 15094                           
 15095                           ;EUSART.c: 130: }
 15096                           ;EUSART.c: 131: if(sizeof(EUSART_Rx_buffer) <= EUSART_Rx_head)
 15097  132A  301B               	movlw	27
 15098  132B  0140               	movlb	0	; select bank0
 15099  132C  025C               	subwf	_EUSART_Rx_head,w
 15100  132D  1803               	btfsc	3,0
 15101                           
 15102                           ;EUSART.c: 132: {
 15103                           ;EUSART.c: 133: EUSART_Rx_head = 0;
 15104  132E  01DC               	clrf	_EUSART_Rx_head
 15105                           
 15106                           ;EUSART.c: 134: }
 15107                           ;EUSART.c: 135: EUSART_Rx_count++;
 15108  132F  3001               	movlw	1
 15109  1330  00F4               	movwf	??_EUSART_Receive_ISR
 15110  1331  0874               	movf	??_EUSART_Receive_ISR,w
 15111  1332  0141               	movlb	1	; select bank1
 15112  1333  07E3               	addwf	_EUSART_Rx_count^(0+128),f
 15113  1334  0008               	return
 15114  1335                     __end_of_EUSART_Receive_ISR:	
 15115                           ;EUSART.c: 136: return;
 15116                           
 15117                           
 15118                           	psect	text58
 15119  1335                     __ptext58:	
 15120 ;; *************** function _EUSART_Parity_Count *****************
 15121 ;; Defined at:
 15122 ;;		line 275 in file "../src/EUSART.c"
 15123 ;; Parameters:    Size  Location     Type
 15124 ;;  EUSART_byte_    1    wreg     unsigned char 
 15125 ;; Auto vars:     Size  Location     Type
 15126 ;;  EUSART_byte_    1    1[COMMON] unsigned char 
 15127 ;;  i               2    2[COMMON] int 
 15128 ;; Return value:  Size  Location     Type
 15129 ;;                  1    wreg      unsigned char 
 15130 ;; Registers used:
 15131 ;;		wreg, status,2, status,0
 15132 ;; Tracked objects:
 15133 ;;		On entry : 0/0
 15134 ;;		On exit  : 0/0
 15135 ;;		Unchanged: 0/0
 15136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15138 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15139 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15140 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15141 ;;Total ram usage:        4 bytes
 15142 ;; Hardware stack levels used:    1
 15143 ;; This function calls:
 15144 ;;		Nothing
 15145 ;; This function is called by:
 15146 ;;		_EUSART_Transmit_ISR
 15147 ;;		_EUSART_Receive_ISR
 15148 ;; This function uses a non-reentrant model
 15149 ;;
 15150                           
 15151                           
 15152                           ;psect for function _EUSART_Parity_Count
 15153  1335                     _EUSART_Parity_Count:	
 15154                           
 15155                           ;incstack = 0
 15156                           ; Regs used in _EUSART_Parity_Count: [wreg+status,2+status,0]
 15157                           ;EUSART_Parity_Count@EUSART_byte_parity stored from wreg
 15158  1335  00F1               	movwf	EUSART_Parity_Count@EUSART_byte_parity
 15159                           
 15160                           ;EUSART.c: 278: EUSART_parity_count = 0;
 15161  1336  0141               	movlb	1	; select bank1
 15162  1337  01E1               	clrf	_EUSART_parity_count^(0+128)
 15163                           
 15164                           ;EUSART.c: 281: for(int i = 0; i<8; i++)
 15165  1338  01F2               	clrf	EUSART_Parity_Count@i
 15166  1339  01F3               	clrf	EUSART_Parity_Count@i+1
 15167  133A  0873               	movf	EUSART_Parity_Count@i+1,w
 15168  133B  3A80               	xorlw	128
 15169  133C  00F0               	movwf	??_EUSART_Parity_Count
 15170  133D  3080               	movlw	128
 15171  133E  0270               	subwf	??_EUSART_Parity_Count,w
 15172  133F  3008               	movlw	8
 15173  1340  1903               	btfsc	3,2
 15174  1341  0272               	subwf	EUSART_Parity_Count@i,w
 15175  1342  1803               	btfsc	3,0
 15176  1343  2B62               	goto	i1l985
 15177  1344                     i1l4483:	
 15178                           
 15179                           ;EUSART.c: 282: {
 15180                           ;EUSART.c: 283: if( EUSART_byte_parity & 0x01 << i )
 15181  1344  3001               	movlw	1
 15182  1345  00F0               	movwf	??_EUSART_Parity_Count
 15183  1346  0A72               	incf	EUSART_Parity_Count@i,w
 15184  1347  2B49               	goto	u331_24
 15185  1348                     u331_25:	
 15186  1348  35F0               	lslf	??_EUSART_Parity_Count,f
 15187  1349                     u331_24:	
 15188  1349  0B89               	decfsz	9,f
 15189  134A  2B48               	goto	u331_25
 15190  134B  0870               	movf	??_EUSART_Parity_Count,w
 15191  134C  0571               	andwf	EUSART_Parity_Count@EUSART_byte_parity,w
 15192  134D  1903               	btfsc	3,2
 15193  134E  2B54               	goto	i1l4487
 15194                           
 15195                           ;EUSART.c: 284: {
 15196                           ;EUSART.c: 285: EUSART_parity_count++;
 15197  134F  3001               	movlw	1
 15198  1350  00F0               	movwf	??_EUSART_Parity_Count
 15199  1351  0870               	movf	??_EUSART_Parity_Count,w
 15200  1352  0141               	movlb	1	; select bank1
 15201  1353  07E1               	addwf	_EUSART_parity_count^(0+128),f
 15202  1354                     i1l4487:	
 15203  1354  3001               	movlw	1
 15204  1355  07F2               	addwf	EUSART_Parity_Count@i,f
 15205  1356  3000               	movlw	0
 15206  1357  3DF3               	addwfc	EUSART_Parity_Count@i+1,f
 15207  1358  0873               	movf	EUSART_Parity_Count@i+1,w
 15208  1359  3A80               	xorlw	128
 15209  135A  00F0               	movwf	??_EUSART_Parity_Count
 15210  135B  3080               	movlw	128
 15211  135C  0270               	subwf	??_EUSART_Parity_Count,w
 15212  135D  3008               	movlw	8
 15213  135E  1903               	btfsc	3,2
 15214  135F  0272               	subwf	EUSART_Parity_Count@i,w
 15215  1360  1C03               	skipc
 15216  1361  2B44               	goto	i1l4483
 15217  1362                     i1l985:	
 15218                           
 15219                           ;EUSART.c: 286: }
 15220                           ;EUSART.c: 287: }
 15221                           ;EUSART.c: 288: if( EUSART_parity_count % 2 )
 15222  1362  0141               	movlb	1	; select bank1
 15223  1363  1C61               	btfss	_EUSART_parity_count^(0+128),0
 15224  1364  2B67               	goto	i1l4497
 15225                           
 15226                           ;EUSART.c: 289: {
 15227                           ;EUSART.c: 290: return 1;
 15228  1365  3001               	movlw	1
 15229                           
 15230                           ;EUSART.c: 291: }
 15231  1366  0008               	return
 15232  1367                     i1l4497:	
 15233                           
 15234                           ;EUSART.c: 292: else
 15235                           ;EUSART.c: 293: {
 15236                           ;EUSART.c: 294: return 0;
 15237  1367  3000               	movlw	0
 15238  1368  0008               	return
 15239  1369                     __end_of_EUSART_Parity_Count:	
 15240  007E                     btemp	set	126	;btemp
 15241  007E                     int$flags	set	126
 15242  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    544
    Data        46
    BSS         222
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     46      63
    BANK1            80      4      80
    BANK2            80      0      78
    BANK3            80     10      80
    BANK4            80     24      51
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           12      0       0
    BANK21            0      0       0
    BANK22            0      0       0
    BANK23            0      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    __builtin_memcpy$1	PTR const void  size(2) Largest target is 210
		 -> CAN_rxMessageQ.data(BIGRAM[8]), can_send_message.buf(BANK3[8]), can_send_message(BANK3[14]), CAN_rxMessageQ(BIGRAM[210]), 
		 -> can.buf(COMMON[8]), J1939_Tx@can(COMMON[14]), 

    __builtin_memcpy$0	PTR void  size(2) Largest target is 210
		 -> Receive_CAN_Message@can(BANK4[14]), CAN_TxMailbox@buf(BANK4[13]), CAN_txMessageQ.m_entry(BIGRAM[208]), CAN_txMessageQ(BIGRAM[210]), 
		 -> J1939_CheckRx@can(COMMON[14]), 

    J1939_AppProcessStd$0	PTR struct . size(1) Largest target is 14
		 -> J1939_CheckRx@can(COMMON[14]), 

    J1939_AppProcess$0	PTR struct . size(1) Largest target is 11
		 -> j1939_post@msg(COMMON[10]), 

    memset@p1	PTR void  size(1) Largest target is 15
		 -> LED_COL(BANK2[5]), _enableInputState(BANK2[3]), _faultInputState(BANK2[3]), _extraSwitchState(BANK2[3]), 
		 -> _switchStates(BANK3[15]), MCP2515_diag(BANK2[12]), 

    memset@p	PTR unsigned char  size(1) Largest target is 15
		 -> LED_COL(BANK2[5]), _enableInputState(BANK2[3]), _faultInputState(BANK2[3]), _extraSwitchState(BANK2[3]), 
		 -> _switchStates(BANK3[15]), MCP2515_diag(BANK2[12]), 

    EUSART_TO_CAN@message	PTR struct . size(1) Largest target is 14
		 -> can_send_message(BANK3[14]), 

    CAN_To_EUSART@message	PTR struct . size(1) Largest target is 14
		 -> Receive_CAN_Message@can(BANK4[14]), 

    Buttons_Update@switch_state	PTR struct . size(1) Largest target is 14
		 -> can_send_message(BANK3[14]), 

    SPI1_GetBuffer@pBuf	PTR unsigned char  size(2) Largest target is 210
		 -> CAN_isBusOff@_errFlags(COMMON[1]), MCP2515_ISR@_errFlags(BANK0[1]), MCP2515_ISR@_intFlags2(BANK0[1]), MCP2515_ISR@_intFlags(BANK0[1]), 
		 -> CAN_rxMessageQ.m_entry(BIGRAM[208]), CAN_TxMailbox@bufStatus(BANK4[1]), CAN_rxMessageQ(BIGRAM[210]), _canMode(BANK0[1]), 

    SPI1_PutBuffer@pBuf	PTR unsigned char  size(2) Largest target is 210
		 -> _canConfig.filters(CODE[24]), _canConfig(CODE[32]), CAN_TxMailbox@buf(BANK4[13]), CAN_Initialize@temp8(BANK4[1]), 
		 -> CAN_Initialize@buf(BANK4[5]), CAN_txMessageQ.m_entry(BIGRAM[208]), CAN_txMessageQ(BIGRAM[210]), NULL(NULL[0]), 

    transmit_can_message_task@can_msg	PTR struct . size(1) Largest target is 14
		 -> can_send_message(BANK3[14]), 

    button_task@can_msg	PTR struct . size(1) Largest target is 14
		 -> can_send_message(BANK3[14]), 

    MCP2515_ISR@pBuf_581	PTR struct . size(2) Largest target is 210
		 -> CAN_txMessageQ.m_entry(BIGRAM[208]), CAN_txMessageQ(BIGRAM[210]), 

    MCP2515_ISR@pBuf_580	PTR struct . size(2) Largest target is 210
		 -> CAN_rxMessageQ.m_entry(BIGRAM[208]), CAN_rxMessageQ(BIGRAM[210]), 

    MCP2515_ISR@pBuf	PTR struct . size(2) Largest target is 210
		 -> CAN_rxMessageQ.m_entry(BIGRAM[208]), CAN_rxMessageQ(BIGRAM[210]), 

    CAN_Rx@ptr	PTR struct . size(2) Largest target is 14
		 -> Receive_CAN_Message@can(BANK4[14]), J1939_CheckRx@can(COMMON[14]), 

    CAN_Rx@pBuf	PTR struct . size(2) Largest target is 210
		 -> CAN_rxMessageQ.m_entry(BIGRAM[208]), CAN_rxMessageQ(BIGRAM[210]), 

    CAN_TxMailbox@pFrame	PTR struct . size(2) Largest target is 14
		 -> can_send_message(BANK3[14]), J1939_Tx@can(COMMON[14]), 

    CAN_Tx@pFrame	PTR struct . size(2) Largest target is 14
		 -> can_send_message(BANK3[14]), J1939_Tx@can(COMMON[14]), 

    sp__memset	PTR void  size(1) Largest target is 15
		 -> LED_COL(BANK2[5]), _enableInputState(BANK2[3]), _faultInputState(BANK2[3]), _extraSwitchState(BANK2[3]), 
		 -> _switchStates(BANK3[15]), MCP2515_diag(BANK2[12]), 

    CAN_Initialize@pConfig	PTR const void  size(2) Largest target is 32
		 -> _canConfig(CODE[32]), 

    CAN_Initialize@p	PTR struct . size(2) Largest target is 32
		 -> _canConfig(CODE[32]), 

    _EnqueueTxMessage@pFrame	PTR struct . size(2) Largest target is 14
		 -> can_send_message(BANK3[14]), J1939_Tx@can(COMMON[14]), 

    _EnqueueTxMessage@pBuf	PTR struct . size(2) Largest target is 210
		 -> CAN_txMessageQ.m_entry(BIGRAM[208]), CAN_txMessageQ(BIGRAM[210]), 

    _SendBuffer@pBuf	PTR struct . size(2) Largest target is 210
		 -> CAN_TxMailbox@buf(BANK4[13]), CAN_txMessageQ.m_entry(BIGRAM[208]), CAN_txMessageQ(BIGRAM[210]), 

    _RxCommand@p	PTR void  size(1) Largest target is 1
		 -> MCP2515_ISR@_intFlags(BANK0[1]), 

    _RxCommand@pBuf	PTR unsigned char  size(1) Largest target is 1
		 -> MCP2515_ISR@_intFlags(BANK0[1]), 

    _TxCommand@pBuf	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    _Write@pBuf	PTR unsigned char  size(2) Largest target is 210
		 -> _canConfig.filters(CODE[24]), _canConfig(CODE[32]), CAN_TxMailbox@buf(BANK4[13]), CAN_Initialize@temp8(BANK4[1]), 
		 -> CAN_Initialize@buf(BANK4[5]), CAN_txMessageQ.m_entry(BIGRAM[208]), CAN_txMessageQ(BIGRAM[210]), 

    _Read@pBuf	PTR unsigned char  size(2) Largest target is 210
		 -> CAN_isBusOff@_errFlags(COMMON[1]), MCP2515_ISR@_errFlags(BANK0[1]), MCP2515_ISR@_intFlags2(BANK0[1]), CAN_rxMessageQ.m_entry(BIGRAM[208]), 
		 -> CAN_TxMailbox@bufStatus(BANK4[1]), CAN_rxMessageQ(BIGRAM[210]), _canMode(BANK0[1]), 

    _MessageToTxBuffer@pBuf	PTR struct . size(2) Largest target is 210
		 -> CAN_TxMailbox@buf(BANK4[13]), CAN_txMessageQ.m_entry(BIGRAM[208]), CAN_txMessageQ(BIGRAM[210]), 

    _MessageToTxBuffer@pFrame	PTR struct . size(2) Largest target is 14
		 -> can_send_message(BANK3[14]), J1939_Tx@can(COMMON[14]), 

    sp____builtin_memcpy	PTR void  size(2) Largest target is 8192
		 -> RAM(DATA[8192]), 

    _RxBufferToMessage@pMsg	PTR struct . size(2) Largest target is 14
		 -> Receive_CAN_Message@can(BANK4[14]), J1939_CheckRx@can(COMMON[14]), 

    _RxBufferToMessage@p	PTR struct . size(2) Largest target is 210
		 -> CAN_rxMessageQ.m_entry(BIGRAM[208]), CAN_rxMessageQ(BIGRAM[210]), 

    j1939tp_post_dt@msg.buf	PTR unsigned char  size(1) Largest target is 14
		 -> j1939tp_tx_ack@buf(COMMON[8]), j1939tp_tx_cts@buf(COMMON[8]), j1939tp_tx_abort@buf(COMMON[8]), J1939_CheckRx@can(COMMON[14]), 

    j1939tp_post_cm@msg.buf	PTR unsigned char  size(1) Largest target is 14
		 -> j1939tp_tx_ack@buf(COMMON[8]), j1939tp_tx_cts@buf(COMMON[8]), j1939tp_tx_abort@buf(COMMON[8]), J1939_CheckRx@can(COMMON[14]), 

    msg_tx.buf	PTR unsigned char  size(1) Largest target is 14
		 -> j1939tp_tx_ack@buf(COMMON[8]), j1939tp_tx_cts@buf(COMMON[8]), j1939tp_tx_abort@buf(COMMON[8]), J1939_CheckRx@can(COMMON[14]), 

    msg_tx.buf	PTR unsigned char  size(1) Largest target is 14
		 -> j1939tp_tx_ack@buf(COMMON[8]), j1939tp_tx_cts@buf(COMMON[8]), j1939tp_tx_abort@buf(COMMON[8]), J1939_CheckRx@can(COMMON[14]), 

    msg_tx.buf	PTR unsigned char  size(1) Largest target is 14
		 -> j1939tp_tx_ack@buf(COMMON[8]), j1939tp_tx_cts@buf(COMMON[8]), j1939tp_tx_abort@buf(COMMON[8]), J1939_CheckRx@can(COMMON[14]), 

    msg.buf	PTR unsigned char  size(1) Largest target is 14
		 -> can.buf(COMMON[8]), j1939tp_tx_ack@buf(COMMON[8]), j1939tp_tx_cts@buf(COMMON[8]), j1939tp_tx_abort@buf(COMMON[8]), 
		 -> J1939_CheckRx@can(COMMON[14]), 

    J1939_AppTx@msg.buf	PTR unsigned char  size(1) Largest target is 14
		 -> j1939tp_tx_ack@buf(COMMON[8]), j1939tp_tx_cts@buf(COMMON[8]), j1939tp_tx_abort@buf(COMMON[8]), J1939_CheckRx@can(COMMON[14]), 

    J1939_Tx@msg.buf	PTR unsigned char  size(1) Largest target is 14
		 -> j1939tp_tx_ack@buf(COMMON[8]), j1939tp_tx_cts@buf(COMMON[8]), j1939tp_tx_abort@buf(COMMON[8]), J1939_CheckRx@can(COMMON[14]), 

    S23$buf	PTR unsigned char  size(1) Largest target is 14
		 -> j1939tp_tx_ack@buf(COMMON[8]), j1939tp_tx_cts@buf(COMMON[8]), j1939tp_tx_abort@buf(COMMON[8]), J1939_CheckRx@can(COMMON[14]), 

    j1939_process@msg.buf	PTR unsigned char  size(1) Largest target is 14
		 -> j1939tp_tx_ack@buf(COMMON[8]), j1939tp_tx_cts@buf(COMMON[8]), j1939tp_tx_abort@buf(COMMON[8]), J1939_CheckRx@can(COMMON[14]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _tc_int in COMMON

    _MCP2515_ISR->i1__SendBuffer
    i1__SendBuffer->i1__Write
    i1__Write->i1_SPI1_PutBuffer
    i1__Modify->i1_SPI1_Put
    i1__Read->i1_SPI1_GetBuffer
    __RxCommand->i1_SPI1_GetBuffer
    _EUSART_Transmit_ISR->_EUSART_Parity_Count
    _EUSART_Receive_ISR->_EUSART_Parity_Count

Critical Paths under _main in BANK0

    _main->_transmit_can_message_task
    _update_graphics->_EUSART_Receive
    _CAN_Tx->_CAN_TxMailbox
    __EnqueueTxMessage->__MessageToTxBuffer
    _CAN_TxMailbox->__MessageToTxBuffer
    __SendBuffer->__Write
    _CAN_Wakeup->__SetMode
    _CAN_Sleep->__SetMode
    _led_task->_Update_LEDs
    _Receive_CAN_Message->_CAN_Rx
    _CAN_Rx->__RxBufferToMessage
    _button_task->_Buttons_Update
    _Buttons_Update->_Button_Debounce
    _CAN_Initialize->__SetMode
    __Write->_SPI1_PutBuffer
    __TxCommand->_SPI1_PutBuffer
    __SetMode->__Read
    __Read->_SPI1_GetBuffer
    __Modify->_SPI1_Put

Critical Paths under _tc_int in BANK0

    _tc_int->_MCP2515_ISR

Critical Paths under _main in BANK1

    _transmit_can_message_task->_CAN_Tx

Critical Paths under _tc_int in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_int in BANK2

    None.

Critical Paths under _main in BANK3

    _transmit_can_message_task->_CAN_Tx
    _CAN_Tx->__EnqueueTxMessage

Critical Paths under _tc_int in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_transmit_can_message_task
    _CAN_Tx->_CAN_TxMailbox
    _handle_can_messages_from_VCU->_Receive_CAN_Message

Critical Paths under _tc_int in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _tc_int in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _tc_int in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _tc_int in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _tc_int in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _tc_int in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _tc_int in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _tc_int in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _tc_int in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _tc_int in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _tc_int in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _tc_int in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _tc_int in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _tc_int in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _tc_int in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _tc_int in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _tc_int in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _tc_int in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _tc_int in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _tc_int in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _tc_int in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _tc_int in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   30773
                                              2 BANK1      2     2      0
                 _Buttons_Initialize
                     _CAN_Initialize
                  _EUSART_Initialize
                     _LED_Initialize
                  _SYSTEM_Initialize
                            __Wakeup
                        _button_task
             _direction_message_task
       _handle_can_messages_from_VCU
                           _led_task
                    _power_down_task
          _transmit_can_message_task
                    _update_graphics
 ---------------------------------------------------------------------------------
 (1) _update_graphics                                      0     0      0     248
              _EUSART_Master_Request
                     _EUSART_Receive
 ---------------------------------------------------------------------------------
 (2) _EUSART_Receive                                       6     6      0     136
                                             17 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Master_Request                                3     3      0     112
                                             17 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _transmit_can_message_task                            9     9      0    9311
                                             45 BANK0      1     1      0
                                             16 BANK4      8     8      0
                             _CAN_Tx
                      _EUSART_TO_CAN
 ---------------------------------------------------------------------------------
 (2) _EUSART_TO_CAN                                        5     5      0     963
                                             17 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _CAN_Tx                                               6     4      2    8284
                                              0 BANK1      2     0      2
                                              6 BANK3      4     4      0
                      _CAN_TxMailbox
                  __EnqueueTxMessage
 ---------------------------------------------------------------------------------
 (3) __EnqueueTxMessage                                   10     8      2    2267
                                             40 BANK0      4     2      2
                                              0 BANK3      6     6      0
                 __MessageToTxBuffer
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _CAN_TxMailbox                                       21    17      4    5850
                                             40 BANK0      5     1      4
                                              0 BANK4     16    16      0
                 __MessageToTxBuffer
                              __Read
                        __SendBuffer
 ---------------------------------------------------------------------------------
 (4) __SendBuffer                                          5     3      2    2852
                                             25 BANK0      5     3      2
                            __Modify
                             __Write
 ---------------------------------------------------------------------------------
 (4) __MessageToTxBuffer                                  23    19      4    1278
                                             17 BANK0     23    19      4
 ---------------------------------------------------------------------------------
 (1) _power_down_task                                      8     8      0    5859
                                              0 BANK3      8     8      0
                       _SYSTEM_Sleep
                            __Wakeup
 ---------------------------------------------------------------------------------
 (2) __Wakeup                                              0     0      0    3559
                  _EUSART_Initialize
                      _SYSTEM_Wakeup
                             _memset
 ---------------------------------------------------------------------------------
 (3) _SYSTEM_Wakeup                                        0     0      0    2300
                         _CAN_Wakeup
 ---------------------------------------------------------------------------------
 (4) _CAN_Wakeup                                           0     0      0    2300
                           __SetMode
 ---------------------------------------------------------------------------------
 (3) _EUSART_Initialize                                    1     1      0       0
                                             17 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Sleep                                         0     0      0    2300
                          _CAN_Sleep
 ---------------------------------------------------------------------------------
 (3) _CAN_Sleep                                            0     0      0    2300
                           __SetMode
 ---------------------------------------------------------------------------------
 (1) _led_task                                             8     8      0     108
                                             20 BANK0      8     8      0
                        _Update_LEDs
 ---------------------------------------------------------------------------------
 (2) _Update_LEDs                                          3     1      2     108
                                             17 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _handle_can_messages_from_VCU                         8     8      0    4054
                                              0 BANK3      8     8      0
                _Receive_CAN_Message
 ---------------------------------------------------------------------------------
 (2) _Receive_CAN_Message                                 15    15      0    4054
                                              0 BANK4     15    15      0
                             _CAN_Rx
                      _CAN_To_EUSART
 ---------------------------------------------------------------------------------
 (3) _CAN_To_EUSART                                        7     7      0    1803
                                             17 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _CAN_Rx                                              10     8      2    1787
                                             35 BANK0     10     8      2
                 __RxBufferToMessage
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     850
                                             17 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) __RxBufferToMessage                                  18    14      4     767
                                             17 BANK0     18    14      4
 ---------------------------------------------------------------------------------
 (1) _direction_message_task                               8     8      0       0
                                             17 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (1) _button_task                                          9     9      0     228
                                             23 BANK0      9     9      0
                     _Buttons_Update
 ---------------------------------------------------------------------------------
 (2) _Buttons_Update                                       3     2      1     176
                                             20 BANK0      3     2      1
                    _Button_Debounce
           _Get_Settings_Lock_Status
 ---------------------------------------------------------------------------------
 (3) _Get_Settings_Lock_Status                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Button_Debounce                                      3     3      0      46
                                             17 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Initialize                                       1     1      0       0
                                             17 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _CAN_Initialize                                      14    12      2    7400
                                             39 BANK0      3     1      2
                                              0 BANK4     11    11      0
                    _SPI1_Initialize
                            __Modify
                           __SetMode
                         __TxCommand
                             __Write
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               7     3      4    1259
                                             17 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) __Write                                               5     2      3    1732
                                             20 BANK0      5     2      3
                           _SPI1_Put
                     _SPI1_PutBuffer
 ---------------------------------------------------------------------------------
 (2) __TxCommand                                           4     2      2     654
                                             20 BANK0      4     2      2
                           _SPI1_Put
                     _SPI1_PutBuffer
 ---------------------------------------------------------------------------------
 (6) _SPI1_PutBuffer                                       3     0      3     376
                                             17 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (5) __SetMode                                            14    14      0    2300
                                             25 BANK0     14    14      0
                            __Modify
                              __Read
 ---------------------------------------------------------------------------------
 (4) __Read                                                5     2      3    1228
                                             20 BANK0      5     2      3
                     _SPI1_GetBuffer
                           _SPI1_Put
 ---------------------------------------------------------------------------------
 (5) _SPI1_GetBuffer                                       3     0      3     306
                                             17 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (5) __Modify                                              3     1      2     908
                                             18 BANK0      3     1      2
                           _SPI1_Put
 ---------------------------------------------------------------------------------
 (6) _SPI1_Put                                             1     1      0      31
                                             17 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Buttons_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _tc_int                                               3     3      0    2932
                                             13 COMMON     1     1      0
                                             15 BANK0      2     2      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                        _MCP2515_ISR
 ---------------------------------------------------------------------------------
 (9) _MCP2515_ISR                                         15    15      0    2718
                                              0 BANK0     15    15      0
                         __RxCommand
                          i1__Modify
                            i1__Read
                      i1__SendBuffer
                           i1___wmul
 ---------------------------------------------------------------------------------
 (10) i1___wmul                                            6     2      4     248
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) i1__SendBuffer                                       5     3      2     695
                                              8 COMMON     5     3      2
                          i1__Modify
                           i1__Write
 ---------------------------------------------------------------------------------
 (11) i1__Write                                            5     2      3     323
                                              3 COMMON     5     2      3
                         i1_SPI1_Put
                   i1_SPI1_PutBuffer
 ---------------------------------------------------------------------------------
 (12) i1_SPI1_PutBuffer                                    3     0      3     138
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (11) i1__Modify                                           3     1      2     244
                                              1 COMMON     3     1      2
                         i1_SPI1_Put
 ---------------------------------------------------------------------------------
 (10) i1__Read                                             5     2      3     603
                                              3 COMMON     5     2      3
                   i1_SPI1_GetBuffer
                         i1_SPI1_Put
 ---------------------------------------------------------------------------------
 (10) __RxCommand                                          5     3      2     511
                                              3 COMMON     5     3      2
                   i1_SPI1_GetBuffer
                         i1_SPI1_Put
 ---------------------------------------------------------------------------------
 (12) i1_SPI1_Put                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) i1_SPI1_GetBuffer                                    3     0      3     208
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (9) _EUSART_Transmit_ISR                                  1     1      0      90
                                              4 COMMON     1     1      0
                _EUSART_Parity_Count
 ---------------------------------------------------------------------------------
 (9) _EUSART_Receive_ISR                                   1     1      0      90
                                              4 COMMON     1     1      0
                _EUSART_Parity_Count
 ---------------------------------------------------------------------------------
 (10) _EUSART_Parity_Count                                 4     4      0      90
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buttons_Initialize
   _CAN_Initialize
     _SPI1_Initialize
     __Modify
       _SPI1_Put
     __SetMode
       __Modify
         _SPI1_Put
       __Read
         _SPI1_GetBuffer
         _SPI1_Put
     __TxCommand
       _SPI1_Put
       _SPI1_PutBuffer
     __Write
       _SPI1_Put
       _SPI1_PutBuffer
     _memset
   _EUSART_Initialize
   _LED_Initialize
   _SYSTEM_Initialize
   __Wakeup
     _EUSART_Initialize
     _SYSTEM_Wakeup
       _CAN_Wakeup
         __SetMode
           __Modify
             _SPI1_Put
           __Read
             _SPI1_GetBuffer
             _SPI1_Put
     _memset
   _button_task
     _Buttons_Update
       _Button_Debounce
       _Get_Settings_Lock_Status
   _direction_message_task
   _handle_can_messages_from_VCU
     _Receive_CAN_Message
       _CAN_Rx
         __RxBufferToMessage
         ___wmul
       _CAN_To_EUSART
   _led_task
     _Update_LEDs
   _power_down_task
     _SYSTEM_Sleep
       _CAN_Sleep
         __SetMode
           __Modify
             _SPI1_Put
           __Read
             _SPI1_GetBuffer
             _SPI1_Put
     __Wakeup
       _EUSART_Initialize
       _SYSTEM_Wakeup
         _CAN_Wakeup
           __SetMode
             __Modify
               _SPI1_Put
             __Read
               _SPI1_GetBuffer
               _SPI1_Put
       _memset
   _transmit_can_message_task
     _CAN_Tx
       _CAN_TxMailbox
         __MessageToTxBuffer
         __Read
           _SPI1_GetBuffer
           _SPI1_Put
         __SendBuffer
           __Modify
             _SPI1_Put
           __Write
             _SPI1_Put
             _SPI1_PutBuffer
       __EnqueueTxMessage
         __MessageToTxBuffer
         ___wmul
     _EUSART_TO_CAN
   _update_graphics
     _EUSART_Master_Request
     _EUSART_Receive

 _tc_int (ROOT)
   _EUSART_Receive_ISR
     _EUSART_Parity_Count
   _EUSART_Transmit_ISR
     _EUSART_Parity_Count
   _MCP2515_ISR
     __RxCommand
       i1_SPI1_GetBuffer
       i1_SPI1_Put
     i1__Modify
       i1_SPI1_Put
     i1__Read
       i1_SPI1_GetBuffer
       i1_SPI1_Put
     i1__SendBuffer
       i1__Modify
         i1_SPI1_Put
       i1__Write
         i1_SPI1_Put
         i1_SPI1_PutBuffer
     i1___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2E      3F       5       78.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      4      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
ABS                  0      0     16E       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4E      10       97.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      A      50      12      100.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50     18      33      14       63.8%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITBANK13           50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK13              50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITBANK14           50      0       0      33        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BANK14              50      0       0      34        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITBANK15           50      0       0      35        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BANK15              50      0       0      36        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITBANK16           50      0       0      37        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BANK16              50      0       0      38        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITBANK17           50      0       0      39        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BANK17              50      0       0      40        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITBANK18           50      0       0      41        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BANK18              50      0       0      42        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITBANK19           50      0       0      43        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BANK19              50      0       0      44        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITBANK20           50      0       0      45        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BANK20               C      0       0      46        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITBANK21           50      0       0      47        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BANK21               0      0       0      48        0.0%
BITBANK22           50      0       0      49        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BANK22               0      0       0      50        0.0%
BITBANK23           50      0       0      51        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BANK23               0      0       0      52        0.0%
BITBANK24           50      0       0      53        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BANK24               0      0       0      54        0.0%
BITBANK25           20      0       0      55        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BANK25               0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
DATA                 0      0     16E      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Sep 17 07:13:39 2020

                       _EUSART_parity_count 00E1                               __switchStates 01BB  
      __end_of_handle_can_messages_from_VCU 1590       __size_of_handle_can_messages_from_VCU 004F  
              _handle_can_messages_from_VCU 1541                                 __CFG_CP$OFF 0000  
                     ??_EUSART_Parity_Count 0070                  ?_transmit_can_message_task 0070  
                              i1__Write@reg 0077                         ___wmul@multiplicand 0033  
                          i1___wmul@product 0074             __size_of_direction_message_task 005A  
                               __CFG_LVP$ON 0000                           ?i1_SPI1_GetBuffer 0070  
                             i1__Write@pBuf 0073                                         l254 09CB  
                                       l277 15AF                          SPI1_PutBuffer@pBuf 0031  
                                       l803 0F53                                         l565 104F  
                                       l573 1102                                         l815 0F91  
                                       l588 118A                                         l960 0BFB  
                                       _PR2 028D                     __size_of_SPI1_GetBuffer 001A  
                        __size_of_CAN_Sleep 0006                       __end_of_CAN_To_EUSART 03FE  
                        ??i1_SPI1_GetBuffer 0073                                __CFG_BORV$LO 0000  
                                       wreg 0009                                  _TXSTA1bits 011E  
                             __CFG_BBEN$OFF 0000                             _update_graphics 108C  
                              __CFG_ZCD$OFF 0000                                        l1011 02B8  
                                      l1013 030D                                        l1024 03FD  
                                      l1019 039C                                        l1043 072C  
                                      l1255 120E                                        l4131 0E95  
                                      l4301 0FE7                                        l4205 0F19  
                                      l4223 0F2E                                        l4143 0EAB  
                                      l4137 0EA0                                        l4305 0FEA  
                                      l4171 0EE6                                        l4155 0EC1  
                                      l4307 0FF6                                        l4245 0F62  
                                      l4173 0EEC                                        l4157 0EC8  
                                      l4149 0EB6                                        l4341 14A2  
                                      l4405 0C85                                        l4335 1480  
                                      l4273 0FA2                                        l4417 0CCF  
                                      l4409 0C9D                                        l4353 0BCA  
                                      l4291 0FD1                                        l4275 0FAB  
                                      l4187 0F01                                        l5411 0ABF  
                                      l4363 0BE8                                        l5325 1180  
                                      l4269 0F97                                        l4429 0CF1  
                                      l4437 0D15                                        l5343 10EF  
                                      l5431 0B4B                                        l4359 0BE0  
                                      l6057 09E4                                        l5441 0B8E  
                                      l5601 15DF                                        l4393 0C31  
                                      l4395 0C39                                        l4387 0C1C  
                                      l4379 0C08                                        l4813 0863  
                                      l6181 1686                                        l5437 0B7F  
                                      l5375 17B6                                        l5711 0352  
                                      l5615 00D9                                        l6175 1676  
                                      l6167 1781                                        l5377 17FE  
                                      l5721 0381                                        l5705 0320  
                                      l4841 1095                                        l5395 0957  
                                      l5459 1208                                        l5643 0196  
                                      l5627 0170                                        l4827 171F  
                                      l5811 07F0                                        l5803 07BF  
                                      l6603 138E                                        l5389 0945  
                                      l5661 01DE                                        l5637 018C  
                                      l5629 0177                                        l5733 03AF  
                                      l5581 159C                                        l5567 11EF  
                                      l4871 16DE                                        l4863 16C4  
                                      l5727 0390                                        l5663 0203  
                                      l5575 1591                                        l5807 07E9  
                                      l5911 0620                                        l4865 16D4  
                                      l5665 0216                                        l6561 157D  
                                      l5577 1593                                        l5921 06CD  
                                      l5913 0671                                        l4875 16E0  
                                      l6539 1638                                        l5667 023B  
                                      l5659 01BA                                        l5579 1595  
                                      l5587 159E                                        l4869 16DB  
                                      l5669 0245                                        l6549 125B  
                                      l5941 072F                                        l5935 0719  
                                      l5927 06E0                                        l5689 02BB  
                                      l5929 06E2                                        l5945 0778  
                                      l6771 03F8                                        l5699 0306  
                                      l6773 03D0                                        l6775 03F0  
                                      l6767 15A4                                        l6769 03C8  
                           CAN_Initialize@p 0243               CAN_TxMailbox@txBufCtrlAddress 023C  
                                      _LATA 0018                                        _LATB 0019  
                                      _LATC 001A                                        _LATD 001B  
                                      _LATE 001C                                        _LATF 001D  
                                      u4140 17F7                                        u4300 0AB3  
                                      u3165 0C1A                                        u4150 17F8  
                                      u2615 14BE                                        u4215 08DC  
                                      u3175 0C2F                                        u4225 0905  
                                      u4235 092E                                        u4405 120F  
                                      u4270 0A9E                                        u4415 1214  
                                      u4335 0B09                                        u4280 0A9F  
                                      u4185 0899                                        u4345 0B26  
                                      u4290 0AB2                                        u4195 08AB  
                                      u4355 0B3E                                        u4605 0254  
                                      u4365 0B61                                        _PMD2 0798  
                                      u4615 0262                                        u4535 0106  
                                      _PMD3 0799                                        _PMD4 079A  
                                      u4545 0119                                        _PMD5 079B  
                                      u4555 012C                                        u4565 0140  
                                      u4985 09D7                                        _TMR1 020C  
                            i1__Write@count 0075                         SPI1_PutBuffer@count 0033  
                                      _WPUB 1F44                                        _WPUC 1F4F  
                        __SetMode@modeMatch 0046                         MCP2515_ISR@pBuf_580 0028  
                       MCP2515_ISR@pBuf_581 002A                      __end_of_CAN_Initialize 0A8D  
                   __end_of_power_down_task 1690                                        _main 1369  
                       __size_of_CAN_Wakeup 001E                      button_task@button_tick 013D  
                           __end_ofi1__Read 1136                       __end_of_CAN_TxMailbox 15E4  
                                      fsr0h 0005                                        fsr1h 0007  
                                      indf0 0000                                        fsr0l 0004  
                                      indf1 0001                                        fsr1l 0006  
                                      btemp 007E                               __CFG_BOREN$ON 0000  
                                      start 0066                                 ?i1_SPI1_Put 0070  
                             __CFG_CSWEN$ON 0000                               __CFG_MCLRE$ON 0000  
                               _SYSTEM_tick 0053                        EUSART_Receive@i_1681 0035  
                        _EUSART_Rx_checksum 00DC                             __end_of__Modify 1166  
             ?_handle_can_messages_from_VCU 0070                             __end_of__Wakeup 13E9  
                ??_Get_Settings_Lock_Status 0031                               _EUSART_TO_CAN 05FE  
                     __size_of_SYSTEM_Sleep 000F                                       ?_main 0070  
                                     _T1CLK 0211                                       _T1CON 020E  
                                     _RC1IE 38CD                                       _RC1IF 387D  
                                     _IOCCF 1F55                                       _IOCCN 1F54  
                                     _IOCIE 38B4                                       _IOCIF 3864  
                                     i1l565 1040                                       i1l573 10AD  
                                     i1l588 10B8                                       i1l942 12FF  
                                     i1l985 1362                                       u426m0 0986  
                                     u438m0 0BB9                                       _TMR0H 059D  
                                     _TX1IE 38CC                                       _TX1IF 387C  
                                     _TMR0L 059C                  Buttons_Update@switch_state 0034  
                         ?i1_SPI1_PutBuffer 0070                 __size_of__MessageToTxBuffer 0131  
                                     _TRISA 0012                                       _TRISB 0013  
                                     _TRISC 0014                                       _TRISD 0015  
                                     _TRISE 0016                                       _TRISF 0017  
                   __size_of_SPI1_PutBuffer 0017                                ?_button_task 0070  
                            __CFG_FCMEN$OFF 0000                                       __Read 119A  
                          __end_of_SPI1_Put 1052                          ??i1_SPI1_PutBuffer 0073  
                             __CFG_WRTB$OFF 0000                               __CFG_WRTC$OFF 0000  
                      MCP2515_ISR@_errFlags 002D                          _EUSART_Tx_checksum 00DD  
                          __end_ofi1__Write 114E                             ??i1__SendBuffer 007A  
                      MCP2515_ISR@_intFlags 002E                          __size_ofi1__Modify 0015  
                          __end_ofi1___wmul 11E9                      _direction_message_task 1690  
                           ?_CAN_Initialize 0047                                       status 0003  
                       i1___wmul@multiplier 0070                                       wtemp0 007E  
                           led_task@LED_row 00D0                        __size_of_MCP2515_ISR 016D  
                  __size_of_SPI1_Initialize 0007                           __end_of_CAN_Sleep 103C  
                            __SetMode@timer 0041                     __size_of_Buttons_Update 0171  
                           __initialization 0068                                _SYSTEM_Sleep 105E  
                              __end_of_main 13A7                    __size_of_Button_Debounce 0044  
                            _LED_Initialize 0801                              __CFG_SAFEN$OFF 0000  
                            ?_EUSART_TO_CAN 0070                       __RxBufferToMessage@id 003F  
                    CAN_TxMailbox@bufStatus 023D                __size_of_Receive_CAN_Message 001D  
                                    ??_main 004E                     __end_of_update_graphics 109D  
                          __end_of__SetMode 1800                                      ?__Read 0034  
                       __size_ofi1_SPI1_Put 0007                      __size_of_SYSTEM_Wakeup 0010  
                                __Read@pBuf 0034                                   ??i1__Read 0076  
                         CAN_Initialize@buf 023B                                      _CAN_Rx 15E4  
                                    _CAN_Tx 0785                                      _ANSELA 1F38  
                                    _ANSELB 1F43                                      _ANSELC 1F4E  
                                    _ANSELD 1F59                                      _ANSELE 1F64  
                                    _ANSELF 1E50                               tc_int@changed 007D  
                                    _T0CON0 059E                                      _T0CON1 059F  
                                    _RB1PPS 1F19                                      _RB3PPS 1F1B  
                                    _RC1STA 011D                                      i1l1152 0012  
                                    i1l1162 0061                                      i1l1157 0037  
                                    i1l1158 003D                                      i1l1255 11D6  
                                    i1l1159 0043                                      _RC7PPS 1F27  
                                    i1l6113 0D52                                      i1l4515 11D0  
                                    i1l6131 0DC8                                      i1l6141 0E27  
                                    i1l6117 0D5A                                      i1l6143 0E2C  
                                    i1l6119 0D64                                      i1l6129 0DC3  
                                    i1l4483 1344                                      i1l6155 0E83  
                                    i1l4487 1354                                      i1l6343 001F  
                                    i1l4497 1367                                      i1l4905 1307  
                                    i1l6337 0018                                      i1l6355 0031  
                                    i1l4917 132A                                      i1l4909 1314  
                                    i1l6365 0049                                      i1l5479 109D  
                                    i1l6369 0052                                      i1l5795 10B0  
                                    u331_24 1349                                      u331_25 1348  
                                    _RCREG1 0119                                      u336_25 11D7  
                                    _SP1BRG 011B                                      u337_25 11DC  
                             ??__SendBuffer 003B                              _EUSART_Receive 0BBE  
                            __RxCommand@cmd 0076                                      _TMR1IE 38D0  
                                    _TMR1IF 3880                                      _TMR2IE 38D1  
                                    _TMR2IF 3881                            ?_power_down_task 0070  
                                    _TX1STA 011E                                      _TXREG1 011A  
                            _EUSART_Rx_head 005C                  _EUSART_Tx_buffer_remaining 00E5  
                            _EUSART_Rx_tail 00E4                              __CFG_PWRTE$OFF 0000  
                            _EUSART_Tx_head 00E6                                      _SW_row 0057  
                            _EUSART_Tx_tail 005D                                   ??__Modify 0034  
                                __RxCommand 1106                      __end_of_LED_Initialize 082D  
                        CAN_TxMailbox@which 004A                                   ??__Wakeup 0047  
                                    __Write 11B4                            __end_of_led_task 1744  
                                 CAN_Rx@ptr 0043                                      ___wmul 1205  
transmit_can_message_task@sendSwitchesTimer 0129                              __CFG_STVREN$ON 0000  
                                __TxCommand 10DA                          _Buttons_Initialize 12B1  
                         __EnqueueTxMessage 142C                         _EUSART_Transmit_ISR 12D2  
                                    _memset 11E9                                ??_CAN_Wakeup 0047  
                              _SW_ROW_ARRAY 0169                                      _tc_int 0004  
                         __end_ofi1__Modify 10DA                   Receive_CAN_Message@result 023B  
                        ?__EnqueueTxMessage 0048                                _SW_ROW_PORTD 0164  
                            _transportState 00E7                              _SPI1_GetBuffer 1180  
                     _EUSART_send_data_flag 00DA                         ?_Buttons_Initialize 0070  
                     MCP2515_ISR@_intFlags2 002C                        EUSART_Parity_Count@i 0072  
                       ??__EnqueueTxMessage 01E6          _j1939_address_claim_was_successful 00EF  
                         __end_of__CRCTable 05FE                            __faultInputState 0159  
                    __end_of_EUSART_Receive 0D22                                  __Write@reg 0038  
                      ?_EUSART_Transmit_ISR 0070                                  __canConfig 1800  
                         _SYSTEM_Initialize 14F6                               ??_Update_LEDs 0033  
                             _LED_row_array 0120                     __end_of__initialization 00D2  
                        ?_SYSTEM_Initialize 0070                        ??_Buttons_Initialize 0031  
                        __end_of_CAN_Wakeup 12B1                  test_clock_rollover@counter 00D1  
                       __end_of__SendBuffer 123D                             ?_LED_Initialize 0070  
                 __end_of__EnqueueTxMessage 146F                              __pcstackCOMMON 0070  
                             _SYSTEM_Wakeup 107C                               __end_of__Read 11B4  
                           ??_EUSART_TO_CAN 0031                                __pidataBANK1 102F  
                              __pidataBANK2 106D                                __pidataBANK3 123D  
                                 ?_SPI1_Put 0070                         ??_SYSTEM_Initialize 0031  
               __size_of__RxBufferToMessage 00FB                           ??_SPI1_Initialize 0031  
                    __end_of_SPI1_GetBuffer 119A                 ??_transmit_can_message_task 024B  
                          __TxCommand@count 0035                             _button_column_1 005B  
                           _button_column_2 005A                             _button_column_3 0059  
                           _button_column_4 0058                                   ?i1__Write 0073  
                                 ?i1___wmul 0070                            ?_update_graphics 0070  
                         ??_Button_Debounce 0031                              _SPI1_PutBuffer 10EF  
                          Button_Debounce@i 0032                      __RxBufferToMessage@dlc 003E  
                                   ??__Read 0037                                _MCP2515_diag 0145  
                      __size_of_button_task 0063                   __end_of_SYSTEM_Initialize 1541  
                     ??_EUSART_Transmit_ISR 0074                                     ?_CAN_Rx 0043  
                                   ?_CAN_Tx 00E9                             ?_EUSART_Receive 0070  
                                __pbssBANK0 004E                                  __pbssBANK1 00A0  
                                __pbssBANK2 0120                                  __pbssBANK3 01A0  
                                __pbssBANK4 0220                              _CAN_rxMessageQ 264C  
                    _person_on_machine_flag 00D4                   __size_ofi1_SPI1_GetBuffer 0015  
                            __TxCommand@cmd 0037                 __size_of_EUSART_Receive_ISR 0033  
                     _EUSART_Master_Request 146F                 __end_of_EUSART_Parity_Count 1369  
                            _CAN_txMessageQ 271E                                ??i1_SPI1_Put 0070  
                            _Buttons_Update 0E8F                                 ?__RxCommand 0073  
                            ?_SYSTEM_Wakeup 0070                                   ?__SetMode 0070  
                                __pmaintext 1369                         __end_of_Update_LEDs 1293  
                          __SendBuffer@addr 003D                            __SendBuffer@pBuf 0039  
                                   ?__Write 0034                                  ??_SPI1_Put 0031  
                                   ?___wmul 0031                                 ?__TxCommand 0034  
                                __pintentry 0004                                 __Read@count 0036  
                                   ?_memset 0031                                   SPI1_Put@c 0031  
                           ?_SPI1_GetBuffer 0031                                     ?_tc_int 0070  
                    __MessageToTxBuffer$481 003F                      __MessageToTxBuffer$473 003A  
                                ??i1__Write 0076                      __end_of_SPI1_PutBuffer 1106  
                        CAN_Initialize@wait 0240                         __CFG_RSTOSC$HFINT32 0000  
          test_clock_rollover@rollover_tick 0141                                  ??i1___wmul 0074  
                                   _LED_COL 0151                      __MessageToTxBuffer@ext 0045  
                    __MessageToTxBuffer@rtr 003E                                     _SP1BRGH 011C  
                          led_task@led_tick 0139                             __RxCommand@pBuf 0077  
                          ??_CAN_Initialize 0049                                     _SSP1BUF 018C  
                   ?_direction_message_task 0070                          __end_ofi1_SPI1_Put 1043  
                                   i1__Read 111E                                 __Modify@reg 0034  
                 _transmit_can_message_task 1744                                   ?_led_task 0070  
                           __size_of_CAN_Rx 0056                             __size_of_CAN_Tx 006D  
                               __SendBuffer 1221                         _Receive_CAN_Message 1259  
                           _EUSART_Rx_count 00E3                      __end_of_Buttons_Update 1000  
                 __size_ofi1_SPI1_PutBuffer 0013                         CAN_TxMailbox@pFrame 0048  
      direction_message_task@direction_tick 0131                      __size_of_CAN_To_EUSART 0328  
                                ??__SetMode 0039                                     __Modify 114E  
                             _CAN_ID_switch 00D8                                     __Wakeup 13A7  
                       CAN_TxMailbox@result 023B                  __size_of__EnqueueTxMessage 0043  
                           __size_of__Write 001A                                   _CAN_Sleep 1036  
                           __size_of___wmul 001C                                  CAN_Rx@pBuf 004B  
                           __size_of_memset 001C                             __size_of_tc_int 0062  
                __end_of__MessageToTxBuffer 0BBE                        ?_Receive_CAN_Message 0070  
                                   __ptext1 108C                                     __ptext2 0BBE  
                                   __ptext3 146F                                     __ptext4 1744  
                                   __ptext5 05FE                                     __ptext6 0785  
                                   __ptext7 142C                                     __ptext8 1590  
                                   __ptext9 1221                             ?_SPI1_PutBuffer 0031  
                           __CFG_WRTAPP$OFF 0000                                   _T1CONbits 020E  
                        _EUSART_packet_data 00A0                      __size_of_CAN_TxMailbox 0054  
                                 _T2CONbits 028E                          button_task@can_msg 003F  
                           __CFG_WRTSAF$OFF 0000              __end_of_direction_message_task 16EA  
                                 _IOCCFbits 1F55                    __MessageToTxBuffer@canid 0046  
                       __size_of__RxCommand 0018                  __size_of_SYSTEM_Initialize 004B  
                                   clrloop0 1053                         SPI1_GetBuffer@count 0033  
                      end_of_initialization 00D2                                  ??_led_task 0034  
                        _EUSART_byte_parity 00E0                         __size_of__TxCommand 0015  
         __size_of_Get_Settings_Lock_Status 0004                               ??_MCP2515_ISR 0020  
                 ?_Get_Settings_Lock_Status 0070                                     init_ram 07F2  
                    Receive_CAN_Message@can 023C                                     memset@c 0031  
                     __end_ofi1__SendBuffer 1180                        i1SPI1_GetBuffer@pBuf 0070  
                                   memset@n 0033                                     memset@p 0036  
                    ?_EUSART_Master_Request 0070                                 _Update_LEDs 1276  
                                   initloop 07F3                             ?_Buttons_Update 0034  
                           ??_SYSTEM_Wakeup 0047                           _EUSART_Initialize 13E9  
                 __MessageToTxBuffer@pFrame 0031                          ?_EUSART_Initialize 0070  
     EUSART_Parity_Count@EUSART_byte_parity 0071                                  ?_CAN_Sleep 0070  
                     i1___wmul@multiplicand 0072                       ??_Receive_CAN_Message 004D  
                       ??_EUSART_Initialize 0031                                 __Write@pBuf 0034  
                                 _PORTCbits 000E                                   i1__Modify 10C5  
                      __CFG_WDTCCS$LFINTOSC 0000                               _CAN_To_EUSART 00D6  
                                 _TRISBbits 0013                                   _TRISCbits 0014  
                          __CFG_FEXTOSC$OFF 0000                            _LED_column_array 004E  
                             __Modify@value 0033                       i1SPI1_PutBuffer@count 0072  
                            __end_of_CAN_Rx 163A                              __end_of_CAN_Tx 07F2  
                          i1_SPI1_GetBuffer 10B0                   __end_of_EUSART_Initialize 142C  
                                 __CRCTable 03FE                          i1__SendBuffer@addr 007C  
                        i1__SendBuffer@pBuf 0078                            ??_LED_Initialize 0031  
                           _SPI1_Initialize 1043                               _CAN_TxMailbox 1590  
                          _can_send_message 01D8                         __end_of_MCP2515_ISR 0E8F  
                           _Button_Debounce 14B2                    __size_of_power_down_task 0056  
                            __end_of__Write 11CE                              __end_of___wmul 1221  
                         __size_of_SPI1_Put 0008                            CAN_TxMailbox@buf 023E  
                            __end_of_memset 1205                              __end_of_tc_int 0066  
                         __size_ofi1__Write 0018                              ?_CAN_To_EUSART 0070  
                                ?i1__Modify 0071                            ??_EUSART_Receive 0031  
                       start_initialization 0068                           __size_ofi1___wmul 001B  
                             __SetMode@mode 0045                        __RxBufferToMessage@p 0031  
                                  ??_CAN_Rx 0045                                    ??_CAN_Tx 01EC  
                    EUSART_Master_Request@i 0032                                   __Read@reg 0038  
                            ?_CAN_TxMailbox 0048                           _machine_direction 00D2  
                          i1_SPI1_PutBuffer 109D                 __size_of_Buttons_Initialize 0021  
                   __RxBufferToMessage@pMsg 0033                                ??__RxCommand 0075  
                          __CFG_LPBOREN$OFF 0000          __size_of_transmit_can_message_task 005A  
                          ??_SPI1_GetBuffer 0034                  __end_of__RxBufferToMessage 098B  
                                  ??__Write 0037                                    ??___wmul 0035  
                              ??__TxCommand 0036                                 ??_CAN_Sleep 0047  
                         __size_of__SetMode 0062                                 __pdataBANK1 00ED  
                               __pdataBANK2 015F                                 __pdataBANK3 01CA  
                     __end_of_EUSART_TO_CAN 0785                                    ??_memset 0035  
                                  ??_tc_int 002F                        EUSART_TO_CAN@message 0035  
                               __pbssBIGRAM 264C                 __end_of_EUSART_Transmit_ISR 1302  
                             ??_button_task 0037                                   ___latbits 0003  
                             __pcstackBANK0 0020                               __pcstackBANK1 00E9  
                             __pcstackBANK3 01E6                               __pcstackBANK4 023B  
                   __end_of_SPI1_Initialize 104A              ??_handle_can_messages_from_VCU 01E6  
                           __TxCommand@pBuf 0034                                    ?i1__Read 0073  
                        __end_of__RxCommand 111E                    __size_of_update_graphics 0011  
                              CAN_Tx@pFrame 00E9                     blink_forward_led@toggle 00ED  
                __end_of_EUSART_Receive_ISR 1335                          __end_of__TxCommand 10EF  
                               _MCP2515_ISR 0D22                  __size_of_EUSART_Initialize 0043  
                   __end_of_Button_Debounce 14F6                                ?__SendBuffer 0039  
                         __size_of_led_task 005A                             i1__Modify@value 0072  
                     blink_forward_led@tick 0125                                    ?__Modify 0032  
                             ?_SYSTEM_Sleep 0070                                 __numLedRows 00EE  
                                  ?__Wakeup 0070                            ??_SPI1_PutBuffer 0034  
         __end_of_transmit_can_message_task 179E                       __MessageToTxBuffer@id 0041  
                          __CFG_PPS1WAY$OFF 0000                __size_of_EUSART_Parity_Count 0034  
                    _EUSART_Rx_parity_error 00DF                             ??_CAN_To_EUSART 0031  
                        __end_of__canConfig 1820            __end_of_Get_Settings_Lock_Status 1036  
                         ??_power_down_task 01E6                                    _BAUD1CON 011F  
                               ??i1__Modify 0073                            __CFG_WDTE$NSLEEP 0000  
                            __size_of__Read 001A                         CAN_Initialize@temp8 0245  
                               _CPUDOZEbits 088C                     ??_EUSART_Master_Request 0031  
                          ??_Buttons_Update 0035                          __MessageToTxBuffer 0A8D  
                    __EnqueueTxMessage@pBuf 004A                             ??_CAN_TxMailbox 004C  
                       __end_of_button_task 0890                     __MessageToTxBuffer@pBuf 0033  
                              ?_Update_LEDs 0031                          SPI1_GetBuffer@pBuf 0031  
                            ___wmul@product 0035                                    _LATAbits 0018  
                                  _LATBbits 0019                                   clear_ram0 1052  
                                  _PIE0bits 0716                                    _PIE3bits 0719  
                       ?__MessageToTxBuffer 0031                              ??_SYSTEM_Sleep 0047  
                               i1SPI1_Put@c 0070                                    _PIR0bits 070C  
                                  _RX1DTPPS 1ECB        handle_can_messages_from_VCU@can_tick 0135  
                         __CFG_BBSIZE$BB512 0000                                    _SPI1_Put 104A  
                          __RxCommand@count 0074                                    _SSP1CON1 0190  
                      __CFG_WDTCPS$WDTCPS_5 0000                                    _SSP1STAT 018F  
                                  _j1939_sa 00E8             CAN_To_EUSART@machine_directionA 0036  
                                  i1__Write 1136                    __end_ofi1_SPI1_GetBuffer 10C5  
                         ___wmul@multiplier 0031                                __Modify@mask 0032  
                                  i1___wmul 11CE                        i1SPI1_PutBuffer@pBuf 0070  
                      ??__MessageToTxBuffer 0035                            _EUSART_Rx_buffer 01A0  
                          ?_SPI1_Initialize 0070                            __size_ofi1__Read 0018  
                          _EUSART_Tx_buffer 0220                            ?_Button_Debounce 0070  
                    _EUSART_packet_checksum 00DE       direction_message_task@direction_state 00CF  
                            Update_LEDs@row 0031                       CAN_Initialize@bResult 0242  
                   __size_of_CAN_Initialize 0102                           ??_update_graphics 0037  
                     CAN_Initialize@pConfig 0047                                __RxCommand@p 0073  
                     __end_of_SYSTEM_Wakeup 108C                                    __SetMode 179E  
               __end_of_Receive_CAN_Message 1276                            __size_of__Modify 0018  
                          __size_of__Wakeup 0042                   _EUSART_slave_bad_response 00CD  
                                  __canMode 005E                               _j1939tp_rxbuf 00BB  
                           EUSART_Receive@i 0033                                  _CAN_Wakeup 1293  
                  __end_ofi1_SPI1_PutBuffer 10B0                      __size_ofi1__SendBuffer 001A  
                            i1__Modify@mask 0071                                 _button_flag 00D3  
                               _button_task 082D                    _Get_Settings_Lock_Status 1032  
                                  __ptext10 0A8D                                    __ptext11 163A  
                                  __ptext20 1541                                    __ptext12 13A7  
                                  __ptext21 1259                                    __ptext13 107C  
                                  __ptext30 14B2                                    __ptext22 00D6  
                                  __ptext14 1293                                    __ptext31 14F6  
                                  __ptext23 15E4                                    __ptext15 13E9  
                                  __ptext40 1180                                    __ptext32 0801  
                                  __ptext24 1205                                    __ptext16 105E  
                                  __ptext41 114E                                    __ptext33 098B  
                                  __ptext25 0890                                    __ptext17 1036  
                                  __ptext50 109D                                    __ptext42 104A  
                                  __ptext34 11E9                                    __ptext26 1690  
                                  __ptext18 16EA                                    __ptext51 10C5  
                                  __ptext43 1043                                    __ptext35 11B4  
                                  __ptext27 082D                                    __ptext19 1276  
                                  __ptext52 111E                                    __ptext44 12B1  
                                  __ptext36 10DA                                    __ptext28 0E8F  
                                  __ptext53 1106                                    __ptext37 10EF  
                                  __ptext29 1032                                    __ptext54 103C  
                                  __ptext46 0D22                                    __ptext38 179E  
                                  __ptext55 10B0                                    __ptext47 11CE  
                                  __ptext39 119A                                    __ptext56 12D2  
                                  __ptext48 1166                                    __ptext57 1302  
                                  __ptext49 1136                                    __ptext58 1335  
                                  _led_task 16EA            transmit_can_message_task@can_msg 004D  
                      CAN_To_EUSART@message 0037                    _EUSART_Rx_checksum_error 00DB  
                                  _button_5 00D7                                    _button_6 00D6  
                                  _button_7 00D5                               __size_of_main 003E  
                  __EnqueueTxMessage@pFrame 0048                        __CFG_WDTCWS$WDTCWS_7 0000  
                      __size_of__SendBuffer 001C                        Buttons_Update@SW_row 0036  
                                  int$flags 007E                             MCP2515_ISR@pBuf 0026  
                              _SSP1STATbits 018F                    ??_direction_message_task 0031  
                             i1__Read@count 0075                           _test_send_message 01CA  
                        __RxBufferToMessage 0890                                  _INTCONbits 000B  
                      __end_of_SYSTEM_Sleep 106D                                    memset@p1 0037  
                     i1SPI1_GetBuffer@count 0072                         ?__RxBufferToMessage 0031  
                                  intlevel1 0000                               i1__Modify@reg 0073  
                        _current_address_ID 00E2                         _EUSART_Parity_Count 1335  
                __end_of_Buttons_Initialize 12D2                                ?_MCP2515_ISR 0070  
            power_down_task@power_down_tick 012D                               i1__SendBuffer 1166  
                         __CFG_CLKOUTEN$OFF 0000                                  _RCSTA1bits 011D  
                      __size_of_Update_LEDs 001D                                  i1_SPI1_Put 103C  
                           _power_down_task 163A                                i1__Read@pBuf 0073  
                        _EUSART_Receive_ISR 1302                        ??__RxBufferToMessage 0035  
                   __size_of_LED_Initialize 002C                        ?_EUSART_Parity_Count 0070  
                               ?_CAN_Wakeup 0070                               __pstringtext1 03FE  
                             __pstringtext2 1800                           __enableInputState 0156  
                       ?_EUSART_Receive_ISR 0070                                  _SSP1DATPPS 1EC6  
                       _EUSART_receive_flag 00D9                                 i1__Read@reg 0077  
                              __Write@count 0036                __size_of_EUSART_Transmit_ISR 0030  
            __size_of_EUSART_Master_Request 0043               __end_of_EUSART_Master_Request 14B2  
                    __size_of_EUSART_TO_CAN 0187                                 main@LED_row 00EB  
                            ?i1__SendBuffer 0078                     __size_of_EUSART_Receive 0164  
                      ??_EUSART_Receive_ISR 0074                              _CAN_Initialize 098B  
                         __extraSwitchState 015C                               _LED_ROW_PORTA 015F  
